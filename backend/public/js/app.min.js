(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
 'use strict';
 window.name = "NG_DEFER_BOOTSTRAP!";
 /**
  * @name InnorideAdminPanel
  * @description 
  *   This is main angular app for this InnorideAdminPanel.
  *   This handles all the functionality.
  * @requires ui-router 
  * @requires ui.bootstrap
  * @requires ngAnimate
  * @requires datatables
  * @requires toastr
  * @requires Common
  * @requires Config
  * @requires Modules
  */

 var eArcApp =
     angular.module('eArcApp', [
         'ngCookies',
         'ui.router',
         'ui.bootstrap',
         'ngAnimate',
         'toaster',
         'ui.bootstrap.datetimepicker',
         'sun.scrollable',
         'ngFileUpload',
         'ngDraggable',
         'angular-loading-bar',
         'lk-google-picker',
         'dropbox-picker',
         'angularOneDrivePicker',
         'ui.select',
         'ui.bootstrap.contextMenu',
         'ui.bootstrap.showErrors',
         'ui.grid',
         'ui.grid.resizeColumns',
         'ui.grid.moveColumns',
         'ui.grid.autoResize',
         'ui.grid.pinning',
         'as.sortable',
         'ui.select',
         'ngSanitize',
         require('./util').name,
         require('./modules').name,
         require('./validation/validation').name,
     ]);

 eArcApp.run([
     '$http',
     '$cookies',
     'BasicsFactory',
     '$rootScope',
     '$state',
     '$window',
     function(
         $http,
         $cookies,
         BasicsFactory,
         $rootScope,
         $state,
         $window
     ) {
         console.log('App Starts');
         $rootScope
             .$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {
                 var basicData = BasicsFactory.getDetails();
                 // console.log("basicData : ", basicData, toState.type);
                 if (toState.type === "authenticated" && basicData && !Object.keys(basicData).length) {
                     (!$rootScope.prevState) &&
                     ($rootScope.prevState = toState);
                     $state.go('public.login');
                     e.preventDefault();

                 }

                 /*else if (toState.type === "Public" && userData && Object.keys(userData).length !== 0) {
                     $state.go(fromState.name);
                 }*/

             });

         $rootScope
             .$on('$stateChangeSuccess',
                 function(event, toState, toParams, fromState, fromParams) {
                     $rootScope.$broadcast('ActiveMenuOption', toState);
                 });

     }
 ]);

 eArcApp.config([
     '$httpProvider',
     '$urlRouterProvider',
     'cfpLoadingBarProvider',
     'lkGoogleSettingsProvider',
     'DropBoxSettingsProvider',
     'angularOneDriveSettingsProvider',
     '$locationProvider',
     function(
         $httpProvider,
         $urlRouterProvider,
         cfpLoadingBarProvider,
         lkGoogleSettingsProvider,
         DropBoxSettingsProvider,
         angularOneDriveSettingsProvider,
         $locationProvider
     ) {
         $urlRouterProvider.when('', '/login');
         $urlRouterProvider.otherwise('/404');
         cfpLoadingBarProvider.includeSpinner = false;

         // $httpProvider.defaults.withCredentials = true;

         lkGoogleSettingsProvider.configure({
             apiKey: 'AIzaSyAKHqSZmHpkRE-hHq1f-50LHtWn_C0RDLk',
             clientId: '918637953416-nu5734pbs8mqvvslet02dek24juocs59.apps.googleusercontent.com',
             scopes: ['https://www.googleapis.com/auth/drive']
                 // locale: 'ja'
                 /*features: ['..', '..'],
                 views: ['..', '..']*/
         });

         DropBoxSettingsProvider.configure({
             linkType: 'direct', //dropbox link type
             multiselect: true, //dropbox multiselect
             extensions: ['.*'], //dropbox file extensions
             box_clientId: 'kh90udrdar63yor52siliw4qq4mgx5v8', // box CLient Id
             box_linkType: 'direct', //box link type
             box_multiselect: 'true' //box multiselect
         });

         angularOneDriveSettingsProvider.configure({
             client_id: 'dc8a39a6-b608-4526-9291-3703c1f8279e',
             redirect_uri: 'http://localhost/e-arc/build',
             linkType: 'downloadLink',
             multiSelect: true
         });
         // $locationProvider.html5Mode(true);
     }
 ]);

 /*eArcApp.value('GoogleApp', {
     apiKey: 'AIzaSyAKHqSZmHpkRE-hHq1f-50LHtWn_C0RDLk',
     clientId: '918637953416-nu5734pbs8mqvvslet02dek24juocs59.apps.googleusercontent.com',
     scopes: [
         // whatever scopes you need for your app, for example:
         'https://www.googleapis.com/auth/drive'
         // ...
     ]
 });*/


 /*eArcApp.directive('ngRightClick', function($parse) {
     return function(scope, element, attrs) {
         var fn = $parse(attrs.ngRightClick);
         element.bind('contextmenu', function(event) {
             scope.$apply(function() {
                 console.log('right click',attrs);
                 event.preventDefault();

             });
         });
     };
 });
*/
 bootstrapApplication();

 function bootstrapApplication() {
     angular.element(document).ready(function() {
         angular.resumeBootstrap(['eArcApp']);
     });
 }

},{"./modules":70,"./util":99,"./validation/validation":100}],2:[function(require,module,exports){
'use strict';
// var baseURL = "http://ec2-52-74-170-67.ap-southeast-1.compute.amazonaws.com:3000/api/v1";
var baseURL = "https://pwservicestg1.planwellcollaborate.com/Web";
// var baseURL2 = "http://192.168.0.73:8001/api/v1";
//var baseURL2 = "http://192.168.0.57:8001/api/v1";
 var baseURL2 = "/api/v1";

module.exports = {
    authenticate: baseURL + '/api/Authentication',
    projectList: baseURL + '/api/Project',
    folderDetails: baseURL + '/api/ProjectItem',
    folder: baseURL + '/api/ProjectFolder',
    folderList: baseURL + '/api/ProjectFolder',
    projectDocument: baseURL + '/api/ProjectDocument',
    customProperty: baseURL + '/api/CustomProperty',
    customPropertyAttribute: baseURL + '/api/CustomPropertyAttribute',
    customPropertyLookup: baseURL + '/api/Lookup',
    createSession: baseURL + '/api/S3Upload/CreateSession',
    generateUploadUrl: baseURL + 'api/S3Upload/GetUploadUrls',
    createProject: baseURL + '/api/Project/Create',
    editProject: baseURL + '/api/Project/Update',
    location: baseURL + '/api/Location',
    checkFirstLogin: baseURL2 + '/check-login',
    getMasterTemplate: baseURL2 + '/get-master-template',
    addCustomTemplate: baseURL2 + '/add-custom-template',
    contactList: baseURL + '/api/Contact',
    groupList: baseURL + '/api/Group',
    groupMember: baseURL + '/api/GroupMember',
    projectRole: baseURL + '/api/ProjectRole',
    createContact: baseURL + '/api/Contact/Create',
    createGroup: baseURL + '/api/Group/Create',
    updateGroup: baseURL + '/api/Group/Update',
    updateContact: baseURL + '/api/Contact/Update'
}

},{}],3:[function(require,module,exports){
'use strict';

module.exports = {
    101: "Architecture",
    102: "Interior Design",
    103: "Building Construction",
    104: "Engineering",
    105: "Urban Planning",
    106: "Other",
    1019: "Real Estate Development",
    1020: "Construction Management",
    1021: "Surveying",
    1022: "Facility Management",
    1023: "Owner Developer",
    1024: "Banker",
    1025: "Government",
    1026: "Utility",
    1027: "Subcontractor",
    1028: "Building Product Manufacturer",
    1029: "Media/:Public Relations",
    1030: "Advertising",
    1031: "Marketing",
    1032: "Lega"
};

},{}],4:[function(require,module,exports){
'use strict';

module.exports = {
    "107": "Architect/Engineer",
    "108": "Owner/Developer",
    "109": "General Contractor",
    "1010": "Sub Contractor",
    "1011": "Supplier/Distributor",
    "1012": "Reprographer",
    "1013": "Print Services",
    "1014": "Bldg Production Manufacturer",
    "1015": "Government",
    "1016": "Utility",
    "1017": "Construction Manager",
    "1018": "Other"
};

},{}],5:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'FolderListService',
    'oldName',
    'requestData',
    'pathList',
    '$timeout',
    'toaster',
    function(
        $rootScope,
        $scope,
        $uibModalInstance,
        FolderListService,
        oldName,
        requestData,
        pathList,
        $timeout,
        toaster
    ) {
        var vm = this;
        vm.selectedFolder = "";
        $scope.$on('changeCurrentDir', function(e, d) {
            vm.selectedFolder = d;
        });
        $scope.$broadcast('rename-folder', {
            breadcrumbList: pathList
        });
        $timeout(function() {
            $scope.$broadcast('rename-folder', {
                breadcrumbList: pathList
            });
        }, 0);



        vm.save = function() {
            console.log('Selected folder ', vm.selectedFolder);
            $uibModalInstance.close(changeCurrentDir);

        };

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],6:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'UploadService',
    'ProjectFolderID',
    'PINProjectID',
    'breadcrumbList',
    function(
        $rootScope,
        $scope,
        $uibModalInstance,
        UploadService,
        ProjectFolderID,
        PINProjectID,
        breadcrumbList
    ) {
        var vm = this;
        vm.preventSubmit = false;
        vm.save = function() {
            console.log('vm.ok');
            vm.preventSubmit = true;
            vm.name = vm.name.trim();
            if (!vm.name) {
                return;
            }
            UploadService.createFolder({
                    PINProjectID: PINProjectID,
                    data: {
                        "PINProjectID": PINProjectID,
                        "FolderName": vm.name,
                        "ParentFolderID": ProjectFolderID
                    }
                })
                .then(function(response) {
                        vm.preventSubmit = false;
                        $rootScope.$broadcast('new-folder', {
                            "FolderName": vm.name,
                            "ParentFolderID": ProjectFolderID,
                            "breadcrumbList": breadcrumbList
                        })
                        $uibModalInstance.close({
                            isSucess: true
                        });
                    },
                    function(err) {
                        vm.preventSubmit = false;
                        vm.cancel();
                    });
        };
        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],7:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'UploadService',
    'ProjectFolderID',
    'BaseData',
    'Folder',
    'FolderListService',
    'toaster',
    function(
        $rootScope,
        $scope,
        $uibModalInstance,
        UploadService,
        ProjectFolderID,
        BaseData,
        Folder,
        FolderListService,
        toaster
    ) {
        var vm = this,
            folderData = {};

        function init() {
            if (Folder.ChildFolderCount || Folder.DocumentCount) {
                vm.hasChild = true;
            } else {
                vm.hasChild = false;
            }
            folderData.headers = {
                TokenKey: BaseData.tokenKey
            }
            folderData.params = {
                pinProjectId: BaseData.PINProjectID,
                projectFolderId: Folder.ProjectFolderID,
                hierarchyDelete: 1
            }
        }
        vm.save = function() {
            FolderListService.deleteFolder(folderData).then(function(response) {
                console.log('Delete Folder success', response);
                toaster.pop('Success', 'Folder has been deleted successfully');
                $uibModalInstance.close({
                    isSucess: true
                });
            }, function(error) {
                console.log('Delete Folder Fail', error);
            })


        };
        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
        init();
    }
];

},{}],8:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'UploadService',
    'FolderListService',
    'toaster',
    'moveCount',
    'deleteData',
    function(
        $rootScope,
        $scope,
        $uibModalInstance,
        UploadService,
        FolderListService,
        toaster,
        moveCount,
        deleteData
    ) {
        var vm = this,
            folderData = {};

        vm.init = function() {
            console.log('Delete', deleteData);
            vm.fileCount = moveCount;
        }
        vm.save = function() {
            FolderListService.deleteDocument(deleteData).then(function(response) {
                $uibModalInstance.close({
                    isSucess: true
                });
            }, function(error) {
                console.log('Error', error);
                $uibModalInstance.dismiss('cancel');
            })

        };
        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],9:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$uibModalInstance',
    function(
        $scope,
        $uibModalInstance
    ) {
        var vm = this;
        vm.save = function() {
            console.log('vm.ok');
            vm.name = vm.name.trim();
            if (!vm.name) {
                return;
            }
            var domain = ("https://" + vm.name + ".egnyte.com");
            var egnyte = Egnyte.init(domain, {
                key: "f6v6542az2ks2vesntgdzvu9",
                mobile: false
            });
             window.egnyte = egnyte;
            // egnyte.API.auth.requestToken();
            // egnyte.API.auth.requestTokenReload(function(res) {
            //     console.log("//can work with API", res);
            // }, function(res) {
            //     console.log("//request denied", res);
            // });

            // egnyte.API.auth.requestTokenPopup(
            //             function() {
            //                 console.log("//can work with API");
            //             },
            //             function() {
            //                 console.log("//request denied");
            //             },
            //             "https://127.0.0.1:9999/dist/resources/token.html"
            //         );
           
            console.log("egnyte : ", egnyte);
            // window.open('domain', "");
        };
        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],10:[function(require,module,exports){
module.exports = [
    '$state',
    '$rootScope',
    '$scope',
    '$window',
    '$state',
    'LoginService',
    'BasicsFactory',
    'CustomTemplateService',
    'toaster',
    'ThemeFactory',
    function($state, $rootScope, $scope, $window, $state, LoginService, BasicsFactory, CustomTemplateService, toaster, ThemeFactory) {
        var vm = this,
            loginData = {};
        vm.user = {};
        vm.remember = false;

        function init() {
            var user = $window.localStorage.getItem('userDetailsData');
            console.log('user', user);
            if (user) { //Details is remembered
                vm.user = JSON.parse(user);
                vm.remember = true;
            } else {
                vm.user = {
                    email: '',
                    password: ''
                }
            }
            loginData.headers = {
                'Decrypt': false,
                'Content-type': 'application/json',
                'Access-Control-Expose-Headers': 'TokenKey'
            }
        }
        vm.doLogin = function() {
            if (vm.remember) {
                $window.localStorage.setItem('userDetailsData', JSON.stringify(vm.user));
            } else {
                $window.localStorage.removeItem('userDetailsData');
            }
            loginData.headers.LoginId = vm.user.email;
            loginData.headers.Password = vm.user.password;

            LoginService.doLogin(loginData).then(function(response) {
                console.log('Login response : ', response[0]);
                window.test = response[2];

                /*BasicsFactory.setTokenKey(response[2]('TokenKey'));
                BasicsFactory.setPWAccountID(response[0].PWAccountID);
                BasicsFactory.setPersonalDetails(response[0]);*/

                BasicsFactory.setUserDetails({
                    tokenKey: response[2]('TokenKey'),
                    PWAccountID: response[0].PWAccountID,
                    personalDetails: response[0]
                });
                var customData = {};
                customData.params = {
                    PWUserId: response[0].PWAccountID
                }
                CustomTemplateService.checkFirstLogin(customData).then(function(response) {

                    var firstLogin = response[0].data;
                    console.log('custom template check first login', firstLogin);
                    if ($rootScope.prevState) {
                        console.log('$rootScope.prevState : ', $rootScope.prevState);
                        $state.go($rootScope.prevState);
                        $rootScope.prevState = undefined;
                    } else {
                        // $state.go('authenticated.layout.dashboard');

                        if (firstLogin.firstTimeLogin) { //It means the user is logging in for the first time

                            $state.go('authenticated.theme.step1');
                        } else {
                            //Set Theme details
                            ThemeFactory.topElements(firstLogin.templateConfig.elements.top);
                            ThemeFactory.leftElements(firstLogin.templateConfig.elements.left);
                            ThemeFactory.elements(firstLogin.templateConfig.elements.center);
                            ThemeFactory.rightElements(firstLogin.templateConfig.elements.right);
                            ThemeFactory.bottomElements(firstLogin.templateConfig.elements.bottom);
                            $state.go('authenticated.layout.dashboard');
                        }

                    }
                }, function(error) {
                    console.log('Custom template error', error);
                    $state.go('authenticated.layout.dashboard');
                }).finally(function() {

                })

                // $state.go('authenticated.project.list');
                // $state.go('authenticated.upload');

                toaster.pop('success', 'You have been logged in successfully.');
            }, function(error) {
                console.log('Login error', error);
                toaster.pop('error', error.ErrorMessage);
            })
        }

        init();
        // vm.doLogin();
    }
]

},{}],11:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$uibModalInstance',
    'FolderListService',
    'oldName',
    'requestData',
    'toaster',
    function(
        $scope,
        $uibModalInstance,
        FolderListService,
        oldName,
        requestData,
        toaster
    ) {
        var vm = this;
        vm.folder = {
            newName: oldName
        };
        vm.ok = function() {
            vm.folder.newName = vm.folder.newName.trim();
            if (vm.folder.newName === oldName) {
                toaster.pop('Warning',
                    'No change detected.');
                return;
            }

            requestData.data.FolderName = vm.folder.newName;
            console.log("requestData ", requestData);
            FolderListService.moveFolder(requestData).then(function(response) {
                $uibModalInstance.close();
            }, function(error) {
                console.log('Folder Rename ', error);
            })

        };

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],12:[function(require,module,exports){
'use strict';

module.exports = [
    '$scope',
    '$uibModalInstance',
    'toaster',
    'HeaderText',
    function(
        $scope,
        $uibModalInstance,
        toaster,
        HeaderText
    ) {
        var vm = this;
        vm.init = function() {
            vm.headerText = HeaderText;
        }
        vm.send = function() {
            $uibModalInstance.close();

        };

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
    }
];

},{}],13:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$uibModalInstance',
    'FolderListService',
    'UploadService',
    'ProjectFolderID',
    'PINProjectID',
    'getFile',
    'requestHeaders',
    'getCustomPropertyListModal',
    function(
        $rootScope,
        $scope,
        $uibModalInstance,
        FolderListService,
        UploadService,
        ProjectFolderID,
        PINProjectID,
        getFile,
        requestHeaders,
        getCustomPropertyListModal
    ) {
        var vm = this;
        /*
         * For calling custom property attribute list
         */
        function getCustomPropertyAttribute() {

            var customData = {};
            customData.params = {
                "customPropertyId": getCustomPropertyListModal[1].CustomPropertyID
            }
            customData.headers = {
                TokenKey: requestHeaders.TokenKey,
                PINProjectID: PINProjectID
            }
            FolderListService.getCustomPropertyAttributeList(customData).then(function(response) {
                console.log('Custom Property Attribute', response);
            }, function(error) {
                console.log('Error', error);
            })

        }
        /*
         * Initialization
         */
        var lookupArray = [],
            lookupCount = 0;

        function init() {

            vm.file = getFile;
            vm.customPropertyList = getCustomPropertyListModal;
            getAllLookup();
            // getCustomPropertyAttribute();
            // Date Time picker Settings
            $scope.today = function() {
                $scope.dt = new Date();
            };
            $scope.today();
            $scope.open = function(property) {
                property.opened = true;
            };
            $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
            $scope.format = $scope.formats[0];
            $scope.popup1 = {
                opened: false
            };
            $scope.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            // Date Time Picker settings
        }
        init();
        /*
         * Get Details of a document
         */
        function getDocumentDetails() {
            var documentDetailsData = {};
            documentDetailsData.params = {
                projectDocumentId: vm.file.ProjectDocumentID,
                source: 5,
                operation: 1
            }
            documentDetailsData.headers = {
                TokenKey: requestHeaders.TokenKey,
                PINProjectID: PINProjectID,
                FromAWS: true
            }
            FolderListService.getDocumentDetails(documentDetailsData).then(function(response) {
                console.log('Details success', response);
            }, function(error) {
                console.log('Details error', error);
            })
        }
        /*
         * Get Attribute Lookup
         */
        function getAllLookup() {
            vm.customPropertyList.forEach(function(val) {
                var lookupDetails = {},
                    count = 0;
                lookupDetails.headers = {
                    TokenKey: requestHeaders.TokenKey,
                    PINProjectID: PINProjectID
                }
                if (val.PropertyType === 2) {
                    count++;
                    //Set Params
                    lookupDetails.params = {
                        customPropertyId: val.Attributes[0].CustomPropertyID,
                        customAttributeId: val.Attributes[0].CustomAttributeID
                    }
                    val.lookupList = [];
                    FolderListService.getLookup(lookupDetails).then(function(response) {
                        lookupArray.push(response[0]);
                        lookupCount++;
                        if (count === lookupCount) {
                            console.log('Stop here');
                            assignLookup();
                        }
                    }, function(error) {
                        console.log('lookup error', error);
                    })
                }
            })
        }
        /*
         * Assign respective lookup data list to respective fields
         */
        function assignLookup() {
            var count = 0;
            vm.customPropertyList.forEach(function(val) {
                if (val.PropertyType == 2) {
                    val.lookupList = lookupArray[count];
                    count++;
                }
            })
        }
        vm.save = function() {
            var documentData = {};
            documentData.params = {
                checkStatus: 1
            };
            documentData.headers = requestHeaders;
            documentData.data = {
                "ProjectFolderID": ProjectFolderID,
                "PINProjectID": PINProjectID,
                "ProjectDocumentID": vm.file.ProjectDocumentID,
                "DocumentTitle": vm.file.DocumentTitle,
                "DocumentDesc": vm.file.DocumentDesc,
                "DocumentName": vm.file.DocumentName,
                "SearchTag": vm.file.SearchTag
            }
            vm.createCustomList();
            documentData.data.CustomProperties = vm.customPropertyList;
            console.log('Custom Data', documentData);
            FolderListService.moveDocument(documentData).then(function(response) {
                $uibModalInstance.close({
                    isSucess: true
                });
            }, function(error) {
                console.log('Update error ', error);
            })

        };
        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };
        vm.createCustomList = function() {

            vm.customPropertyList.forEach(function(val) {
                if (val.lookupList) {
                    val.Lookups = val.selected;
                } else {
                    var value = val.LookupDataText;
                    val.Lookups = [{
                        "LookupDataID": 0,
                        "LookupData": [{
                            "CustomAttributeID": 0,
                            "LookupDataText": value
                        }]
                    }]
                }
            })
        }
    }
];

},{}],14:[function(require,module,exports){
'use strict';

module.exports = ['$window',
    'Upload',
    '$timeout',
    'UploadService',
    'FolderListService',
    'BasicsFactory',
    '$uibModal',
    'toaster',
    '$filter',
    '$scope',
    'GridApi',
    'Grid',
    function(
        $window,
        Upload,
        $timeout,
        UploadService,
        FolderListService,
        BasicsFactory,
        $uibModal,
        toaster,
        $filter,
        $scope,
        GridApi,
        Grid
    ) {
        var vm = this;
        var dragging = false,
            startingIndex,
            selectAll = false,
            selectedFiles = [];

        //To handle ctrl operations through keyboard

        $scope.ctrlDown = false;
        $scope.ctrlKey = 17;

        $scope.keyDownFunc = function($event) {
            if ($scope.ctrlDown && String.fromCharCode($event.which).toLowerCase() == 'x') {
                $event.preventDefault();
                $scope.moveFiles();
            } else if ($scope.ctrlDown && String.fromCharCode($event.which).toLowerCase() == 'v') {
                $event.preventDefault();
                if ($scope.moveCount > 0) {
                    $scope.dropMove()
                }
            } else if ($scope.ctrlDown && String.fromCharCode($event.which).toLowerCase() == 'a') {
                $event.preventDefault();
                $scope.selectAllFiles(1);
            }
        };

        angular.element($window).bind("keyup", function($event) {
            if ($event.keyCode == $scope.ctrlKey)
                $scope.ctrlDown = false;
            $scope.$apply();
        });

        angular.element($window).bind("keydown", function($event) {
            if ($event.keyCode == $scope.ctrlKey)
                $scope.ctrlDown = true;
            $scope.$apply();
        });

        //To handle ctrl operations through keyboard


        $scope.toggleMinimize = function(indicator) {
            $scope.minimizeFooter = !$szzcope.minimizeFooter;
        }

        $scope.toggleTreeView = function() {
            $scope.toggleTree = !$scope.toggleTree;
        }
        $scope.toggleView = function(view) {
            $scope.isGrid = !$scope.isGrid;
        }
        $scope.changeCurrentDir = function(folder) {
            $scope.$broadcast('expand-folder', {
                folder: folder,
                breadcrumbList: $scope.breadcrumbList
            });
            if (!dragging) {
                $scope.parentFolderId = folder.ProjectFolderID;
                loadData();
            }
        }
        $scope.selectBranch = function(data) {
            // 
        }

        /*
         * Method setBreadcrumb
         * Description Prepares breadcrumbList (create bradcurmb of current directory)
         * 
         */
        function setBreadcrumb(folder) {
            if ($scope.parentFolderId) {
                var pathFolderIDArray = folder.PathFolderID.split('>'),
                    pathNameArray = folder.PathName.split('>>');


                pathNameArray.unshift($scope.baseData.projectName);


                var breadcrumbList = [];
                pathNameArray.forEach(function(path, index) {
                    breadcrumbList.push({
                        pathName: path,
                        PathFolderID: pathFolderIDArray[index] || 0
                    });
                });

                $scope.breadcrumbList = breadcrumbList;
            } else {
                $scope.breadcrumbList = [{
                    pathName: $scope.baseData.projectName,
                    PathFolderID: 0
                }];
            }

            // ($scope.breadcrumbList.length > 1) && $scope.breadcrumbList.pop();

        };

        $scope.goToDir = function(item) {
            var tmpBreadcrumb = [],
                i,
                limit = $scope.breadcrumbList.indexOf(item)
            $scope.parentFolderId = item.PathFolderID;
            for (i = 0; i <= limit; i++) {
                tmpBreadcrumb[i] = $scope.breadcrumbList[i];
            }

            $scope.$broadcast('rename-folder', {
                breadcrumbList: tmpBreadcrumb
            });

            loadData();
        };

        $scope.startDrag = function(file, idx, event) {
            dragging = true;

            if (file) {
                $scope.selectedCount = 0;
                file.isSelected = true;
                $scope.currentDir.files.forEach(function(file) {
                    if (file.isSelected) {
                        $scope.selectedCount++;
                    }
                })
            }
        };

        $scope.completeDrag = function(file, idx) {
            $timeout(function() {
                dragging = false;
            }, 100)
            $scope.selectedCount = 0;

        };

        $scope.moveTo = function(data, event, to) {


            if (!data) {
                return;
            }
            if (!data.isFile) {
                var idx = $scope.currentDir.folders.indexOf(data.data);
                $scope.currentDir.folders.splice(idx, 1);


                var folderData = {};
                folderData.headers = {
                    TokenKey: $scope.baseData.tokenKey,
                    PINProjectID: BasicsFactory.getDetails().PINProjectID,
                    'Content-Type': 'application/json'
                };

                folderData.data = {
                    PINProjectID: $scope.baseData.PINProjectID,
                    ParentFolderID: to.ProjectFolderID,
                    ProjectFolderId: data.data.ProjectFolderID
                };

                folderData.params = {
                    operation: 4
                };
                FolderListService.moveFolder(folderData)
                    .then(function(response) {
                        $scope.$broadcast('move-folder', {
                            breadcrumbList: $scope.breadcrumbList,
                            folder: folderData
                        });
                    }, function(error) {

                    })
                    .finally(function() {
                        loadData();
                    });
            } else {
                var idx = $scope.currentDir.files.indexOf(data.data);
                $scope.currentDir.files.splice(idx, 1);
                var folderData = [{
                    "ProjectDocumentID": data.data.ProjectDocumentID
                }];

                moveDocumentOperation(to.ProjectFolderID, folderData);



                //Remove from current
                // var idx = $scope.currentDir.files.indexOf(data.data);
                // $scope.currentDir.files.splice(idx, 1);
                //Move to destination
                // to.files.push(data.data);
            }
        };

        $scope.init = function() {
            $scope.baseData = BasicsFactory.getDetails();
            $scope.uploadFiles = {};
            $scope.uploadFilesLength = 0;
            $scope.toggleTree = true;
            $scope.isGrid = false;
            $scope.minimizeFooter = false;
            $scope.myTree = {};
            $scope.selectedCount = 0;
            $scope.isOpen = false;
            $scope.moveCount = 0;
            $scope.currentDir = {
                files: [],
                folders: []
            };
            vm.pageNo = 1;
            vm.sortOptions = [{
                value: 0,
                text: "All"
            }, {
                value: 1,
                text: "Create Date"
            }, {
                value: 2,
                text: "Document Name"
            }];
            vm.sortOption = vm.sortOptions[0];
            vm.perPageItemList = [{
                value: 15,
                text: "15 per page"
            }, {
                value: 25,
                text: "25 per page"
            }, {
                value: 50,
                text: "50 per page"
            }, {
                value: 100,
                text: "100 per page"
            }];
            vm.perPageItem = vm.perPageItemList[0];
            vm.apiObject = {
                params: {},
                headers: {
                    tokenkey: BasicsFactory.getDetails().tokenKey,
                    Page: vm.pageNo,
                    PerPage: vm.perPageItem.value
                }
            };
            $scope.gridOptions = {
                id: 'customize-grid',
                rowHeight: 60,
                data: 'currentDir.files',
                enableColumnResizing: true,
                rowTemplate: require('../templates/rowTemplate.html'),
                columnDefs: [
                    // {
                    //     field: 'OriginalExtension',
                    //     displayName: 'File Name',
                    //     width: 100,
                    //     enableColumnResizing: false,
                    //     pinnedLeft: true,
                    //     cellClass: 'extension-cell custom-cell',
                    //     enableSorting: false,
                    //     cellTemplate: '<div class="ui-grid-cell-contents " style="color: #4a89f2"><div class="list-extension-style">{{ COL_FIELD | extensionFilter }}</div></div>'
                    // }, 
                    {
                        field: 'DocumentName',
                        displayName: 'Name',
                        minWidth: 200,
                        width: 250,
                        maxWidth: 350,
                        pinnedLeft: true,
                        cellClass: 'name-cell custom-cell',
                        cellTemplate: require('../templates/name-cell-template.html'),
                        enableSorting: true
                    }, {
                        field: 'DocumentTitle',
                        displayName: 'Title',
                        width: '30%',
                        maxWidth: 200,
                        minWidth: 100,
                        cellClass: 'title-cell custom-cell',
                        enableSorting: false
                    }, {
                        field: 'RevisionDate',
                        displayName: 'Date',
                        minwidth: 100,
                        width: 150,
                        maxWidth: 200,
                        type: 'date',
                        cellFilter: 'date:\'dd-MMM-yyyy\'',
                        cellClass: 'date-cell custom-cell',
                        enableSorting: false
                    }, {
                        field: 'Filesize',
                        displayName: 'Size',
                        maxWidth: 150,
                        minWidth: 70,
                        cellFilter: 'bytes:this',
                        enableSorting: false

                    }, {
                        field: 'DocumentDesc',
                        displayName: 'Description',
                        width: 300,
                        maxWidth: 450,
                        minWidth: 200,
                        enableSorting: false

                    }, {
                        field: 'RevisionNumber',
                        displayName: 'Version',
                        maxWidth: 150,
                        minWidth: 70,
                        enableSorting: false

                    }
                ]
            };
            $scope.copyFileList = [];
            $scope.moveFileList = [];
            // $scope.totalUploadPrecentage = 0;
            $scope.uploadedData = 0;
            $scope.showMainMenu = false;

            /**/
            $scope.page = 1;
            $scope.perPage = 100;
            $scope.PINProjectID = $scope.baseData.PINProjectID;
            $scope.parentFolderId = 0;
            $scope.customPropertyList = [];
            getCustomAttributes();
            /**/

            loadData();

            $scope.$on('changeCurrentDir', function(event, ProjectFolderID) {
                $scope.parentFolderId = ProjectFolderID;
                vm.pageNo = 1;
                loadData();
            });
            $scope.$on('moveFileFromRight', function(event, data) {
                var listOfFiles = [];
                $scope.currentDir.files.forEach(function(val) {
                    if (val.isSelected) {
                        listOfFiles.push({
                            "ProjectDocumentID": val.ProjectDocumentID
                        });
                        $scope.moveCount++;
                    }
                })

                moveDocumentOperation(data.ProjectFolderID, listOfFiles, 'Move Successfull');
            })

            $scope.fileMenuOptions = function(item) {
                if (item) {
                    $scope.selectFile(item, 0, {}, true);
                }
                var itemSelectedMenu = [
                    ['Copy', function($itemScope, $event, modelValue, text, $li) {
                        $scope.copyFile($itemScope.showFile);
                    }],
                    null, // Dividier
                    ['Cut', function($itemScope, $event, modelValue, text, $li) {
                        $scope.moveFiles();
                    }],
                    null, // Dividier
                    ['Update', function($itemScope, $event, modelValue, text, $li) {
                        $scope.updateFile($itemScope.showFile);
                    }],
                    null, // Dividier
                    ['Remove', function($itemScope, $event, modelValue, text, $li) {
                        $scope.deleteFiles();
                    }],
                    null, // Dividier
                    ['Send Link', function($itemScope, $event, modelValue, text, $li) {
                        $scope.sendLink($itemScope.showFile);
                    }]
                ];
                var pasteEnableMenu = [
                    ['Copy', function($itemScope, $event, modelValue, text, $li) {
                        $scope.copyFile($itemScope.showFile);
                    }],
                    null, // Dividier
                    ['Cut', function($itemScope, $event, modelValue, text, $li) {
                        $scope.moveFiles();
                    }],
                    null, // Dividier
                    ['Paste', function($itemScope, $event, modelValue, text, $li) {
                        $scope.dropMove();
                    }],
                    null, // Dividier
                    ['Update', function($itemScope, $event, modelValue, text, $li) {
                        $scope.updateFile($itemScope.showFile);
                    }],
                    null, // Dividier
                    ['Remove', function($itemScope, $event, modelValue, text, $li) {
                        $scope.deleteFiles();
                    }],
                    null, // Dividier
                    ['Send Link', function($itemScope, $event, modelValue, text, $li) {
                        $scope.sendLink($itemScope.showFile);
                    }]
                ];
                if ($scope.moveFileList.length) {
                    return pasteEnableMenu;
                }

                for (var i = 0; i < $scope.currentDir.files.length; i++) {
                    if ($scope.currentDir.files[i].isSelected) {

                        return itemSelectedMenu;
                    }
                }
                return [];
            }
            $scope.fileListMenuOptions = function(item) {
                $scope.selectFile(item.entity, 0, {}, true);

                return [
                    ['Copy', function($itemScope, $event, modelValue, text, $li) {
                        $scope.copyFile(item.entity);
                    }],
                    null, // Dividier
                    ['Cut', function($itemScope, $event, modelValue, text, $li) {
                        $scope.moveFiles();
                    }],
                    null, // Dividier
                    ['Update', function($itemScope, $event, modelValue, text, $li) {
                        $scope.updateFile(item.entity);
                    }],
                    null, // Dividier
                    ['Remove', function($itemScope, $event, modelValue, text, $li) {
                        $scope.deleteFiles();
                    }],
                    null, // Dividier
                    ['Send Link', function($itemScope, $event, modelValue, text, $li) {
                        $scope.sendLink(item.entity);
                    }]
                ];
            }
            $scope.folderMenuOptions = [
                ['Rename', function($itemScope, $event, modelValue, text, $li) {
                    $scope.renameFloder($itemScope.showFolders);
                }],
                null, ['Remove', function($itemScope, $event, modelValue, text, $li) {
                    $scope.deleteFolders($itemScope.showFolders);
                }]
            ];
            startingIndex = -1;

            /**/


            /**/
        };

        $scope.files = [];

        $scope.onLoaded = function() {

        }

        $scope.onPicked = function(docs) {
            angular.forEach(docs, function(file, index) {
                $scope.files.push(file);
            });

        }
        $scope.onPickedOneDrive = function(docs) {
            $scope.onPicked(docs.values);
        }

        $scope.onCancel = function() {

        }

        $scope.show = function() {

            if (!$scope.ufile.length) {
                toaster.pop('Warnning', 'Empty Folders are not allowed.');
            }

            if (!$scope.parentFolderId) {
                $scope.ufile = [];
                toaster.pop('Warnning',
                    'Upload File(s) and Folder(s) directly into a project are not allowed.');
                return;
            }
            $scope.minimizeFooter = false;
            $scope.ufile.forEach(function(file, i) {
                var date = new Date();
                file.key = date.getTime() + i;
            });

            var temp, temp1;
            $scope.tree = $scope.ufile.reduce(function(returnVal, each) {
                temp = returnVal;
                temp1 = null;
                if (each && each.path) {
                    each.path.split('/')
                        .forEach(function(eachInner, index, array) {
                            if (index + 1 !== array.length) {
                                temp1 = temp.folders.filter(function(filterEach) {
                                    return filterEach.name === eachInner;
                                })[0];
                                if (!temp1) {
                                    temp1 = {
                                        name: eachInner,
                                        folders: [],
                                        files: []
                                    };
                                    temp.folders.push(temp1);
                                }

                                temp = temp1;
                            } else {
                                temp.files.push(each);
                            }
                        });
                } else {
                    returnVal.files.push(each);
                }
                return returnVal;
            }, {
                name: $scope.currentDir.name || 'root',
                PathName: $scope.currentDir.PathName || '',
                folders: [],
                files: []
            });

            var goodToGo = !checkForConflict($scope.tree, $scope.currentDir);

            if (goodToGo) {
                $scope.ufile.forEach(function(file, i) {
                    file.percentage = 0;
                    $scope.uploadFiles[file.key] = file;
                    // $scope.uploadFiles[file.key].percentage = 0;
                    $scope.uploadFilesLength++;
                });
            } else {
                toaster.pop('Warnning',
                    'Folder Name aleady Exists, change the folder name and upload it again.');
                $scope.ufile = [];
                return;
            }


            $scope.startUpload();
        };

        function setFileKey(file, i) {

            $scope.uploadFiles[file.key] = file;
            $scope.uploadFiles[file.key].percentage = 0;
            $scope.uploadFilesLength++;
        };

        $scope.openCreateFolderModal = function() {
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/create-folder.html'),
                    controller: "addFolderCtrl as vm",
                    size: "md",
                    resolve: {
                        ProjectFolderID: function() {
                            return $scope.currentDir.ProjectFolderID;
                        },
                        PINProjectID: function() {
                            return $scope.baseData.PINProjectID;
                        },
                        breadcrumbList: function() {
                            return $scope.breadcrumbList;
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                loadData();
            }, function(data) {});
        };

        $scope.openEgnyteModal = function() {
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/egnyte-domain.html'),
                    controller: "egnyteDomain as vm",
                    size: "md",
                    // resolve: {
                    //     ProjectFolderID: function() {
                    //         return $scope.currentDir.ProjectFolderID;
                    //     },
                    //     PINProjectID: function() {
                    //         return $scope.baseData.PINProjectID;
                    //     },
                    //     breadcrumbList: function() {
                    //         return $scope.breadcrumbList;
                    //     }
                    // }
                });
            modalInstance.result.then(function(data) {
                loadData();
            }, function(data) {});
        }

        function moveDocumentOperation(ProjectFolderID, data, msg) {
            var folderData = {};
            folderData.headers = {
                TokenKey: $scope.baseData.tokenKey,
                PINProjectID: $scope.baseData.PINProjectID,
                'Content-Type': 'application/json',
                ProjectFolderId: ProjectFolderID
            };

            folderData.data = data;

            folderData.params = {
                operation: 4
            };


            FolderListService.moveDocument(folderData)
                .then(function(response) {
                    toaster.pop('Success', 'File Moved Successfully');
                    $scope.moveCount = 0;
                }, function(error) {

                })
                .finally(function() {
                    loadData();
                });
        };

        function createFolder(folder, parent) {
            UploadService.createFolder({
                    PINProjectID: $scope.baseData.PINProjectID,
                    data: {
                        "PINProjectID": $scope.baseData.PINProjectID,
                        "FolderName": folder.name,
                        "ParentFolderID": parent.ProjectFolderID
                    }
                })
                .then(function(response) {
                        getFolderList(parent, folder);
                    },
                    function(err) {});
        };

        function uploadFiles(files, parent) {
            files.forEach(function(file) {
                file.parent = parent;
                generateUploadURL(file);
            });
        };

        function createFolders(folders, parent) {
            folders.forEach(function(folder) {
                createFolder(folder, parent);
            });
        };

        function handleChildFunctions(node, uiNode) {

            //FOR FILE UPLOAD
            if (node.files.length) {
                uploadFiles(node.files, uiNode || $scope.currentDir);
            }

            // FOR FOLDER CREATION
            if (node.folders.length) {
                createFolders(node.folders, uiNode || $scope.currentDir);
            }
        };

        $scope.startUpload = function() {

            UploadService.createSessionID({
                    params: {
                        pinProjectId: $scope.baseData.PINProjectID,
                        uploadSource: 130 || $scope.parentFolderId
                    }
                })
                .then(
                    function(response) {
                        response = response[0];
                        $scope.sessionID = response.Result;
                        handleChildFunctions($scope.tree);
                    },
                    function(err) {

                    }
                );
        };

        $scope.resumeUpload = function(file) {
            file.isAbort = false;
            generateUploadURL(file);
            $scope.upload([file]);
        };

        $scope.removeFromUploadFiles = function(file) {
            delete $scope.uploadFiles[file.key];
            $scope.uploadFilesLength--;
            $scope.uploadedData--;
            if (!$scope.uploadFilesLength) {
                $scope.uploadFiles = {};
            }
        };

        $scope.stopUpload = function(file, key, idx) {
            if (file.abort) {
                file.abort();
                file.isAbort = true;
            } else {

                delete $scope.uploadFiles[key];
            }

        };

        $scope.close = function() {
            for (var file in $scope.uploadFiles) {
                $scope.removeFromUploadFiles(file);
                file.abort &&
                    file.abort();
            }
        };

        $scope.upload = function(files, parent, URL) {

            if (files && files.length) {

                for (var i = 0; i < files.length; i++) {
                    var file = files[i];
                    if (!file.$error) {

                        Upload.upload({
                            url: URL,
                            data: {
                                file: file
                            }
                        }).success(function(response) {
                            $timeout(function() {

                                $scope.uploadedData++;
                                if ($scope.uploadedData === $scope.uploadFilesLength) {
                                    $scope.minimizeFooter = true;
                                }
                                loadData();
                            });
                        }).progress(function(evt) {
                            var progressPercentage = parseInt(100.0 *
                                evt.loaded / evt.total);
                            $scope.uploadFiles[evt.config.data.file.key].percentage = progressPercentage;

                        }).xhr(function(xhr) {
                            file.abort = function() {
                                xhr.abort();

                                $scope.uploadFiles[file.key].percentage = 0;

                            };
                        });
                    }
                }
            }
        };


        function loadData() {

            vm.apiObj = {
                page: vm.pageNo,
                perPage: vm.perPageItem.value,
                PINProjectID: $scope.PINProjectID,
                parentFolderId: $scope.parentFolderId,
                start: vm.start || ''
            };

            (vm.orderBy !== undefined) && (vm.apiObj.orderBy = vm.orderBy);

            UploadService.getFolderDetails(vm.apiObj)
                .then(function(response) {
                    var resHeader = response[2];
                    response = response[0];
                    console.log('Loaddata response : ', response);
                    if ($scope.parentFolderId) {

                        getFolderDetails({
                            PINProjectID: $scope.PINProjectID,
                            parentFolderId: $scope.parentFolderId,
                        }, response, true);

                    } else {
                        $scope.currentDir.folders = response.Folders;

                        $scope.currentDir.files = response.Documents;
                        $scope.currentDir.ProjectFolderID = 0;
                        setChooseImage($scope.currentDir.files);
                        setBreadcrumb($scope.currentDir);
                    }
                    vm.totalCount = vm.perPageItem.value * resHeader('Max-Page');

                }, function(err) {

                });
        };

        function getFolderDetails(cfg, data, setCurrentDir) {
            UploadService.folderDetails(cfg)
                .then(function(response) {
                    // var resHeader = response[2];
                    // 
                    response = response[0];

                    console.log('getFolderDetails response : ', response);
                    if (setCurrentDir) {
                        $scope.currentDir = response;
                        $scope.currentDir.files = data.Documents;
                        $scope.currentDir.folders = data.Folders;
                        // vm.totalCount = vm.perPageItem.value * resHeader('Max-Page');
                    }
                    setBreadcrumb($scope.currentDir);

                }, function(err) {

                });
        };

        function getFolderList(parent, folder) {
            FolderListService.getFolderList({
                    params: {
                        pinProjectId: $scope.baseData.PINProjectID,
                        parentFolderId: parent.ProjectFolderID
                    },
                    headers: {
                        TokenKey: $scope.baseData.tokenKey
                    }
                })
                .then(function(response) {
                        var targetFolder;
                        response[0].forEach(function(fldr) {
                            if (fldr.FolderName === folder.name)
                                targetFolder = fldr;
                        });
                        // loadData();  // NEED TO CLEAR WHAT ITS DOING

                        handleChildFunctions(folder, targetFolder);
                    },
                    function(err) {});
        };

        function generateUploadURL(file) {
            UploadService.uploadDocument({
                    data: [{
                        "PINProjectID": $scope.baseData.PINProjectID,
                        "ProjectFolderID": file.parent.ProjectFolderID,
                        "DocumentTitle": file.name,
                        "DocumentDesc": "This is the description.",
                        "DocumentName": file.name,
                        "Filesize": file.size
                    }]
                })
                .then(function(response) {

                        response = response[0][0].UploadUrl.split('?');
                        response[0] = "https://pwdwldstg1.planwellcollaborate.com/PWCUpload/HttpUploadHandlerMultiPart.ashx";
                        response = response.join('?');
                        $scope.upload([file], file.parent, response);
                    },
                    function(err) {});
        };

        function checkForConflict(uploadDir, currentDir) {
            var conflictFlag = false;
            currentDir.folders.forEach(function(savedFolder) {
                uploadDir.folders.forEach(function(droppedFolder) {
                    if (savedFolder.FolderName === droppedFolder.name) {
                        conflictFlag = true;
                    }
                });
            });
            return conflictFlag;
        };

        function getCustomAttributes() {
            var projectData = {};
            projectData.params = {
                pwAccountId: $scope.baseData.PWAccountID,
                pinProjectId: $scope.baseData.PINProjectID,
                includeAttribute: 1,
                moduleType: 3
            };
            projectData.headers = {
                TokenKey: $scope.baseData.tokenKey
            }
            FolderListService.getCustomPropertyList(projectData).then(function(response) {

                $scope.customPropertyList = response[0];
            }, function(error) {

            })
        }

        function setChooseImage(files) {
            files.forEach(function(val) {
                if (val.OriginalExtension === ".jpg") {
                    val.chooseImage = true;
                } else {
                    val.chooseImage = false;
                }
            })
        }

        $scope.reloadData = function() {
            $scope.$broadcast('reload', $scope.breadcrumbList);
            loadData();
        };

        $scope.renameFloder = function(folder) {
            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                template: require('../templates/popupmodal.html'),
                controllerAs: 'vm',
                controller: "renameFolderCtrl as vm",
                resolve: {
                    oldName: function() {
                        return folder.FolderName;
                    },
                    requestData: function() {
                        var folderData = {};
                        folderData.headers = {
                            'TokenKey': $scope.baseData.tokenKey,
                            'PINProjectID': $scope.baseData.PINProjectID,
                            'Content-Type': 'application/json'
                        };
                        folderData.data = {
                            "ParentFolderID": folder.ParentFolderID,
                            "ProjectFolderID": folder.ProjectFolderID,
                            "PINProjectID": $scope.baseData.PINProjectID
                        };
                        folderData.params = {};
                        return folderData;
                    }
                }
            })
            modalInstance.result.then(function(data) {
                $scope.$broadcast('rename-folder', {
                    breadcrumbList: $scope.breadcrumbList
                });
                loadData();
            }, function() {

            });

        };
        $scope.copyFile = function(file) {
            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                template: require('../templates/copy-folder.html'),
                controllerAs: 'vm',
                controller: "copyFolderCtrl as vm",
                resolve: {
                    oldName: function() {
                        return "";
                    },
                    requestData: function() {
                        var fileData = {};
                        fileData.headers = {
                            'TokenKey': $scope.baseData.tokenKey,
                            'PINProjectID': $scope.baseData.PINProjectID,
                            'Content-Type': 'application/json'
                        };
                        fileData.data = {
                            "ParentFolderID": file.ParentFolderID,
                            "ProjectFolderID": file.ProjectFolderID,
                            "PINProjectID": $scope.baseData.PINProjectID
                        };
                        fileData.params = {};
                        return "";
                    },
                    pathList: function() {
                        return $scope.breadcrumbList
                    }
                }
            })
            modalInstance.result.then(function(data) {
                // loadData();
            }, function() {

            });
        }

        $scope.renameFolderFromTree = function() {

            $scope.$broadcast('renameFolderFromTree');
        };

        $scope.copyFiles = function() {
            var count = 0;
            $scope.copyFileList = [];
            $scope.currentDir.files.forEach(function(val) {
                if (val.isSelected) {
                    $scope.copyFileList.push(val.ProjectDocumentID);
                    count++;
                }
            })
            if (count > 1) {
                toaster.pop('info', count + " files are copied");
            } else if (count === 1) {
                toaster.pop('info', "1 file is copied");
            }

        }
        $scope.updateFile = function(file) {
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/update-document.html'),
                    controller: "updateDocumentCtrl as vm",
                    size: "md",
                    resolve: {
                        ProjectFolderID: function() {
                            return $scope.currentDir.ProjectFolderID;
                        },
                        PINProjectID: function() {
                            return $scope.baseData.PINProjectID;
                        },
                        requestHeaders: function() {
                            return {
                                TokenKey: $scope.baseData.tokenKey,
                                PINProjectID: $scope.baseData.PINProjectID,
                                "Content-Type": "application/json"
                            }
                        },
                        getFile: function() {
                            return file;
                        },
                        getCustomPropertyListModal: function() {
                            return $scope.customPropertyList;
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                loadData();
            }, function(data) {});

        }
        $scope.moveFiles = function(file, parent) {
            $scope.moveCount = 0;
            $scope.moveFileList = [];
            if (file) {
                $scope.moveFileList.push({
                    "ProjectDocumentID": file.ProjectDocumentID
                });
                $scope.moveCount = 1;
            } else {
                $scope.currentDir.files.forEach(function(val) {
                    if (val.isSelected) {
                        $scope.moveFileList.push({
                            "ProjectDocumentID": val.ProjectDocumentID
                        });
                        $scope.moveCount++;
                    }
                })
            }
            if ($scope.moveCount > 1) {
                toaster.pop('info', $scope.moveCount + " files are ready to be moved");
            } else if ($scope.moveCount === 1) {
                toaster.pop('info', "1 file is ready to be moved");
            }
        }
        $scope.dropMove = function() {


            moveDocumentOperation($scope.parentFolderId, $scope.moveFileList, "File Moved Successfully");

        }
        $scope.deleteFiles = function(file) {
            var moveCount = 0,
                deleteFileList = [],
                deleteData = {};
            if (file) {
                deleteFileList.push({
                    "ProjectDocumentID": file.ProjectDocumentID,
                    "ProjectFolderID": file.ProjectFolderID,
                    "Filesize": file.Filesize
                });
                moveCount = 1;
            } else {
                $scope.currentDir.files.forEach(function(val) {
                    if (val.isSelected) {
                        deleteFileList.push({
                            "ProjectDocumentID": val.ProjectDocumentID,
                            "ProjectFolderID": $scope.parentFolderId,
                            "Filesize": val.Filesize
                        });
                        moveCount++;
                    }
                })
            }
            deleteData.params = {
                "pinProjectId": $scope.baseData.PINProjectID
            }
            deleteData.headers = {
                "TokenKey": $scope.baseData.tokenKey,
                "Content-Type": "application/json"
            }
            deleteData.data = deleteFileList;

            var modalInstance = $uibModal
                .open({
                    template: require('../templates/delete-file-confirmation.html'),
                    controller: "deleteFileCtrl as vm",
                    size: "sm",
                    resolve: {
                        deleteData: function() {
                            return deleteData
                        },
                        moveCount: function() {
                            return moveCount
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                loadData();
                $scope.$broadcast('rename-folder', {
                    breadcrumbList: $scope.breadcrumbList
                });
                if (moveCount > 1) {
                    toaster.pop('success', moveCount + " files are deleted");
                } else if (moveCount === 1) {
                    toaster.pop('success', "1 file is deleted");
                }

            }, function(data) {});

            // FolderListService.deleteDocument(deleteData).then(function(response) {
            //     
            //     if (moveCount > 1) {
            //         toaster.pop('success', moveCount + " files are deleted");
            //     } else if (moveCount === 1) {
            //         toaster.pop('success', "1 file is deleted");
            //     }
            //     loadData();
            // }, function(error) {
            //     
            // })


        }
        $scope.dropOnBreadcrumb = function(data, event, item) {

            item.ProjectFolderID = item.PathFolderID;
            if (data.data.ParentFolderID + "" === item.PathFolderID) {
                toaster.pop('info', "This move is not possible");
            } else {
                $scope.moveTo(data, event, item);
            }
        }
        $scope.deleteFolders = function(folder) {
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/delete-alert-confirm.html'),
                    controller: "deleteFolderCtrl as vm",
                    size: "sm",
                    resolve: {
                        ProjectFolderID: function() {
                            return $scope.currentDir.ProjectFolderID;
                        },
                        BaseData: function() {
                            return $scope.baseData;
                        },
                        Folder: function() {
                            return folder;
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                loadData();
                $scope.$broadcast('rename-folder', {
                    breadcrumbList: $scope.breadcrumbList
                });
            }, function(data) {});
        }

        vm.pageChanged = function() {
            loadData();
        }

        vm.changePerPageCount = function(item) {
            vm.pageNo = 1;
            loadData();
        }
        vm.filterProjectList = function(option) {

            if (option.value === 1) {
                vm.orderBy = 0;
            } else if (option.value === 2) {
                vm.orderBy = 2;
            } else {
                delete vm.orderBy;
            }

            loadData();
        }

        $scope.selectFile = function(file, idx, event, force) {
            var big,
                small,
                len = $scope.currentDir.files.length;
            idx = $scope.currentDir.files.indexOf(file);
            //If clicked with shift key
            if (event && event.shiftKey) {
                if (startingIndex === -1) {
                    file.isSelected = true;
                    startingIndex = idx;
                } else {
                    small = Math.min(idx, startingIndex);
                    big = Math.max(idx, startingIndex);
                    for (var i = 0; i < len; i++) {
                        if (i >= small && i <= big) {
                            $scope.currentDir.files[i].isSelected = true;
                        } else {
                            $scope.currentDir.files[i].isSelected = false;
                        }
                    }
                }
            } else { //If normal click is done
                if (file.isSelected && !force) {
                    file.isSelected = false;
                    startingIndex = -1;
                } else {
                    file.isSelected = true;
                    startingIndex = idx;
                }
            }
        }
        $scope.toggleMainMenu = function() {
            $scope.showMainMenu = !$scope.showMainMenu;
        }
        $scope.selectAllFiles = function(fromKeyboard) {
            if (!selectAll || fromKeyboard === 1) {
                $scope.currentDir.files.forEach(function(file) {
                    file.isSelected = true;
                })
                selectAll = !selectAll;
            } else {
                $scope.currentDir.files.forEach(function(file) {
                    file.isSelected = false;
                })
                selectAll = !selectAll;
            }
        }
        $scope.sendLink = function(file) {
            console.log('file', file);
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/share.html'),
                    controller: "shareLink as vm",
                    size: "md",
                    resolve: {
                        HeaderText: function() {
                            return "Share Document";
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                // loadData();
            }, function(data) {});
        }
    }
]

},{"../templates/copy-folder.html":35,"../templates/create-folder.html":36,"../templates/delete-alert-confirm.html":37,"../templates/delete-file-confirmation.html":38,"../templates/egnyte-domain.html":39,"../templates/name-cell-template.html":42,"../templates/popupmodal.html":43,"../templates/rowTemplate.html":44,"../templates/share.html":45,"../templates/update-document.html":46}],15:[function(require,module,exports){
module.exports = [
    '$state',
    '$rootScope',
    '$scope',
    '$state',
    'LoginService',
    'BasicsFactory',
    function($state, $rootScope, $scope, $state, LoginService, BasicsFactory) {
        console.log('upload controller', $scope);
        var vm = this;

        vm.showComponent = false;

        var basics = BasicsFactory.getDetails();
        var setProjectId = function() {
            var projectData = {};
            projectData.params = {
                mode: 1
            }
            LoginService.projectList(projectData).then(function(response) {
                var data = response[0];
                console.log('Project List response: ', data);
                BasicsFactory.setPINProjectID(data[data.length - 1].PINProjectID);
                BasicsFactory.setProjectName(data[data.length - 1].ProjectName);
                vm.showComponent = true;
            }, function(error) {
                console.log('Project List Error', error);
                $state.go('authenticated.login');
            })
        }
        setProjectId();
    }
]

},{}],16:[function(require,module,exports){
'use strict';
var __indexOf = [].indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
        if (i in this && this[i] === item) return i;
    }
    return -1;
};


module.exports = [
    '$timeout',
    'FolderListService',
    'BasicsFactory',
    '$uibModal',
    function($timeout, FolderListService, BasicsFactory, $uibModal) {
        return {
            restrict: 'E',
            template: require('../templates/abntree.html'),
            replace: true,
            scope: {
                onSelect: '&',
                initialSelection: '@',
                treeControl: '='
            },
            link: function(scope, element, attrs) {
                var error, expand_all_parents, expand_level, for_all_ancestors, for_each_branch, get_parent, n, on_treeData_change, select_branch, tree;
                scope.branchSelected = '';
                scope.selected_branch = '';
                error = function(s) {
                    console.log('ERROR:' + s);
                    debugger;
                    return void 0;
                };
                scope.dragDrop = attrs.dragDropEnable;
                if (attrs.iconExpand == null) {
                    attrs.iconExpand = 'icon-plus  glyphicon glyphicon-plus  fa fa-plus';
                }
                if (attrs.iconCollapse == null) {
                    attrs.iconCollapse = 'icon-minus glyphicon glyphicon-minus fa fa-minus';
                }
                if (attrs.iconLeaf == null) {
                    attrs.iconLeaf = 'icon-file  glyphicon glyphicon-file  fa fa-file';
                }
                if (attrs.expandLevel == null) {
                    attrs.expandLevel = '3';
                }
                expand_level = parseInt(attrs.expandLevel, 10);
                if (!scope.treeData) {
                    alert('no treeData defined for the tree!');
                    return;
                }
                if (scope.treeData.length == null) {
                    if (treeData.label != null) {
                        scope.treeData = [treeData];
                    } else {
                        alert('treeData should be an array of root branches');
                        return;
                    }
                }
                for_each_branch = function(f) {
                    var do_f, root_branch, _i, _len, _ref, _results;
                    do_f = function(branch, level) {
                        var child, _i, _len, _ref, _results;
                        f(branch, level);
                        if (branch.children != null) {
                            _ref = branch.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                _results.push(do_f(child, level + 1));
                            }
                            return _results;
                        }
                    };
                    _ref = scope.treeData;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        root_branch = _ref[_i];
                        _results.push(do_f(root_branch, 1));
                    }
                    return _results;
                };
                scope.selected_branch = null;
                select_branch = function(branch) {
                    if (!branch) {
                        if (scope.selected_branch != null) {
                            scope.selected_branch.selected = false;
                        }
                        scope.selected_branch = null;
                        return;
                    }
                    if (branch !== scope.selected_branch) {
                        if (scope.selected_branch != null) {
                            scope.selected_branch.selected = false;
                        }
                        branch.selected = true;
                        scope.selected_branch = branch;
                        expand_all_parents(branch);
                        if (branch.onSelect != null) {
                            return $timeout(function() {
                                return branch.onSelect(branch);
                            });
                        } else {
                            if (scope.onSelect != null) {
                                return $timeout(function() {
                                    return scope.onSelect({
                                        branch: branch
                                    });
                                });
                            }
                        }
                    }
                };
                scope.user_clicks_branch = function(branch, flag) {
                    if (!flag) {
                        scope.$emit('changeCurrentDir', branch.ProjectFolderID);
                    }
                    scope.branchSelected = branch;
                    var par = get_parent(branch);
                    if (par) {
                        if (par.children.length) {
                            par.children.forEach(function(val, idx) {
                                if (val.uid !== branch.uid) {
                                    val.expanded = false;
                                }
                            })
                        }
                    } else {
                        console.log('inside else', branch);
                        branch.expanded = true;
                        branch.children.forEach(function(val) {
                            val.expanded = false;
                        })
                    }
                    if (branch !== scope.selected_branch) {
                        return select_branch(branch);
                    }
                };
                scope.user_drops_branch = function(data, branch) {
                    if (data.from) {
                        scope.$emit('moveFileFromRight', branch);
                        return;
                    }
                    console.log('drop data:', data);
                    var folderData = {};
                    folderData.headers = {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        PINProjectID: BasicsFactory.getDetails().PINProjectID,
                        'Content-Type': 'application/json'
                    }

                    folderData.data = {
                        PINProjectID: BasicsFactory.getDetails().PINProjectID,
                        ParentFolderID: branch.ProjectFolderID,
                        ProjectFolderID: data.ProjectFolderID
                    }
                    folderData.params = {
                        operation: 4
                    }
                    FolderListService.moveFolder(folderData).then(function(response) {
                        var parent = get_parent(data),
                            idx = parent.children.indexOf(data);

                        // if (!branch.classes.length) {
                        parent.children.splice(idx, 1);
                        branch.children.push({
                                label: data.label,
                                children: data.children
                            })
                            // }
                    }, function(error) {
                        console.log('Move Folder error', error);
                    })
                };
                get_parent = function(child) {
                    var parent;
                    parent = void 0;
                    if (child.parent_uid) {
                        for_each_branch(function(b) {
                            if (b.uid === child.parent_uid) {
                                return parent = b;
                            }
                        });
                    }
                    return parent;
                };
                for_all_ancestors = function(child, fn) {
                    var parent;
                    parent = get_parent(child);
                    if (parent != null) {
                        fn(parent);
                        return for_all_ancestors(parent, fn);
                    }
                };
                expand_all_parents = function(child) {
                    return for_all_ancestors(child, function(b) {
                        return b.expanded = true;
                    });
                };
                scope.tree_rows = [];
                on_treeData_change = function() {

                    var add_branch_to_list, root_branch, _i, _len, _ref, _results;
                    for_each_branch(function(b, level) {
                        if (!b.uid) {
                            return b.uid = "" + Math.random();
                        }
                    });
                    for_each_branch(function(b) {
                        var child, _i, _len, _ref, _results;
                        if (angular.isArray(b.children)) {
                            _ref = b.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                _results.push(child.parent_uid = b.uid);
                            }
                            return _results;
                        }
                    });
                    scope.tree_rows = [];
                    for_each_branch(function(branch) {
                        var child, f;
                        if (branch.children) {
                            if (branch.children.length > 0) {
                                f = function(e) {
                                    if (typeof e === 'string') {
                                        return {
                                            label: e,
                                            children: []
                                        };
                                    } else {
                                        return e;
                                    }
                                };
                                return branch.children = (function() {
                                    var _i, _len, _ref, _results;
                                    _ref = branch.children;
                                    _results = [];
                                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                        child = _ref[_i];
                                        _results.push(f(child));
                                    }
                                    return _results;
                                })();
                            }
                        } else {
                            return branch.children = [];
                        }
                    });
                    add_branch_to_list = function(level, branch, visible) {
                        var child, child_visible, tree_icon, _i, _len, _ref, _results;
                        if (branch.expanded == null) {
                            branch.expanded = false;
                        }
                        if (branch.classes == null) {
                            branch.classes = [];
                        }
                        if (!branch.noLeaf && (!branch.children || branch.children.length === 0)) {
                            tree_icon = attrs.iconLeaf;
                            if (__indexOf.call(branch.classes, "leaf") < 0) {
                                branch.classes.push("leaf");
                            }
                        } else {
                            if (branch.expanded) {
                                tree_icon = attrs.iconCollapse;
                            } else {
                                tree_icon = attrs.iconExpand;
                            }
                        }
                        scope.tree_rows.push({
                            level: level,
                            branch: branch,
                            label: branch.label,
                            classes: branch.classes,
                            tree_icon: tree_icon,
                            visible: visible
                        });
                        if (branch.children != null) {
                            _ref = branch.children;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                child = _ref[_i];
                                child_visible = visible && branch.expanded;
                                _results.push(add_branch_to_list(level + 1, child, child_visible));
                            }
                            return _results;
                        }
                    };
                    _ref = scope.treeData;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        root_branch = _ref[_i];
                        _results.push(add_branch_to_list(1, root_branch, true));
                    }
                    return _results;
                };
                scope.$watch('treeData', on_treeData_change, true);
                if (attrs.initialSelection != null) {
                    for_each_branch(function(b) {
                        if (b.label === attrs.initialSelection) {
                            return $timeout(function() {
                                return select_branch(b);
                            });
                        }
                    });
                }
                n = scope.treeData.length;
                console.log('num root branches = ' + n);
                for_each_branch(function(b, level) {
                    b.level = level;
                    return b.expanded = b.level < expand_level;
                });
                if (scope.treeControl != null) {
                    if (angular.isObject(scope.treeControl)) {
                        tree = scope.treeControl;
                        tree.expand_all = function() {
                            return for_each_branch(function(b, level) {
                                return b.expanded = true;
                            });
                        };
                        tree.collapse_all = function() {
                            return for_each_branch(function(b, level) {
                                return b.expanded = false;
                            });
                        };
                        tree.get_first_branch = function() {
                            n = scope.treeData.length;
                            if (n > 0) {
                                return scope.treeData[0];
                            }
                        };
                        tree.select_first_branch = function() {
                            var b;
                            b = tree.get_first_branch();
                            return tree.select_branch(b);
                        };
                        tree.get_selected_branch = function() {
                            return scope.selected_branch;
                        };
                        tree.get_parent_branch = function(b) {
                            return get_parent(b);
                        };
                        tree.select_branch = function(b) {
                            select_branch(b);
                            return b;
                        };
                        tree.get_children = function(b) {
                            return b.children;
                        };
                        tree.select_parent_branch = function(b) {
                            var p;
                            if (b == null) {
                                b = tree.get_selected_branch();
                            }
                            if (b != null) {
                                p = tree.get_parent_branch(b);
                                if (p != null) {
                                    tree.select_branch(p);
                                    return p;
                                }
                            }
                        };
                        tree.add_branch = function(parent, new_branch) {
                            if (parent != null) {
                                parent.children.push(new_branch);
                                parent.expanded = true;
                            } else {
                                scope.treeData.push(new_branch);
                            }
                            return new_branch;
                        };
                        tree.add_root_branch = function(new_branch) {
                            tree.add_branch(null, new_branch);
                            return new_branch;
                        };
                        tree.expand_branch = function(b) {
                            if (b == null) {
                                b = tree.get_selected_branch();
                            }
                            if (b != null) {
                                b.expanded = true;
                                return b;
                            }
                        };
                        tree.collapse_branch = function(b) {
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                b.expanded = false;
                                return b;
                            }
                        };
                        tree.get_siblings = function(b) {
                            var p, siblings;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                p = tree.get_parent_branch(b);
                                if (p) {
                                    siblings = p.children;
                                } else {
                                    siblings = scope.treeData;
                                }
                                return siblings;
                            }
                        };
                        tree.get_next_sibling = function(b) {
                            var i, siblings;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                siblings = tree.get_siblings(b);
                                n = siblings.length;
                                i = siblings.indexOf(b);
                                if (i < n) {
                                    return siblings[i + 1];
                                }
                            }
                        };
                        tree.get_prev_sibling = function(b) {
                            var i, siblings;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            siblings = tree.get_siblings(b);
                            n = siblings.length;
                            i = siblings.indexOf(b);
                            if (i > 0) {
                                return siblings[i - 1];
                            }
                        };
                        tree.select_next_sibling = function(b) {
                            var next;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_next_sibling(b);
                                if (next != null) {
                                    return tree.select_branch(next);
                                }
                            }
                        };
                        tree.select_prev_sibling = function(b) {
                            var prev;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                prev = tree.get_prev_sibling(b);
                                if (prev != null) {
                                    return tree.select_branch(prev);
                                }
                            }
                        };
                        tree.get_first_child = function(b) {
                            var _ref;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                if (((_ref = b.children) != null ? _ref.length : void 0) > 0) {
                                    return b.children[0];
                                }
                            }
                        };
                        tree.get_closest_ancestor_next_sibling = function(b) {
                            var next, parent;
                            next = tree.get_next_sibling(b);
                            if (next != null) {
                                return next;
                            } else {
                                parent = tree.get_parent_branch(b);
                                return tree.get_closest_ancestor_next_sibling(parent);
                            }
                        };
                        tree.get_next_branch = function(b) {
                            var next;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_first_child(b);
                                if (next != null) {
                                    return next;
                                } else {
                                    next = tree.get_closest_ancestor_next_sibling(b);
                                    return next;
                                }
                            }
                        };
                        tree.select_next_branch = function(b) {
                            var next;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                next = tree.get_next_branch(b);
                                if (next != null) {
                                    tree.select_branch(next);
                                    return next;
                                }
                            }
                        };
                        tree.last_descendant = function(b) {
                            var last_child;
                            if (b == null) {
                                debugger;
                            }
                            n = b.children.length;
                            if (n === 0) {
                                return b;
                            } else {
                                last_child = b.children[n - 1];
                                return tree.last_descendant(last_child);
                            }
                        };
                        tree.get_prev_branch = function(b) {
                            var parent, prev_sibling;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                prev_sibling = tree.get_prev_sibling(b);
                                if (prev_sibling != null) {
                                    return tree.last_descendant(prev_sibling);
                                } else {
                                    parent = tree.get_parent_branch(b);
                                    return parent;
                                }
                            }
                        };
                        return tree.select_prev_branch = function(b) {
                            var prev;
                            if (b == null) {
                                b = scope.selected_branch;
                            }
                            if (b != null) {
                                prev = tree.get_prev_branch(b);
                                if (prev != null) {
                                    tree.select_branch(prev);
                                    return prev;
                                }
                            }
                        };
                    }
                }
            },
            controller: [
                '$rootScope',
                '$scope',
                '$q',
                '$timeout',
                'FolderListService',
                'BasicsFactory',
                '$uibModal',
                function(
                    $rootScope,
                    $scope,
                    $q,
                    $timeout,
                    FolderListService,
                    BasicsFactory,
                    $uibModal) {
                    $scope.treeData = [];

                    $scope.baseData = BasicsFactory.getDetails();

                    $scope.projectName = $scope.baseData.projectName;

                    var rootDirectory = {
                        label: $scope.projectName,
                        ProjectFolderID: 0,
                        children: []
                    }
                    $scope.treeData.push(rootDirectory);

                    $scope.FolderMenuOptions = function(item) {
                        $scope.user_clicks_branch(item);
                        var itemSelectedMenu = [
                            ['Rename', function($itemScope, $event, modelValue, text, $li) {
                                $scope.renameFolder();
                            }],
                            null, //divider
                            ['Remove', function($itemScope) {
                                $scope.removeFolder(item);
                            }]
                        ];
                        return itemSelectedMenu;
                    }

                    $scope.status = {
                        isopen: false
                    };
                    $scope.$on('reload', function(event, data) {
                        console.log('reload with ', data);
                        $scope.folderReload();
                    })

                    $scope.$on('renameFolderFromTree', function() {
                        $scope.renameFolder();
                    })
                    $scope.folderReload = function(data) {

                        // $scope.treeData = [];
                        getTreeFromServer(data);
                    }
                    $scope.renameFolder = function() {
                        var modalInstance = $uibModal.open({
                            ariaLabelledBy: 'modal-title',
                            ariaDescribedBy: 'modal-body',
                            template: require('../templates/popupmodal.html'),
                            controllerAs: 'vm',
                            controller: [
                                '$scope',
                                '$uibModalInstance',
                                'oldName',
                                'requestData',
                                function($scope,
                                    $uibModalInstance,
                                    oldName,
                                    requestData) {
                                    var vm = this;
                                    vm.folder = {
                                        newName: oldName
                                    };
                                    vm.ok = function() {

                                        vm.folder.newName = vm.folder.newName.trim();
                                        //
                                        if (vm.folder.newName) {
                                            requestData.data.FolderName = vm.folder.newName;
                                            FolderListService.moveFolder(requestData).then(function(response) {
                                                $uibModalInstance.close(vm.folder.newName);
                                            }, function(error) {
                                                console.log('Folder Rename ', error);
                                            })
                                        }
                                    };

                                    vm.cancel = function() {
                                        $uibModalInstance.dismiss('cancel');
                                    };
                                }
                            ],
                            resolve: {
                                oldName: function() {
                                    return $scope.branchSelected.FolderName;
                                },
                                requestData: function() {
                                    var folderData = {};
                                    folderData.headers = {
                                        'TokenKey': BasicsFactory.getDetails().tokenKey,
                                        'PINProjectID': BasicsFactory.getDetails().PINProjectID,
                                        'Content-Type': 'application/json'
                                    };
                                    folderData.data = {
                                        "ParentFolderID": $scope.branchSelected.ParentFolderID,
                                        "ProjectFolderID": $scope.branchSelected.ProjectFolderID,
                                        "PINProjectID": BasicsFactory.getDetails().PINProjectID
                                    };
                                    folderData.params = {};
                                    return folderData;
                                }
                            }
                        })
                        modalInstance.result.then(function(data) {
                            for (var i = 0; i < $scope.tree_rows.length; i++) {
                                if ($scope.tree_rows[i].branch.ProjectFolderID === $scope.branchSelected.ProjectFolderID) {
                                    $scope.tree_rows[i].label = data;
                                    break;
                                }
                            }

                        }, function() {});
                    }

                    var createTree = function(data, tree) {
                            data.forEach(function(val, index) {
                                var data = val;
                                data.label = val.FolderName;
                                if (val.ChildFolderCount) {
                                    data.noLeaf = true;
                                }
                                data.children = [];
                                tree.push(data);
                            })
                        },
                        for_each_branch = function(f) {
                            var do_f, root_branch, _i, _len, _ref, _results;
                            do_f = function(branch, level) {
                                var child, _i, _len, _ref, _results;
                                f(branch, level);
                                if (branch.children != null) {
                                    _ref = branch.children;
                                    _results = [];
                                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                        child = _ref[_i];
                                        _results.push(do_f(child, level + 1));
                                    }
                                    return _results;
                                }
                            };
                            _ref = $scope.treeData;
                            _results = [];
                            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                                root_branch = _ref[_i];
                                _results.push(do_f(root_branch, 1));
                            }
                            return _results;
                        };
                    // $scope.user_drops_branch = function(data, branch) {
                    //     console.log('data', data, branch);
                    //     branch.children.push(data);
                    //     return;
                    //     var folderData = {};
                    //     folderData.headers = {
                    //         TokenKey: BasicsFactory.getDetails().tokenKey,
                    //         PINProjectID: BasicsFactory.getDetails().PINProjectID,
                    //         'Content-Type': 'application/json'
                    //     }
                    //     folderData.data = {
                    //         PINProjectID: BasicsFactory.getDetails().PINProjectID,
                    //         ParentFolderID: branch.ProjectFolderID,
                    //         ProjectFolderID: data.ProjectFolderID
                    //     }
                    //     folderData.params = {
                    //             operation: 4
                    //         }
                    //         // FolderListService.moveFolder(folderData).then(function(response) {
                    //         //     console.log('Move Folder success', response);
                    //         //     // getTreeFromServer();
                    //         // }, function(error) {
                    //         //     console.log('Move Folder error', error);
                    //         // })


                    // };
                    var get_parent = function(child) {
                        var parent;
                        parent = void 0;
                        if (child.parent_uid) {
                            for_each_branch(function(b) {
                                if (b.uid === child.parent_uid) {
                                    return parent = b;
                                }
                            });
                        }
                        return parent;
                    };
                    $scope.expandFolder = function(branch) {
                        // if ($scope.selected_branch) {
                        //     $scope.selected_branch.expanded = false;
                        // }
                        //Collapse rest of the immediate children
                        // var par = get_parent(branch);
                        // par.children.forEach(function(val, idx) {
                        //     if (val.uid !== branch.uid) {
                        //         val.expanded = false;
                        //     }
                        // })
                        var deffered = $q.defer();
                        branch.expanded = !branch.expanded;
                        var folderData = {};
                        folderData.headers = {
                            TokenKey: BasicsFactory.getDetails().tokenKey
                        }
                        folderData.params = {
                            pinProjectId: BasicsFactory.getDetails().PINProjectID,
                            parentFolderId: branch.ProjectFolderID
                        }

                        //If it already has children, no API call will be required
                        if (!branch.isCompleted) {
                            if (branch.expanded) {
                                FolderListService.getFolderList(folderData).then(function(response) {
                                    branch.children = [];
                                    createTree(response[0], branch.children);
                                    branch.isCompleted = true;
                                    deffered.resolve();
                                }, function(error) {
                                    console.log('Folder List Error ', error);
                                    deffered.reject();
                                })
                            } else {
                                deffered.reject();
                            }
                        } else {
                            deffered.reject();
                        }
                        return deffered.promise;
                    }
                    $scope.collapseOnDrag = function(branch) {
                        $rootScope.fromFolderTree = true;
                        branch.expanded = false;
                    }
                    $scope.resetFolderFlag = function(branch) {
                        $rootScope.fromFolderTree = false;
                    }
                    var getTreeFromServer = function() {
                        console.log('get tree from server');
                        var deffered = $q.defer();
                        var folderData = {};
                        folderData.headers = {
                            TokenKey: BasicsFactory.getDetails().tokenKey
                        }
                        folderData.params = {
                            pinProjectId: BasicsFactory.getDetails().PINProjectID
                        }
                        FolderListService.getFolderList(folderData).then(function(response) {
                            $scope.treeData[0].children = [];
                            createTree(response[0], $scope.treeData[0].children);
                            deffered.resolve();

                        }, function(error) {
                            console.log('Folder list error : ', error);
                            deffered.reject();
                        })
                        return deffered.promise;
                    }
                    getTreeFromServer();

                    var select_branch = function(branch) {
                        if (!branch) {
                            if (selected_branch != null) {
                                selected_branch.selected = false;
                            }
                            selected_branch = null;
                            return;
                        }
                        if (branch !== selected_branch) {
                            if (selected_branch != null) {
                                selected_branch.selected = false;
                            }
                            branch.selected = true;
                            selected_branch = branch;
                            expand_all_parents(branch);
                            if (branch.onSelect != null) {
                                return $timeout(function() {
                                    return branch.onSelect(branch);
                                });
                            } else {
                                if (scope.onSelect != null) {
                                    return $timeout(function() {
                                        return scope.onSelect({
                                            branch: branch
                                        });
                                    });
                                }
                            }
                        }
                    };

                    $scope.removeFolder = function(folder, idx) {
                        var modalInstance = $uibModal
                            .open({
                                template: require('../templates/delete-alert-confirm.html'),
                                controller: "deleteFolderCtrl as vm",
                                size: "sm",
                                resolve: {
                                    ProjectFolderID: function() {
                                        return '';
                                    },
                                    BaseData: function() {
                                        return $scope.baseData;
                                    },
                                    Folder: function() {
                                        return folder;
                                    }
                                }
                            });
                        modalInstance.result.then(function(data) {
                            var parent = get_parent(folder);
                            console.log('parent', parent);
                            var childLength = parent.children.length;
                            for (var i = 0; i < childLength; i++) {
                                if (parent.children[i].uid === folder.uid) {
                                    parent.children.splice(i, 1);
                                    break;
                                }
                            }
                            $scope.user_clicks_branch(parent);
                        }, function(data) {});


                    }



                    function recursiveExpansion(event, data) {
                        var tree = [];
                        var pathList, idx;
                        pathList = data.breadcrumbList;
                        idx = 1;

                        var expand = function(pathList, idx, tree) {
                            if (idx <= pathList.length) {
                                for (var i = 0; i < tree.length; i++) {
                                    if (tree[i].ProjectFolderID + "" === pathList[idx].PathFolderID) {
                                        tree[i].expanded = false;
                                        tree[i].isCompleted = false;
                                        //Select the current branch
                                        if (idx === pathList.length - 1) {
                                            $scope.branchSelected.selected = false;
                                            tree[i].selected = true;
                                            $scope.branchSelected = tree[i];
                                            $scope.selected_branch = tree[i];
                                        }
                                        return $scope.expandFolder(tree[i]);
                                        break;
                                    }
                                }
                            }
                        }
                        getTreeFromServer().then(function() {
                            var tree = $scope.treeData[0].children;

                            function recExpand() {
                                idx++;
                                if (idx < pathList.length) {
                                    for (var i = 0; i < tree.length; i++) {
                                        if (tree[i].ProjectFolderID + "" === pathList[idx - 1].PathFolderID) {

                                            tree = tree[i].children;
                                            break;
                                        }
                                    }
                                    expand(pathList, idx, tree).then(recExpand);
                                } else {
                                    return;
                                }
                            }
                            expand(pathList, idx, tree).then(recExpand);
                        });
                    }
                    $rootScope.$on('new-folder', function(event, data) {
                        // console.log('selected ===== ', $scope.branchSelected);
                        recursiveExpansion(event, data);
                    });
                    $scope.$on('expand-folder', function(event, data) {
                        var pathList = data.breadcrumbList,
                            newFolder = {};
                        newFolder.pathName = data.folder.FolderName;
                        newFolder.PathFolderID = data.folder.ProjectFolderID + "";
                        pathList.push(newFolder);
                        recursiveExpansion(event, {
                            breadcrumbList: pathList
                        });
                    })
                    $scope.$on('move-folder', recursiveExpansion);
                    $scope.$on('rename-folder', recursiveExpansion);
                }
            ]
        };
    }
];

},{"../templates/abntree.html":33,"../templates/delete-alert-confirm.html":37,"../templates/popupmodal.html":43}],17:[function(require,module,exports){
'use strict';

module.exports = [
    '$window',
    '$timeout',
    function(
        $window,
        $timeout
    ) {
        return {
            restrict: 'A',
            link: function(scope, element, attributes) {
                $timeout(function() {
                    element.bind('click', function() {
                        console.log('clicked on row', scope);
                    })
                }, 0)


            },
            controller: [
                '$scope',
                '$timeout',
                function(
                    $scope,
                    $timeout
                ) {

                }
            ]
        };
    }
]

},{}],18:[function(require,module,exports){
'use strict';

module.exports = [
    '$window',
    'Upload',
    '$timeout',
    'UploadService',
    'FolderListService',
    'BasicsFactory',
    '$uibModal',
    'toaster',
    '$filter',
    // 'GAPI',
    // 'Drive',
    function(
        $window,
        Upload,
        $timeout,
        UploadService,
        FolderListService,
        BasicsFactory,
        $uibModal,
        toaster,
        $filter
        // GAPI,
        // Drive
    ) {
        return {
            restrict: 'EA',
            template: require('./../templates/uploader.html'),
            scope: {
                // pathImage: '='
            },
            link: function(scope, element) {

            },
            controller: "fileUploadCtrl as vm"
        };
    }
]

},{"./../templates/uploader.html":48}],19:[function(require,module,exports){
'use strict';

module.exports = [
    '$window',
    '$timeout',
    function(
        $window,
        $timeout
    ) {
        return {
            restrict: 'E',
            template: require('./../templates/folder-view.html'),
            scope: {
                folderStruct: '=folderStruct'
            },
            link: function(scope, element, attributes) {
                console.log('attributes', scope);
                scope.currentFolder = scope.folderStruct;


            },
            controller: [
                '$scope',
                '$timeout',
                function(
                    $scope,
                    $timeout
                ) {
                    $scope.changeCurrentFolder = function(current) {
                        console.log('folder : ', current);
                        $scope.currentFolder = current;
                    }
                }
            ]
        };
    }
]

},{"./../templates/folder-view.html":40}],20:[function(require,module,exports){
 'use strict';

 module.exports = [
     '$window',
     function(
         $window
     ) {
         var userDetails = {};

         /* Old */

         function setTokenKey(key) {
             userDetails.tokenKey = key;
         }

         function setPINProjectID(key) {
             userDetails.PINProjectID = key;
         }

         function setProjectName(key) {
             userDetails.projectName = key;
         }

         function setPWAccountID(key) {
             userDetails.PWAccountID = key;
         }

         function setPersonalDetails(obj) {
             userDetails.personalDetails = obj;
         }

         /**/

         function setUserDetails(cfg) {
             userDetails.tokenKey = cfg.tokenKey;
             userDetails.PWAccountID = cfg.PWAccountID;
             userDetails.personalDetails = cfg.personalDetails;
             updateLocalUserDetails();
         }

         function setProjectDetails(cfg) {
             userDetails.PINProjectID = cfg.PINProjectID;
             userDetails.projectName = cfg.projectName;
             updateLocalUserDetails();
         }

         function updateLocalUserDetails() {
             $window.localStorage.setItem('userDetails', JSON.stringify(userDetails));
         }

         function getDetails() {
             if (userDetails === null) {
                 userDetails = {};
             } else if (!Object.keys(userDetails).length) {
                 userDetails = JSON.parse($window.localStorage.getItem('userDetails')) || {};

             }
             return userDetails;
         }

         function clearUserDetails() {
             userDetails = {};
             updateLocalUserDetails();
         }

         function clearProjectDetails() {
             (userDetails.PINProjectID) && delete userDetails.PINProjectID;
             (userDetails.projectName) && delete userDetails.projectName;
             updateLocalUserDetails();
         }

         return {
             setTokenKey: setTokenKey,
             setPINProjectID: setPINProjectID,
             setProjectName: setProjectName,
             setPWAccountID: setPWAccountID,
             setPersonalDetails: setPersonalDetails,


             getDetails: getDetails,
             setUserDetails: setUserDetails,
             setProjectDetails: setProjectDetails,
             clearUserDetails: clearUserDetails,
             clearProjectDetails: clearProjectDetails
         };
     }
 ];

},{}],21:[function(require,module,exports){
 'use strict';

 module.exports = [
     '$window',
     function(
         $window
     ) {
         var themeDetails = {},
             ele = [],
             topElement = [],
             bottomElement = [],
             rightElement = [],
             leftElement = [],
             backgroundDetails = {};

         function elements(item) {
             if (item) {
                 ele = item;
                 if (ele.length) {
                     $window.localStorage.setItem('elements', JSON.stringify(ele));
                 } else {
                     $window.localStorage.setItem('elements', ele);
                 }
             } else {
                 if (ele.length) {
                     return ele;
                 } else {
                     if ($window.localStorage.getItem('elements')) {
                         return JSON.parse($window.localStorage.getItem('elements'));
                     } else {
                         return [];
                     }
                 }
             }
         }

         function topElements(item) {
             console.log('inside top Elements', item);
             if (item) {
                 topElement = item;
                 if (topElement.length) {
                     $window.localStorage.setItem('topElements', JSON.stringify(topElement));
                 } else {
                     $window.localStorage.setItem('topElements', topElement);
                 }
             } else {
                 if (topElement.length) {
                     return topElement;
                 } else {
                     if ($window.localStorage.getItem('topElements')) {
                         console.log('get iTMe ', $window.localStorage.getItem('topElements'));
                         return JSON.parse($window.localStorage.getItem('topElements'));
                     } else {
                         return [];
                     }
                 }
             }
         }

         function bottomElements(item) {
             if (item) {
                 bottomElement = item;
                 if (bottomElement.length) {
                     $window.localStorage.setItem('bottomElements', JSON.stringify(bottomElement));
                 } else {
                     $window.localStorage.setItem('bottomElements', bottomElement);
                 }
             } else {
                 if (bottomElement.length) {
                     return bottomElement;
                 } else {
                     if ($window.localStorage.getItem('bottomElements')) {
                         return JSON.parse($window.localStorage.getItem('bottomElements'));
                     } else {
                         return [];
                     }
                 }
             }
         }

         function rightElements(item) {
             if (item) {
                 rightElement = item;
                 if (rightElement.length) {
                     $window.localStorage.setItem('rightElements', JSON.stringify(rightElement));
                 } else {
                     $window.localStorage.setItem('rightElements', rightElement);
                 }
             } else {
                 if (rightElement.length) {
                     return rightElement;
                 } else {
                     if ($window.localStorage.getItem('rightElements')) {
                         return JSON.parse($window.localStorage.getItem('rightElements'));
                     } else {
                         return [];
                     }
                 }
             }
         }

         function leftElements(ele) {
             if (ele) {
                 leftElement = ele;
                 if (leftElement.length) {
                     $window.localStorage.setItem('leftElements', JSON.stringify(leftElement));
                 } else {
                     $window.localStorage.setItem('leftElements', leftElement);
                 }
             } else {
                 if (leftElement.length) {
                     return leftElement;
                 } else {
                     if ($window.localStorage.getItem('leftElements')) {
                         return JSON.parse($window.localStorage.getItem('leftElements'));
                     } else {
                         return [];
                     }
                 }
             }
         }

         function background(details) {
             if (details) {
                 backgroundDetails = details;
             } else {
                 return backgroundDetails;
             }


         }

         function getDetails() {
             return {
                 background: backgroundDetails,
                 elements: {
                     center: ele,
                     top: topElement,
                     bottom: bottomElement,
                     right: rightElement,
                     left: leftElement
                 }
             }
         }




         return {
             elements: elements,
             topElements: topElements,
             bottomElements: bottomElements,
             rightElements: rightElements,
             leftElements: leftElements,
             background: background,
             getDetails: getDetails
         };
     }
 ];

},{}],22:[function(require,module,exports){
'use strict';
module.exports = [
    function() {
        return function(bytes, precision) {
            if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) return '-';
            if (typeof precision === 'undefined') precision = 1;
            var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],
                number = Math.floor(Math.log(bytes) / Math.log(1024));
            return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];
        }
    }
];

},{}],23:[function(require,module,exports){
module.exports = [
    function() {
        return function(text) {
            if (!text) {
                return;
            }
            text = text.split('.');
            if (text.length === 1) {
                return text[0].toUpperCase()
            }
            return text[1].toUpperCase();
        };
    }
]

},{}],24:[function(require,module,exports){
module.exports = [
    function() {
        return function(items, props) {
            var out = [];

            if (angular.isArray(items)) {
                var keys = Object.keys(props);

                items.forEach(function(item) {
                    var itemMatches = false;

                    for (var i = 0; i < keys.length; i++) {
                        var prop = keys[i];
                        var text = props[prop].toLowerCase();
                        if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                            itemMatches = true;
                            break;
                        }
                    }

                    if (itemMatches) {
                        out.push(item);
                    }
                });
            } else {
                // Let the output be the input untouched
                out = items;
            }

            return out;
        };
    }
]

},{}],25:[function(require,module,exports){
'use strict';
module.exports = [
    'Occupation',
    function(Occupation) {
        return function(PropertyID) {
            console.log('Filter : ', PropertyID, Occupation[PropertyID]);
            return Occupation[PropertyID];
        }
    }
];

},{}],26:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.common', [
        'ui.router',
        'ui.bootstrap'
    ])
    .directive('fileUpload', require('./directives/file-upload.js'))
    .directive('folderView', require('./directives/folder-structure.js'))
    .directive('abnTree', require('./directives/abntree.js'))
    .directive('dragAndMove', require('./directives/drag-and-move.js'))
    .controller('uploadCtrl', require('./controllers/uploadCtrl.js'))
    .controller('loginCtrl', require('./controllers/loginCtrl.js'))
    .controller('addFolderCtrl', require('./controllers/create-new-folder'))
    .controller('renameFolderCtrl', require('./controllers/rename-folder'))
    .controller('copyFolderCtrl', require('./controllers/copyFolderCtrl'))
    .controller('egnyteDomain', require('./controllers/egnyte-domain'))
    .controller('updateDocumentCtrl', require('./controllers/updateDocumentCtrl'))
    .controller('deleteFolderCtrl', require('./controllers/delete-folder'))
    .controller('deleteFileCtrl', require('./controllers/deleteFileCtrl'))
    .controller('fileUploadCtrl', require('./controllers/upload-ctrl'))
    .controller('shareLink', require('./controllers/share-link-ctrl'))
    .service('ApiRequestService', require('./services/apiservice'))
    .constant('API', require('./constants/api'))
    .constant('Occupation', require('./constants/occupation'))
    .constant('Business', require('./constants/business'))
    .service('LoginService', require('./services/loginservice'))
    .service('UploadService', require('./services/upload-service'))
    .service('FolderListService', require('./services/folderlistservice'))
    .service('CustomTemplateService', require('./services/customtemplateservice'))
    .factory('BasicsFactory', require('./factories/basics'))
    .factory('ThemeFactory', require('./factories/theme-factory.js'))
    .filter('bytes', require('./filters/bytes'))
    .filter('lookupSearchFilter', require('./filters/lookupSearchFilter'))
    .filter('extensionFilter', require('./filters/fileExtension'))
    .filter('occupationFilter', require('./filters/occupation-filter'))
    .config(require('./router/route'));

},{"./constants/api":2,"./constants/business":3,"./constants/occupation":4,"./controllers/copyFolderCtrl":5,"./controllers/create-new-folder":6,"./controllers/delete-folder":7,"./controllers/deleteFileCtrl":8,"./controllers/egnyte-domain":9,"./controllers/loginCtrl.js":10,"./controllers/rename-folder":11,"./controllers/share-link-ctrl":12,"./controllers/updateDocumentCtrl":13,"./controllers/upload-ctrl":14,"./controllers/uploadCtrl.js":15,"./directives/abntree.js":16,"./directives/drag-and-move.js":17,"./directives/file-upload.js":18,"./directives/folder-structure.js":19,"./factories/basics":20,"./factories/theme-factory.js":21,"./filters/bytes":22,"./filters/fileExtension":23,"./filters/lookupSearchFilter":24,"./filters/occupation-filter":25,"./router/route":27,"./services/apiservice":28,"./services/customtemplateservice":29,"./services/folderlistservice":30,"./services/loginservice":31,"./services/upload-service":32}],27:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('public', {
                url: '/public',
                abstract: true,
                type: 'public',
                template: require('../templates/common-panel.html')
                    // controller: 'commonPanelCtrl as vm'
            })
            .state('authenticated', {
                url: '/auth',
                abstract: true,
                type: 'authenticated',
                template: require('../templates/common-panel.html')
            })
            .state('public.login', {
                url: '^/login',
                template: require('../templates/login.html'),
                type: 'public',
                controller: 'loginCtrl as vm'
            })
            .state('authenticated.upload', {
                url: '^/upload',
                stateName: 'Upload',
                type: 'authenticated',
                template: require('../templates/upload-ui.html'),
                controller: 'uploadCtrl as vm'
            });
    }
];

},{"../templates/common-panel.html":34,"../templates/login.html":41,"../templates/upload-ui.html":47}],28:[function(require,module,exports){
'use strict';

module.exports = [
    '$q',
    '$http',
    '$state',
    'toaster',
    'BasicsFactory',
    '$rootScope',
    function(
        $q,
        $http,
        $state,
        toaster,
        BasicsFactory,
        $rootScope
    ) {
        return {
            apiRequest: function apiRequest(ApiObj) {
                var deffered = $q.defer();
                $http({
                        method: ApiObj.method || 'GET',
                        url: ApiObj.url || '',
                        headers: ApiObj.headers || {},
                        params: ApiObj.params || {},
                        data: ApiObj.data || {}
                    })
                    .success(function(data, status) {
                        // console.log('RESPONSE : ', response);
                        if (arguments[1] === 200) {
                            deffered.resolve(arguments);
                        } else {
                            deffered.reject(arguments);
                        }
                    })
                    .error(function(error) {
                        console.log('Error : ', error);
                        if (error && error.ErrorCode && (error.ErrorCode === 1 || error.ErrorCode === 2)) {
                            BasicsFactory.clearUserDetails();
                            (!$rootScope.prevState) &&
                            ($rootScope.prevState = $state.current);
                            $state.go('public.login');
                        } else {
                            deffered.reject(error);
                            toaster.pop("error", error.ErrorMessage);
                        }
                    });
                return deffered.promise;
            }
        };
    }
];

},{}],29:[function(require,module,exports){
 'use strict';

 module.exports = [
     '$q',
     'ApiRequestService',
     'API',
     'BasicsFactory',
     function($q, ApiRequestService, API, BasicsFactory) {
         function checkFirstLogin(data) {
             var apiObject = {
                 method: 'GET',
                 params: data.params,
                 headers: data.headers,
                 url: API.checkFirstLogin + '/' + data.params.PWUserId
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function getMasterTemplate(data) {
             var apiObject = {
                 method: 'GET',
                 params: data.params,
                 headers: data.headers,
                 url: API.getMasterTemplate
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function addCustomTemplate(data) {
             var apiObject = {
                 method: 'POST',
                 params: data.params,
                 headers: data.headers,
                 data: data.data,
                 url: API.addCustomTemplate
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         return {
             checkFirstLogin: checkFirstLogin,
             getMasterTemplate: getMasterTemplate,
             addCustomTemplate: addCustomTemplate
         };
     }
 ];

},{}],30:[function(require,module,exports){
 'use strict';

 module.exports = [
     '$q',
     'ApiRequestService',
     'API',
     'BasicsFactory',
     function($q, ApiRequestService, API, BasicsFactory) {
         function getFolderList(data) {
             var apiObject = {
                 method: 'GET',
                 params: data.params,
                 headers: data.headers,
                 url: API.folderList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function getDocumentDetails(data) {
             var apiObject = {
                 method: 'GET',
                 params: data.params,
                 headers: data.headers,
                 url: API.projectDocument
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function moveFolder(data) {
             var apiObject = {
                 method: 'POST',
                 params: data.params,
                 headers: data.headers,
                 data: data.data,
                 url: API.folderList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function moveDocument(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'POST',
                     params: data.params,
                     headers: data.headers,
                     data: data.data,
                     url: API.projectDocument
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function getCustomPropertyList(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'GET',
                     params: data.params,
                     headers: data.headers,
                     url: API.customProperty
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function updateDocument(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'POST',
                     params: data.params,
                     headers: data.headers,
                     data: data.data,
                     url: API.projectDocument
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function getCustomPropertyAttributeList(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'GET',
                     params: data.params,
                     headers: data.headers,
                     url: API.customPropertyAttribute
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function getLookup(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'GET',
                     params: data.params,
                     headers: data.headers,
                     url: API.customPropertyLookup
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function deleteDocument(data) {
             var deffered = $q.defer(),
                 apiObject = {
                     method: 'POST',
                     params: data.params,
                     headers: data.headers,
                     data: data.data,
                     url: API.projectDocument
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function deleteFolder(data) {
             var apiObject = {
                 method: 'POST',
                 params: data.params,
                 headers: data.headers,
                 url: API.folderList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         return {
             getFolderList: getFolderList,
             getDocumentDetails: getDocumentDetails,
             moveFolder: moveFolder,
             moveDocument: moveDocument,
             getCustomPropertyList: getCustomPropertyList,
             updateDocument: updateDocument,
             getCustomPropertyAttributeList: getCustomPropertyAttributeList,
             getLookup: getLookup,
             deleteDocument: deleteDocument,
             deleteFolder: deleteFolder
         };
     }
 ];

},{}],31:[function(require,module,exports){
 'use strict';

 module.exports = [
     '$q',
     'ApiRequestService',
     'API',
     'BasicsFactory',
     '$window',
     function($q, ApiRequestService, API, BasicsFactory, $window) {
         function doLogin(data) {
             var apiObject = {
                 method: 'POST',
                 headers: data.headers,
                 url: API.authenticate
             };

             return ApiRequestService
                 .apiRequest(apiObject);

         }

         function projectList(data) {
             var headers = {
                     tokenKey: BasicsFactory.getDetails().tokenKey
                 },
                 apiObject = {
                     method: 'GET',
                     headers: headers,
                     params: data.params,
                     url: API.projectList
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }
         return {
             doLogin: doLogin,
             projectList: projectList
         };
     }
 ];

},{}],32:[function(require,module,exports){
 'use strict';

 module.exports = [
     'ApiRequestService',
     'API',
     'BasicsFactory',
     function(ApiRequestService, API, BasicsFactory) {
         function getFolderDetails(cfg) {

             var baseData = BasicsFactory.getDetails();
             var apiObject = {
                 headers: {
                     TokenKey: baseData.tokenKey,
                     Page: cfg.page || 1,
                     PerPage: cfg.perPage || 15
                 },
                 params: {
                     pinProjectId: cfg.PINProjectID || baseData.PINProjectID,
                     parentFolderId: cfg.parentFolderId || 0,
                     source: cfg.source || 5,
                     start: cfg.start
                     //searchBy: 3 ///
                 },
                 url: API.folderDetails
             };
             (cfg.orderBy !== undefined) && (apiObject.params.orderBy = cfg.orderBy);
             console.log('apiObject ', apiObject, "cfg ", cfg);
             return ApiRequestService
                 .apiRequest(apiObject);

         };

         function createFolder(cfg) {
             var baseData = BasicsFactory.getDetails();
             var headers = {
                     tokenKey: baseData.tokenKey,
                     PINProjectID: cfg.PINProjectID || baseData.PINProjectID,
                     "Content-Type": "application/json"
                 },
                 params = {
                     hierarchyCreate: 1,
                     continuous: 1
                 },
                 apiObject = {
                     method: 'POST',
                     headers: headers,
                     url: API.folder,
                     // params: params,
                     data: cfg.data
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function folderDetails(cfg) {
             var baseData = BasicsFactory.getDetails();
             var headers = {
                     tokenKey: baseData.tokenKey,
                     PINProjectID: cfg.PINProjectID || baseData.PINProjectID
                 },
                 params = {
                     projectFolderId: cfg.parentFolderId
                 },
                 apiObject = {
                     method: 'GET',
                     headers: headers,
                     url: API.folder,
                     params: params,
                     data: cfg.data
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };


         function uploadDocument(cfg) {
             var baseData = BasicsFactory.getDetails();
             var headers = {
                     TokenKey: baseData.tokenKey,
                     PINProjectID: cfg.PINProjectID || baseData.PINProjectID,
                     "Content-Type": "application/json"
                 },
                 params = {
                     duplicate: 1,
                     source: 5
                 },
                 apiObject = {
                     method: 'POST',
                     headers: headers,
                     url: API.projectDocument,
                     params: params,
                     data: cfg.data
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function createSessionID(cfg) {
             var baseData = BasicsFactory.getDetails();
             var apiObject = {
                 method: 'GET',
                 headers: { TokenKey: baseData.tokenKey, },
                 url: API.createSession,
                 params: cfg.params
                     // data: cfg.data
             };
             return ApiRequestService
                 .apiRequest(apiObject);
         };

         return {
             getFolderDetails: getFolderDetails,
             createFolder: createFolder,
             folderDetails: folderDetails,
             uploadDocument: uploadDocument,
             createSessionID: createSessionID
         };
     }
 ];

},{}],33:[function(require,module,exports){
module.exports = "<div><ul class=\"nav nav-list nav-pills nav-stacked abn-tree\"><li ng-repeat=\"row in tree_rows | filter:{visible:true} track by row.branch.uid\" ng-animate=\"'abn-tree-animate'\" ng-class=\"'level-' + {{ row.level }} + (row.branch.selected ? ' active':'') + ' ' +row.classes.join(' ')\" class=abn-tree-row><div class=\"horizontal-line level-2-line\"></div><div class=\"horizontal-line level-3-line\"></div><div class=\"horizontal-line level-4-line\"></div><div class=\"horizontal-line level-5-line\"></div><div class=\"horizontal-line level-6-line\"></div><div class=\"horizontal-line level-7-line\"></div><div class=\"horizontal-line level-8-line\"></div><div class=\"horizontal-line level-9-line\"></div><div class=\"horizontal-line level-10-line\"></div><a class=indented ng-click=user_clicks_branch(row.branch) ng-drag={{dragDrop}} ng-drop={{dragDrop}} ng-drop-success=\"user_drops_branch($data, row.branch)\" ng-drag-data=row.branch ng-drag-start=collapseOnDrag($data) ng-drag-stop=resetFolderFlag($data) context-menu=FolderMenuOptions(row.branch)><i ng-class=row.tree_icon ng-click=expandFolder(row.branch) class=tree-icon></i> <span class=tree-label ng-click=expandFolder(row.branch)>{{ row.label }}</span></a></li></ul></div>";

},{}],34:[function(require,module,exports){
module.exports = "<div ui-view></div>";

},{}],35:[function(require,module,exports){
module.exports = "<div class=modal-header><h3 class=modal-title id=modal-title>Select Location</h3></div><div class=modal-body id=modal-body><abn-tree icon-leaf=\"fa fa-folder-o abn-leaf-node\" icon-expand=\"fa fa-folder-o\" icon-collapse=\"fa fa-folder-open-o\" tree-control=myTree drag-drop-enable=false></abn-tree></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=vm.save()>Select</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>Cancel</button></div>";

},{}],36:[function(require,module,exports){
module.exports = "<div class=modal-header><h3 class=modal-title id=modal-title>Create New Folder</h3></div><form ng-submit=vm.save()><div class=modal-body id=modal-body><div class=form-group><input type=text class=form-control id=name ng-model=vm.name placeholder=\"Folder Name\"></div></div><div class=modal-footer><button ng-disabled=\"vm.preventSubmit || !vm.name.length\" class=\"btn btn-primary\" type=submit>Save</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>Cancel</button></div></form>";

},{}],37:[function(require,module,exports){
module.exports = "<div class=modal-header></div><div class=modal-body id=modal-body><p ng-if=vm.hasChild>Removing this folder would delete all files/folders present inside this folder.<br><b>Do you want to continue?</b></p><p ng-if=!vm.hasChild><b>Remove empty folder?</b></p></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=vm.save()>Yes</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>No</button></div>";

},{}],38:[function(require,module,exports){
module.exports = "<div class=modal-header ng-init=vm.init()></div><div class=\"modal-body delete-confirm\" id=modal-body><p class=delete-confirm-message ng-if=\"vm.fileCount>1\">Are you sure you want to delete {{vm.fileCount}} files?</p><p class=delete-confirm-message ng-if=\"vm.fileCount==1\">Are you sure you want to delete this file?</p></div><div class=\"modal-footer delete-confirm\"><button class=\"btn btn-primary delete-confirm-btn btn-yes\" type=button ng-click=vm.save()>Yes</button> <button class=\"btn btn-warning delete-confirm-btn btn-no\" type=button ng-click=vm.cancel()>No</button></div>";

},{}],39:[function(require,module,exports){
module.exports = "<div class=modal-header><h3 class=modal-title id=modal-title>Domain Name</h3></div><div class=modal-body id=modal-body><form><div class=form-group><span>http://</span><input type=text class=form-control id=name ng-model=vm.name placeholder=yourdomain style=\"width: 250px;display: inline\"><span>.egnyte.com</span></div></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=vm.save()>Continue</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>Close</button></div>";

},{}],40:[function(require,module,exports){
module.exports = "<div>Folder view Name: {{currentFolder.name}}<h3>Folders : -</h3><ul><li ng-repeat=\"folders in currentFolder.childFolders\" ng-click=changeCurrentFolder(folders)>{{folders.name}}</li></ul><h3>Files : -</h3><ul><li ng-repeat=\"files in currentFolder.childFiles\">{{files.name}}</li></ul></div>";

},{}],41:[function(require,module,exports){
module.exports = "<div class=\"container login-container\"><div class=row id=pwd-container><div class=col-md-4></div><div class=col-md-4><section class=login-form><form method=post role=login name=login ng-submit=vm.doLogin()><div show-errors class=form-group ng-class=\"{ 'has-error': login.email.$invalid }\"><input type=email name=email placeholder=Email ng-required class=\"input-lg form-control\" ng-model=\"vm.user.email\"></div><div show-errors class=form-group ng-class=\"{ 'has-error': login.password.$invalid }\"><input name=password type=password class=\"input-lg form-control\" id=password placeholder=Password ng-required ng-model=\"vm.user.password\"></div><div class=form-group><input name=remember id=remember type=checkbox ng-model=\"vm.remember\"><label class=remember-padding for=remember>Remember me</label></div><button type=submit name=go class=\"btn btn-lg btn-primary btn-block submit-btn\">Sign in</button></form></section></div><div class=col-md-4></div></div></div>";

},{}],42:[function(require,module,exports){
module.exports = "<div class=\"ui-grid-cell-contents custom-contents-style\"><div class=ui-grid-extension>{{ row.entity.OriginalExtension | extensionFilter}}</div><div class=ui-grid-name><div>{{ COL_FIELD }}</div><div class=ui-grid-version>v{{row.entity.RevisionNumber}}.0</div><div class=ui-grid-size>{{row.entity.Filesize | bytes}}</div></div></div>";

},{}],43:[function(require,module,exports){
module.exports = "<div class=modal-header><h3 class=modal-title id=modal-title>Rename Folder</h3></div><div class=modal-body id=modal-body><form><div class=form-group><label for=name>New Name</label><input type=text class=form-control id=name ng-model=vm.folder.newName></div></form></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=vm.ok()>OK</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>Cancel</button></div>";

},{}],44:[function(require,module,exports){
module.exports = "<div ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.uid\" ui-grid-one-bind-id-grid=\"rowRenderIndex + '-' + col.uid + '-cell'\" class=\"ui-grid-cell each-cell-container\" ng-class=\"{ 'ui-grid-row-header-cell': col.isRowHeader,'is-selected': row.entity.isSelected }\" role=\"{{col.isRowHeader ? 'rowheader' : 'gridcell'}}\" ng-click=\"grid.appScope.selectFile(row.entity, $index, $event)\" context-menu=grid.appScope.fileListMenuOptions(row) ng-drag=true ng-drag-data=\"{data: row.entity, from: 'right', isFile: true}\" ng-drag-start=\"grid.appScope.startDrag(row.entity, $index, $event)\" ng-drag-stop=\"grid.appScope.completeDrag(row.entity, $index)\" ng-center-anchor=true><div class=name-cell-content ui-grid-cell></div></div>";

},{}],45:[function(require,module,exports){
module.exports = "<div class=modal-header ng-init=vm.init()><h3 class=\"text-center modal-title\" id=modal-title>{{vm.headerText}}</h3></div><div class=\"modal-body project-edit-modal\" id=modal-body><form class=form-horizontal><div class=\"row form-group\"><label class=\"control-label col-sm-12 text-left invite-label\" for=owner_first>Invitation Message</label><div class=\"col-sm-12 invite-col-sm\"><textarea class=form-control placeholder=Message ng-model=vm.inviteMessage></textarea></div></div><div class=\"row form-group text-right bottom-button-panel bottom-adust\"><div class=col-sm-12><button class=\"btn save-btn\" ng-click=vm.send()>Send invitation</button> <button class=\"btn cancel-btn\" ng-click=vm.cancel()>Cancel</button></div></div></form></div>";

},{}],46:[function(require,module,exports){
module.exports = "<div class=modal-header><h3 class=modal-title id=modal-title>Update Document</h3></div><div class=modal-body id=modal-body><uib-tabset active=active><uib-tab index=0 heading=\"General Properties\"><form><div class=form-group><label for=title>Document Title</label><input type=text class=form-control id=title ng-model=vm.file.DocumentTitle placeholder=Title></div><div class=form-group><label for=name>Document Name</label><input type=text class=form-control id=name ng-model=vm.file.DocumentName placeholder=Name></div><div class=form-group><label for=desc>Document Description</label><textarea class=form-control id=desc ng-model=vm.file.DocumentDesc placeholder=Description>\n                </textarea></div><div class=form-group><label for=search_tags>Search Tags</label><input type=text class=form-control id=search_tags ng-model=vm.file.SearchTag placeholder=Tags></div></form></uib-tab><uib-tab index=1 heading=\"Custom Properties\"><form><div class=form-group ng-repeat=\"property in vm.customPropertyList\"><label for={{property.CustomPropertyID}}>{{property.PropertyName}}</label><input ng-if=\"property.DataType==1\" type=text class=form-control id={{property.CustomPropertyID}} placeholder={{property.PropertyName}} ng-model=property.LookupDataText> <input ng-if=\"property.DataType==2 || property.DataType==6\" type=number class=form-control id={{property.CustomPropertyID}} placeholder={{property.PropertyName}} ng-model=property.LookupDataText><p class=input-group ng-if=\"property.DataType==3\"><input type=text class=form-control uib-datepicker-popup={{format}} ng-model=property.LookupDataText is-open=property.opened datepicker-options=dateOptions ng-required=true show-button-bar=false close-text=\"Close\"> <span class=input-group-btn><button type=button class=\"btn btn-default\" ng-click=open(property)><i class=\"fa fa-calendar\"></i></button></span></p><div ng-if=\"property.DataType==5\" class=radio><label><input type=radio ng-model=property.LookupDataText name={{property.CustomPropertyID}} placeholder={{property.PropertyName}} value=true> Yes &nbsp;</label><label><input type=radio ng-model=property.LookupDataText name={{property.CustomPropertyID}} placeholder={{property.PropertyName}} value=false> No</label></div><ui-select ng-if=\"property.PropertyType == 2\" ng-model=property.selected theme=bootstrap reset-search-input=false title=Title><ui-select-match placeholder=\"Select {{property.PropertyName}}\">{{$select.selected.LookupData[0].LookupDataText}}</ui-select-match><ui-select-choices repeat=\"lookup in property.lookupList | filter: $select.search\"><div>{{lookup.LookupData[0].LookupDataText}}</div></ui-select-choices></ui-select></div></form></uib-tab></uib-tabset></div><div class=modal-footer><button class=\"btn btn-primary\" type=button ng-click=vm.save()>Update</button> <button class=\"btn btn-warning\" type=button ng-click=vm.cancel()>Cancel</button></div>";

},{}],47:[function(require,module,exports){
module.exports = "<div class=upload-widget-container><div ng-if=vm.showComponent><file-upload></file-upload></div></div>";

},{}],48:[function(require,module,exports){
module.exports = "<div class=\"container-fluide upload-module height-100\" ng-init=init() ng-keydown=keyDownFunc($event)><div class=\"general-upload-header row\"><div class=\"col-sm-6 text-left\"></div><div class=\"col-sm-6 text-right\"><div class=right-header-container>View <button class=\"grid-view-btn view-btn\" ng-class=\"{'view-active': isGrid}\" ng-click=\"isGrid = true\"></button> <span class=ver-divider>|</span> <button class=\"list-view-btn view-btn\" ng-class=\"{'view-active': !isGrid}\" ng-click=\"isGrid = false\"></button></div></div></div><div class=doc-container-outer><div class=\"panel panel-default doc-container upload\"><div class=\"panel-heading header\"><div class=folder-field><span class=all-folder>All Folders</span><div class=tree-hid-btn ng-click=toggleTreeView()><img src=./resources/arrow-left.png></div></div><div class=other-fields><div class=\"current-folder-name field\" ng-show=parentFolderId><i class=\"fa fa-folder-open-o\"></i> <span ng-bind=currentDir.FolderName></span></div><div class=\"sort-field field\"><label class=field-label>Sort by</label><div class=btn-group uib-dropdown is-open=status.isopenSort><button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.sortOption.text></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button><li role=menuitem ng-repeat=\"option in vm.sortOptions\" ng-click=\"vm.sortOption=option;vm.filterProjectList(option)\"><a href=\"\" ng-bind=option.text></a></li></ul></div></div><div class=\"filter-field field\"><button uib-tooltip=\"Show Filter Options\" class=filter-btn><img src=./resources/filter.png><label class=field-label>Show Filter</label></button></div><div class=\"pull-right double-line\"><div class=\"field button-group\"><button uib-tooltip=\"Upload image\" ngf-select=\"\" ng-model=ufile ngf-multiple=true ng-change=show() ng-show=parentFolderId><img src=./resources/upload_file.png></button> <button uib-tooltip=\"Create Folder\" ng-click=openCreateFolderModal()><img src=./resources/create-folder.png></button> <button uib-tooltip=Information><img src=./resources/i.png></button> <button uib-tooltip=\"Custom view\"><img src=./resources/create-view_hover.png></button></div><div class=\"field pagination-field\"><ul uib-pagination boundary-links=true total-items=vm.totalCount||202 ng-model=vm.pageNo items-per-page=vm.perPageItem.value class=pagination-sm previous-text=&lsaquo; next-text=&rsaquo; first-text=&laquo; last-text=&raquo; max-size=3 ng-change=vm.pageChanged()></ul></div><div class=\"per-page-field field\"><div class=btn-group uib-dropdown is-open=status.isopenPerPage><button id=single-button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.perPageItem.text></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button ng-model=vm.perPageItem><li role=menuitem ng-repeat=\"item in vm.perPageItemList\" ng-click=\"vm.perPageItem=item;vm.changePerPageCount(item)\"><a href=\"\" ng-bind=item.text></a></li></ul></div></div></div></div></div><div class=\"panel-body upload-viewer-container drop-zone\" ngf-drop ng-model=ufile ngf-drag-over-class=\"'dragover'\" ngf-multiple=true ngf-allow-dir=true ngf-include-dir=true xaccept=image/*,application/pdf ngf-pattern=\"'image/*,application/pdf'\" ng-change=show() ng-class=\"{'dragover': !currentDir.folders.length && !currentDir.files.length}\"><div class=directory ng-class=\"{'show': toggleTree}\"><abn-tree icon-leaf=\"fa fa-folder-o abn-leaf-node\" icon-expand=\"fa fa-folder-o\" icon-collapse=\"fa fa-folder-open-o\" tree-control=myTree drag-drop-enable=true></abn-tree></div><div class=grid ng-class=\"{'directory-opened': toggleTree, 'directory-closed': !toggleTree, 'hide-view': !isGrid}\" context-menu=fileMenuOptions()><div class=\"folder-container hide\"><div class=header ng-show=currentDir.folders.length>Folders</div><div class=\"folders row\" ng-show=currentDir.folders.length><div ng-drag-data=\"{data: showFolders, isFile: false}\" ng-drag-start=startDrag() ng-drag-stop=completeDrag() ng-drag-success=completeDrag($data) ng-drag=true ng-drop=true ng-drop-success=moveTo($data,$event,showFolders) ng-repeat=\"showFolders in currentDir.folders track by $index\" class=\"col-xs-6 col-sm-4 col-md-3 folder-view\" context-menu=folderMenuOptions><div class=thumbnail ng-dblclick=changeCurrentDir(showFolders)><i class=\"fa fa-folder\" aria-hidden=true></i><div class=name>{{showFolders.FolderName}}</div></div></div></div></div><div class=file-container><div class=\"files files-grid-view\"><div class=\"file-grid-item upload-file-area\" ngf-select=\"\" ng-model=ufile ngf-multiple=true ng-change=show() ng-show=parentFolderId><div class=\"upload-file text-center\">Upload File</div></div><div ng-show=currentDir.files.length ng-drag-data=\"{data: showFile, isFile: true, from: 'right'}\" ng-drag-start=\"startDrag(showFile, $index)\" ng-drag-stop=\"completeDrag(showFile, $index)\" ng-drag-success=completeDrag($data) ng-drag=true ng-drop=false ng-repeat=\"showFile in currentDir.files\" class=\"folder-view file-grid-item\" context-menu=fileMenuOptions(showFile) ng-click=\"selectFile(showFile, $index, $event)\" draggable=false ng-class=\"{'is-selected': showFile.isSelected}\"><div class=thumbnail style=\"background-image: url('./resources/files/sc2.jpg')\" ng-class=\"{'has-image':showFile.chooseImage}\"><div class=\"top-triangle badge-wrap\" style=\"border-top-color: #4a89f2\"></div><div class=top-triangle-adjust style=\"border-top-color: #fff\"></div><div class=extension-display style=\"color: #4a89f2\">{{showFile.OriginalExtension | extensionFilter}}</div><div class=check-marker><input type=checkbox ng-model=showFile.isSelected ng-change=selectFile(showFile)></div><div class=thumbnail-footer><div class=name>{{showFile.DocumentName}}</div><div class=size>{{showFile.Filesize | bytes}}</div></div><div class=thumbnail-overlay><div class=overlay-name>{{showFile.DocumentName}}</div><div class=overlay-detail ng-if=showFile.DocumentTitle><span class=title>Title</span> <span class=title-value>{{showFile.DocumentTitle}}</span></div><div class=overlay-detail ng-if=showFile.DocumentVendor><span class=title>Vendor</span> <span class=title-value>{{showFile.DocumentVendor}}</span></div><div class=overlay-detail><span class=title>Date</span> <span class=title-value>{{showFile.RevisionDate | date:'dd-MMM-yyyy'}}</span></div></div></div></div></div></div></div><div class=list ng-class=\"{'directory-opened': toggleTree, 'directory-closed': !toggleTree, 'hide-view': isGrid}\"><ol class=\"breadcrumb hide\" xng-if=parentFolderId><li ng-repeat=\"item in breadcrumbList track by $index\" ng-class=\"{'active':($index===(breadcrumbList.length-1))}\" ng-drop=true ng-drop-data=item ng-drop-success=\"dropOnBreadcrumb($data, $event, item)\"><a href=\"\" ng-if=\"$index!==(breadcrumbList.length-1)\" ng-click=goToDir(item)>{{item.pathName}}</a> <span ng-if=\"$index===(breadcrumbList.length-1)\">{{item.pathName}}</span></li></ol><div class=\"folder-container hide\"><div class=header ng-show=currentDir.folders.length>Folders</div><div class=folders ng-show=currentDir.folders.length><div class=\"row folder-view folder-view-header margin-0\"><div class=\"col-xs-7 name\">Name</div><div class=\"col-xs-5 owner\">Created at</div></div><div ng-drag-data=\"{data: showFolders, isFile: false}\" ng-drag-start=startDrag() ng-drag-stop=completeDrag() ng-drag-success=completeDrag($data) ng-drag=true ng-drop=true ng-drop-success=moveTo($data,$event,showFolders) class=\"row folder-view margin-0\" ng-repeat=\"showFolders in currentDir.folders track by $index\" ng-dblclick=changeCurrentDir(showFolders) context-menu=folderMenuOptions><div class=\"col-xs-7 name\"><i class=\"fa fa-folder\" aria-hidden=true></i> {{showFolders.FolderName}}</div><div class=\"col-xs-5 owner\">{{showFolders.CreateDate | date:'MM/dd/yyyy @ h:mma'}}</div></div></div></div><div class=\"file-container hide\"><div class=files ng-show=currentDir.files.length><div class=\"row table-header margin-0\"><div class=\"col-xs-4 name\"><div class=underline-div></div><span>File name</span><div class=\"btn-grp sort-btn\"><button class=\"fa fa-caret-up\"></button> <button class=\"fa fa-caret-down\"></button></div></div><div class=\"col-xs-8 attributes\"><button class=\"abslt-btn prev-btn\"><i class=\"fa fa-caret-left\"></i></button><div class=\"underline-div border-color\"></div><div class=row><div class=\"col-xs-3 type text-center\"><span>Rev.</span><div class=\"btn-grp sort-btn\"><button class=\"fa fa-caret-up\"></button> <button class=\"fa fa-caret-down\"></button></div></div><div class=\"col-xs-3 owner\"><span>File Status</span><div class=\"btn-grp sort-btn\"><button class=\"fa fa-caret-up\"></button> <button class=\"fa fa-caret-down\"></button></div></div><div class=\"col-xs-3 owner\"><span>Last Check-in</span><div class=\"btn-grp sort-btn\"><button class=\"fa fa-caret-up\"></button> <button class=\"fa fa-caret-down\"></button></div></div><div class=\"col-xs-3 owner\"><span>File size</span><div class=\"btn-grp sort-btn\"><button class=\"fa fa-caret-up\"></button> <button class=\"fa fa-caret-down\"></button></div></div></div><button class=\"abslt-btn nxt-btn\"><i class=\"fa fa-caret-right\"></i></button></div></div><div ng-drag-data=\"{data: showFiles, isFile: true}\" ng-drag-start=startDrag() ng-drag-stop=completeDrag() ng-drag-success=completeDrag($data) ng-drag=true ng-drop=false class=\"row folder-view margin-0 table-body\" ng-repeat=\"showFiles in currentDir.files track by $index\" context-menu=fileMenuOptions><div class=\"underline-div border-color\"></div><div class=\"col-xs-4 name\"><div class=\"initials color-{{showFiles.OriginalExtension|extensionFilter}}\"><span>{{showFiles.OriginalExtension|extensionFilter}}</span></div><span>{{showFiles.DocumentName}}</span></div><div class=\"col-xs-8 attributes\"><div class=row><div class=\"col-xs-3 type text-center\">{{showFiles.RevisionNumber}}</div><div class=\"col-xs-3 owner\"></div><div class=\"col-xs-3 owner\">{{showFiles.RevisionDate | date:'MM/dd/yyyy @ h:mma'}}</div><div class=\"col-xs-3 owner\">{{showFiles.Filesize|bytes:2}}</div></div></div></div></div></div><div ng-if=\"currentDir.files.length>0\" ui-if=\"gridOptions.data.length>0\" id=customize-grid ui-grid=gridOptions class=file-list-view ui-grid-resize-columns ui-grid-pinning ui-grid-auto-resize style=\"height: 100%\"></div></div><div class=multiple-menu-btn-container ng-if=\"breadcrumbList.length>1\"><button class=\"btn main-menu-btn-ctrl\" ng-click=toggleMainMenu() ng-class=\"{'show-close-btn': showMainMenu}\"></button><div class=multiple-menu-btn-inner ng-if=showMainMenu><button uib-tooltip=Cut class=\"btn cut-btn multiple-menu-btn\" ng-click=moveFiles()></button> <button uib-tooltip=Copy class=\"btn copy-btn multiple-menu-btn\" ng-click=copyFiles()></button> <button uib-tooltip=\"Edit Attributes\" class=\"btn edit-btn multiple-menu-btn\"></button> <button uib-tooltip=Paste class=\"btn paste-btn multiple-menu-btn\" ng-disabled=\"moveCount==0\" ng-click=dropMove()><span class=badge ng-if=\"moveCount>0\">{{moveCount}}</span></button> <button uib-tooltip=\"Delete Document\" class=\"btn delete-btn multiple-menu-btn\" ng-click=deleteFiles()></button> <button uib-tooltip=\"Select All\" class=\"btn select-all-btn multiple-menu-btn\" ng-click=selectAllFiles()></button></div></div></div></div></div><div ng-drag-clone class=cloned-file-item><div class=selected-message ng-if=\"selectedCount>1\">{{selectedCount}} Files selected</div><div class=selected-message ng-if=\"selectedCount==1\">1 File selected</div></div><div class=\"panel panel-default fixed-bottm upload-popup\" ng-if=uploadFilesLength ng-class=\"{'minimize-item': minimizeFooter}\"><div class=panel-heading ng-click=\"toggleMinimize('head')\"><div class=panel-title><span ng-show=\"uploadFilesLength!==uploadedData\">Uploading {{uploadFilesLength-uploadedData}} item</span> <span ng-show=\"uploadFilesLength===uploadedData\">{{uploadedData}} uploads complete</span><div class=pull-right ng-click=close()><i class=\"fa fa-times\"></i></div><div class=pull-right><i class=\"fa minimize-btn\" ng-class=\"{'fa-square-o': minimizeFooter, 'fa-minus': !minimizeFooter}\" aria-hidden=true></i></div></div></div><div class=\"panel-body show-progress-container\"><ul class=list-group><li class=list-group-item ng-repeat=\"(key,value) in uploadFiles track by $index\" ng-style=\"{background: 'linear-gradient(90deg, #c6ffdd '+value.percentage+'%, #ffffff 0%)'}\"><div class=row><div class=col-xs-10><p class=progress-name>{{value.name+value.percentage}}</p></div><div class=col-xs-2><button class=\"btn btn-primary pull-right ml-5 cancel-upload-btn\" ng-click=\"stopUpload(value, key, $index)\" ng-if=\"!value.isAbort && value.percentage!==100\"><i class=\"fa fa-times\" aria-hidden=true></i></button> <button class=\"btn btn-primary pull-right ml-5 cancel-upload-btn\" ng-click=resumeUpload(value) ng-if=\"value.isAbort && value.percentage!==100\"><i class=\"fa fa-refresh\" aria-hidden=true></i></button> <button class=\"btn btn-primary pull-right ml-5 cancel-upload-btn\" ng-click=removeFromUploadFiles(value) ng-if=\"value.percentage===100\"><i class=\"fa fa-check\" aria-hidden=true></i></button></div></div></li></ul></div></div></div>";

},{}],49:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    'ContactService',
    'ProjectService',
    'Occupation',
    'Business',
    '$timeout',
    '$stateParams',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster,
        ContactService,
        ProjectService,
        Occupation,
        Business,
        $timeout,
        $stateParams
    ) {
        var vm = this;

        vm.init = function() {
            console.log('Edit Contact : ', $state.current.isEdit, $stateParams);

            $scope.value = '1';
            $scope.$emit('active:button', 'AddContact');
            getCountryList();
            getProjectRoleList();
            vm.occupationList = Occupation;
            vm.occupationList["0"] = "Select Occupation";
            vm.occupation = "0";

            vm.businessList = Business;
            vm.businessList["0"] = "Select Business";
            vm.business = "0";
        };

        function getCountryList() {
            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey
                },
                params: {
                    action: 1 //country
                }
            };
            ProjectService.locationList(apiObject)
                .then(function(response) {

                    response = response[0];
                    vm.countryList = response;
                    vm.countryList = [{ 'CountryName': 'Select Country' }].concat(vm.countryList);
                    vm.country = vm.countryList[0];
                    if ($state.current.isEdit) {
                        vm.id = $stateParams.id;
                        fetchContactDetails(vm.id);
                    }
                    console.log(" vm.country : ", vm.country);
                    vm.stateList = [{ 'StateName': 'Select State' }];
                    vm.getStateList();
                }, function() {});
        };

        vm.getStateList = function() {
            console.log("getStateList : ", vm.country);
            vm.stateList = [{ 'StateName': 'Select State' }];
            if (!vm.country.CountryID) {
                vm.stateList = [{ 'StateName': 'Select State' }];
                vm.state = vm.stateList[0];
                return;
            }
            var country = vm.country;

            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey
                },
                params: {
                    action: 2, //state
                    countryId: country.CountryID
                }
            };
            ProjectService.locationList(apiObject)
                .then(function(response) {

                    response = response[0];
                    vm.stateList = response;
                    vm.stateList = [{ 'StateName': 'Select State' }].concat(vm.stateList);
                    vm.state = (vm.state) ?
                        findSelectedOption('State', vm.stateList, vm.state) :
                        vm.stateList[0];
                }, function() {});
        };

        function findSelectedOption(string, array, value) {
            console.log("findSelectedOption : ", string, array, value);
            var targetValue;
            if (string === "Country") {
                targetValue = array.find(function(each) {
                    return (each.CountryID === value.CountryID);
                });
            } else if (string === "State") {
                targetValue = array.find(function(each) {
                    return (each.StateID === value.StateID);
                });
            }
            return targetValue;
        };

        function getProjectRoleList() {
            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey
                }
            };
            ProjectService.projectRoleList(apiObject)
                .then(function(response) {

                    response = response[0];
                    vm.roleList = response;
                    vm.roleList = [{ 'CodeDesc': 'Select Project Role' }].concat(vm.roleList);
                    vm.role = vm.roleList[0];
                }, function() {});
        };

        $scope.submitForm = function() {

            var data = {
                FirstName: vm.firstName,
                LastName: vm.lastName,
                Notes: vm.title,
                CompanyName: vm.company,
                Email: vm.email,
                PhoneWork: vm.phone,
                Address1: vm.address,
                City: vm.city,
                ZipCode: vm.pin,
                PreferredNTFNMedia: 1,
                LicenseUserType: 0
            };
            if (vm.country.CountryID)
                data.Country = vm.country;
            if (vm.state.StateID)
                data.State = vm.state;
            if (vm.state.StateID)
                data.Business = vm.business;
            if (vm.state.StateID)
                data.Occupation = vm.occupation;

            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey,
                    "Content-Type": "application/json"
                },
                data: data
            };

            console.log(" apiObject : ", apiObject);
            if (vm.id) {
                apiObject.data.PWContactID = vm.id;
                ContactService.updateContact(apiObject)
                    .then(function(response) {
                        toaster.pop("sucess", "Contact Addition", vm.firstName + " has been successfully updated.");
                        vm.gotoContactList();
                    }, function() {})
                    .finally(function() {});
            } else {
                ContactService.createContact(apiObject)
                    .then(function(response) {
                        toaster.pop("sucess", "Contact Addition", vm.firstName + " has been successfully added to your Contact List.");
                        vm.gotoContactList();
                    }, function() {})
                    .finally(function() {});
            }
        };

        vm.gotoContactList = function() {
            $state.go("authenticated.layout.contact.thumbnail.details");
        };

        function fetchContactDetails(id) {
            ContactService.contactDetails({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey
                    },
                    params: {
                        contactId: id
                    }
                })
                .then(function(response) {
                    response = response[0];
                    vm.selectContactDetails = response;
                    mapData();
                });
        };

        function mapData() {
            vm.firstName = vm.selectContactDetails.FirstName;
            vm.lastName = vm.selectContactDetails.LastName;
            vm.title = vm.selectContactDetails.Notes;
            vm.company = vm.selectContactDetails.CompanyName;
            vm.email = vm.selectContactDetails.Email;
            vm.phone = vm.selectContactDetails.PhoneWork;
            vm.address = vm.selectContactDetails.Address1;
            vm.city = vm.selectContactDetails.City;
            vm.pin = vm.selectContactDetails.ZipCode;
            if (vm.selectContactDetails.Country) {
                vm.country = findSelectedOption('Country', vm.countryList, vm.selectContactDetails.Country);
                console.log('bf4 statelist : ', vm.country)
                vm.state = vm.selectContactDetails.State;
                vm.getStateList();
            }
            vm.occupation = vm.selectContactDetails.Occupation;
            // }, 0);
        }

    }
];

},{}],50:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    'ContactService',
    '$timeout',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster,
        ContactService,
        $timeout
    ) {
        var vm = this;
        vm.init = function() {

            $scope.$emit('active:button', 'Details');
            vm.notAvailable = "Not available";
            /*pagination*/
            vm.pageNo = 1;
            vm.perPageItemList = [{
                value: 15,
                text: "15 per page"
            }, {
                value: 25,
                text: "25 per page"
            }, {
                value: 50,
                text: "50 per page"
            }, {
                value: 100,
                text: "100 per page"
            }];
            vm.perPageItem = vm.perPageItemList[0];
            /**/

            vm.gridOptions = {
                id: 'customize-grid',
                rowHeight: 60,
                data: 'vm.selectContactDetails.members',
                enableColumnResizing: true,
                // rowTemplate: require('../templates/rowTemplate.html'),
                columnDefs: [

                    {
                        field: 'ContactDetails.ContactName',
                        displayName: 'Name',
                        minWidth: 200,
                        width: "50%",
                        maxWidth: 400,
                        pinnedLeft: true,
                        cellClass: 'name-cell custom-cell',
                        cellTemplate: require('../templates/member-name-cell.html'),
                        enableSorting: true
                    }, {
                        field: 'ContactDetails.Email',
                        displayName: 'Email',
                        width: '50%',
                        maxWidth: 500,
                        // minWidth: "15%",
                        cellClass: 'title-cell custom-cell',
                        enableSorting: false
                    },
                    // {
                    //     field: 'RevisionDate',
                    //     displayName: 'Date',
                    //     minwidth: 100,
                    //     width: 150,
                    //     maxWidth: 200,
                    //     type: 'date',
                    //     cellFilter: 'date:\'dd-MMM-yyyy\'',
                    //     cellClass: 'date-cell custom-cell',
                    //     enableSorting: false
                    // }, {
                    //     field: 'Filesize',
                    //     displayName: 'Size',
                    //     maxWidth: 150,
                    //     minWidth: 70,
                    //     cellFilter: 'bytes:this',
                    //     enableSorting: false

                    // }, {
                    //     field: 'DocumentDesc',
                    //     displayName: 'Description',
                    //     width: 300,
                    //     maxWidth: 450,
                    //     minWidth: 200,
                    //     enableSorting: false

                    // }, {
                    //     field: 'RevisionNumber',
                    //     displayName: 'Version',
                    //     maxWidth: 150,
                    //     minWidth: 70,
                    //     enableSorting: false

                    // }
                ]
            };

            $scope.$on('get:contact:info', vm.getInfo);
            vm.getInfo("", $scope.$parent.vm.selected);
        };

        vm.getInfo = function(event, contact) {

            vm.selected = contact;
            if (!vm.selected) {
                return;
            }
            if (contact.isGroup) {
                getGroupDetails(contact);
                vm.selectContactDetails = { membersCount: contact.membersCount };
                vm.isGroupSelected = true;
            } else {
                getContactDetails(contact);
                vm.isGroupSelected = false;
            }
        };

        function getContactDetails(each) {
            ContactService.contactDetails({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey
                    },
                    params: {
                        contactId: each.PWContactID
                    }
                })
                .then(function(response) {
                    response = response[0];
                    vm.selectContactDetails = response;
                });
        };

        function getGroupDetails(each) {
            ContactService.groupDetails({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey
                    },
                    params: {
                        groupId: each.PWGroupID
                    }
                })
                .then(function(response) {
                    response = response[0];
                    angular.extend(vm.selectContactDetails, response);

                    getMemberList(vm.selectContactDetails);
                });
        };

        function getMemberList(each) {

            ContactService.groupMembersList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: vm.pageNo,
                        PerPage: vm.perPageItem.value
                    },
                    params: {
                        groupId: each.PWGroupID
                    }
                })
                .then(function(response) {

                    response = response[0];
                    each.members = response;

                });
        };

        vm.pageChanged = function() {
            getMemberList(vm.selectContactDetails);
        };

        vm.changePerPageCount = function(item) {

            // if (item.value !== vm.perPageItem.value) {
            vm.pageNo = 1;
            getMemberList(vm.selectContactDetails);
            // }
        };
    }
];

},{"../templates/member-name-cell.html":65}],51:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    'ContactService',
    '$timeout',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster,
        ContactService,
        $timeout
    ) {
        var vm = this;

        vm.init = function() {
            $scope.$emit('clearProjectDetails');
            vm.doFirstCall = true;
            vm.alphabets = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
            vm.formattedList = [];

            vm.getContactList();
            $scope.$on('refresh:contact-group-list:searchKey', vm.getContactList);
        };

        vm.getContactList = function(event, searchAction) {
            (searchAction) &&
            (($scope.$parent.vm.searchIsInProgress = true) &&
                (vm.doFirstCall = true));

            ContactService.contactList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: 1,
                        PerPage: 100
                    },
                    params: {
                        start: $scope.$parent.vm.searchKey.trim(),
                        orderBy: 0
                    }
                })
                .then(function(response) {
                    if (searchAction &&
                        ($scope.$parent.vm.searchKey.trim().length)) {
                        vm.Page = 1;
                        vm.contacts = response[0];
                    } else {
                        vm.originalContacts = response[0];
                        vm.maxContactPage = Math.ceil(vm.originalContacts.length / vm.perPageCount);
                        vm.contacts = vm.originalContacts.slice(((vm.Page - 1) * vm.perPageCount), (vm.Page * vm.perPageCount));

                    }
                    getGroupList(searchAction);
                });
        };

        function getGroupList(searchAction) {
            ContactService.groupList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: 1,
                        PerPage: 100
                    },
                    params: {
                        start: $scope.$parent.vm.searchKey.trim()
                    }
                })
                .then(function(response) {
                    if (searchAction &&
                        ($scope.$parent.vm.searchKey.trim().length)) {
                        vm.Page = 1;
                        vm.groups = response[0];
                        vm.groups.forEach(function(each) {
                            each.isGroup = true;
                            getMemberList(each, true);
                        });
                    } else {
                        vm.originalGroups = response[0];
                        vm.maxGroupPage = Math.ceil(vm.originalGroups.length / vm.perPageCount);
                        vm.groups = vm.originalGroups.slice(((vm.Page - 1) * vm.perPageCount), (vm.Page * vm.perPageCount));
                        vm.originalGroups.forEach(function(each) {
                            each.isGroup = true;
                            getMemberList(each, true);
                        });
                    }


                    vm.populateFormateArray(searchAction);

                })
                .finally(function() {

                });
        };

        vm.populateFormateArray = function(searchAction) {

            if (searchAction || !vm.mergedList) {
                vm.mergedList = [];
            }


            vm.mergedList = vm.mergedList.concat(sortAlphabetically(vm.contacts.concat(vm.groups)));

            vm.formattedList = formateArray(vm.mergedList);


            // if (vm.formattedList.length) {
            //     vm.formattedList.forEach(function(contactGroup) {
            //         if (contactGroup.contacts.length && vm.doFirstCall) {
            //             
            //             vm.doFirstCall = false;
            //             vm.getInfo(contactGroup.contacts[0]);
            //         }
            //     });
            // }


            (searchAction) &&
            ($scope.$parent.vm.searchIsInProgress = false);

            $scope.$parent.vm.searchedList = (searchAction &&
                ($scope.$parent.vm.searchKey.trim().length));
            vm.isCall = true;
            // $scope.$apply();


        };

        function getMemberList(each, allMember) {

            ContactService.groupMembersList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: (allMember) ? 1 : vm.pageNo,
                        PerPage: (allMember) ? 100 : vm.perPageItem.value
                    },
                    params: {
                        groupId: each.PWGroupID
                    }
                })
                .then(function(response) {

                    response = response[0];
                    (allMember) &&
                    (each.membersCount = response.length) ||
                    (each.members = response);

                    if (vm.doFirstCall) {
                        vm.getInfo(each);
                        vm.doFirstCall = false;
                    }
                });
        };

        vm.getInfo = function(contact) {
            if ($state.current.name === "authenticated.layout.contact.thumbnail.details") {
                $state.go("authenticated.layout.contact.thumbnail.details");
                $scope.$broadcast('get:contact:info', contact);
            }
            vm.selected = contact;
        };

        function sortAlphabetically(array) {
            return array.sort(function(a, b) {
                var aProp = a.ContactName || a.GroupName,
                    bProp = b.ContactName || b.GroupName;
                if (aProp < bProp) return -1;
                if (aProp > bProp) return 1;
                return 0;
            })
        };

        function formateArray(array) {
            // 
            var formattedArray = vm.alphabets.map(function(each) {
                return {
                    alphabet: each
                }
            });

            formattedArray.forEach(function(each) {
                var regEx = "^" + each.alphabet + "(.)*";
                regEx = new RegExp(regEx, "i");
                each.contacts = array.filter(function(element) {
                    // 
                    return regEx.test(element.ContactName || element.GroupName);
                });
            });
            return formattedArray;
        };

        vm.scrollAlphabetList = function(alphabet, index) {
            if ($("." + alphabet).position()) {
                $('.list .nano-content').animate({
                        scrollTop: Math.abs($(".A").position().top) + $("." + alphabet).position().top
                    },
                    'slow');
            }

        };
    }
];

},{}],52:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    '$timeout',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster,
        $timeout
    ) {
        var vm = this;

        vm.init = function() {
            vm.searchKey = '';
            $scope.$on('active:button', changeActioveBtn);
        };

        function changeActioveBtn(event, data) {
            vm.activeBtn = data;
        };

        vm.refreshContactList = function() {
            vm.searchTimer && clearTimeout(vm.searchTimer);
            vm.searchTimer = setTimeout(function() {
                $scope.$broadcast('refresh:contact-group-list:searchKey', true);
            }, 1000);

        };

        vm.clearSearch = function() {
            if (!vm.searchIsInProgress) {
                vm.searchKey = '';
                $scope.$broadcast('refresh:contact-group-list:searchKey', true);
            }
        };

        vm.gotoState = function(state) {
            $state.go(state);
        }

    }
];

},{}],53:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    'ContactService',
    'ProjectService',
    'Occupation',
    'Business',
    '$timeout',
    '$stateParams',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster,
        ContactService,
        ProjectService,
        Occupation,
        Business,
        $timeout,
        $stateParams
    ) {
        var vm = this;

        vm.init = function() {
            console.log('Edit group : ', $state.current.isEdit, $stateParams);
            vm.members = [];
            $scope.$emit('active:button', 'AddGroup');
            vm.occupationList = Occupation;
            vm.occupationList["0"] = "Select Occupation";
            vm.occupation = "0";
            vm.searchKey = '';
            vm.getContactList();
        };

        vm.getContactList = function(event, searchAction) {
            ContactService.contactList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: 1,
                        PerPage: 100
                    },
                    params: {
                        start: vm.searchKey.trim(),
                        orderBy: 0
                    }
                })
                .then(function(response) {
                    vm.contacts = response[0];

                    if ($state.current.isEdit) {
                        vm.id = $stateParams.id;
                        fetchGroupDetails(vm.id);
                    }
                });
        };

        $scope.submitForm = function() {
            console.log('Members : ', vm.members);
            // return;
            var data = {
                GroupName: vm.groupName,
                Notes: vm.description
            };
            /* if (vm.country.CountryID)
                data.Country = vm.country;
            if (vm.state.StateID)
                data.State = vm.state;
            if (vm.state.StateID)
                data.Business = vm.business;
            if (vm.state.StateID)
                data.Occupation = vm.occupation;
*/
            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey,
                    "Content-Type": "application/json"
                },
                data: data
            };

            console.log(" apiObject : ", apiObject);
            if (vm.id) {
                updateGroup(vm.id, vm.groupName);
            } else {
                ContactService.createGroup(apiObject)
                    .then(function(response) {
                        console.log('Create Group Response', response);
                        response = response[0];
                        updateGroup(response, vm.groupName);
                        // toaster.pop("sucess", "Group Creation", vm.groupName + " has been successfully created.");
                        // vm.gotoContactList();
                    }, function() {})
                    .finally(function() {});
            }
        };

        function updateGroup(GroupId, groupName) {
            console.log("GroupId, groupName : ", GroupId, groupName);
            /*if (!vm.members.length) {
                toaster.pop("sucess", "Group Creation", vm.groupName + " has been successfully created.");
                return;
            }*/
            var data = {
                PWGroupID: GroupId,
                GroupName: groupName,
                Status: 1,
                Notes: vm.description
            };

            data.GroupMembersInfo = [];
            if (vm.members.length) {
                vm.members.forEach(function(each) {
                    data.GroupMembersInfo.push({ MemberID: each.PWContactID, "MemberType": 1 })
                });
            }

            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey,
                    ModuleId: 1,
                    "Content-Type": "application/json"
                },
                params: {
                    selection: 0
                },
                data: data
            };

            console.log(" apiObject : ", apiObject);

            ContactService.updateGroup(apiObject)
                .then(function(response) {
                    console.log('Update Group Response', response);
                    if (vm.id) {
                         toaster.pop("sucess", "Group Creation", vm.groupName + " has been successfully updated.");
                    } else {
                        toaster.pop("sucess", "Group Creation", vm.groupName + " has been successfully created.");
                    }
                    vm.gotoContactList();
                }, function() {})
                .finally(function() {});
        };

        vm.gotoContactList = function() {
            $state.go("authenticated.layout.contact.thumbnail.details");
        };

        function fetchGroupDetails(id) {
            ContactService.groupDetails({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey
                    },
                    params: {
                        groupId: id
                    }
                })
                .then(function(response) {
                    response = response[0];
                    vm.selectContactDetails = response;
                    getMemberList(vm.selectContactDetails);
                });
        };

        function getMemberList(each) {

            ContactService.groupMembersList({
                    headers: {
                        TokenKey: BasicsFactory.getDetails().tokenKey,
                        Page: 1,
                        PerPage: 100
                    },
                    params: {
                        groupId: each.PWGroupID
                    }
                })
                .then(function(response) {

                    response = response[0];
                    each.members = response;
                    console.log("vm.selectContactDetails : ", vm.selectContactDetails);
                    mapData();
                });
        };

        function mapData() {
            vm.groupName = vm.selectContactDetails.GroupName;
            vm.groupId = vm.selectContactDetails.PWGroupID;
            // vm.members = vm.selectContactDetails.members;
            vm.description = vm.selectContactDetails.Notes;

            var selectedContacts = [];
            vm.selectContactDetails.members.forEach(function(each) {
                vm.contacts.forEach(function(eachContact) {
                    if (each.ContactDetails.PWContactID === eachContact.PWContactID) {
                        selectedContacts.push(eachContact);
                    }
                });
            });

            vm.members = selectedContacts;
            console.log('--->', vm.selectContactDetails.members, selectedContacts, "<----->", vm.contacts);
        };

    }
];

},{}],54:[function(require,module,exports){
'use strict';

module.exports = [
    'BasicsFactory',
    '$state',
    'toaster',
    'ContactService',
    '$timeout',
    function(
        BasicsFactory,
        $state,
        toaster,
        ContactService,
        $timeout
    ) {
        return {
            restrict: 'EA',
            template: require('./../templates/contact-group-list.html'),
            scope: false,
            link: function(scope, element) {
                scope.showMore = function() {

                    if (scope.$parent.vm.searchKey) {
                        scope.vm.isCall = true;
                        return;
                    }
                    // if (scope.vm.Page < scope.vm.maxContactPage || scope.vm.Page < scope.vm.maxGroupPage) {
                    scope.vm.Page++;
                    // }

                    // scope.vm.getContactList();
                    if (scope.vm.Page <= scope.vm.maxContactPage) {
                        scope.vm.contacts = scope.vm.originalContacts.slice(((scope.vm.Page - 1) * scope.vm.perPageCount), (scope.vm.Page * scope.vm.perPageCount));
                    } else {
                        scope.vm.contacts = [];
                    }
                    if (scope.vm.Page <= scope.vm.maxGroupPage) {
                        scope.vm.groups = scope.vm.originalGroups.slice(((scope.vm.Page - 1) * scope.vm.perPageCount), (scope.vm.Page * scope.vm.perPageCount));
                    } else {
                        scope.vm.groups = [];
                    }
                    if (scope.vm.Page <= scope.vm.maxContactPage || scope.vm.Page <= scope.vm.maxGroupPage) {
                        $timeout(function() {
                            scope.vm.populateFormateArray();
                        }, 3000);
                    } else {
                        scope.vm.isCall = true;
                    }
                };
            },

            controller: ['$rootScope',
                '$scope',
                'BasicsFactory',
                '$state',
                'toaster',
                'ContactService',
                '$timeout',
                function(
                    $rootScope,
                    $scope,
                    BasicsFactory,
                    $state,
                    toaster,
                    ContactService,
                    $timeout) {

                    var vm = $scope.vm;
                    

                    vm.init = function() {
                        

                        vm.Page = 1;
                        vm.perPageCount = 5;
                    }

                }
            ]
        };
    }
];

},{"./../templates/contact-group-list.html":61}],55:[function(require,module,exports){
'use strict';

module.exports = [function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var raw = element[0];
            
            scope.vm.isCall = true;
            raw = raw.getElementsByClassName("nano-content")[0];
            var rawElement = angular.element(raw);
            rawElement.bind('scroll', function() {

                if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight && scope.vm.isCall) {
                    
                    scope.vm.isCall = false;
                    scope.$apply(attrs.scrolly);
                }
            });
        }
    };
}];

},{}],56:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.contact', [
        'ui.router',
        'ui.bootstrap'
    ])
    .directive('scrolly', require('./directives/scrolly.js'))
    .directive('contactList', require('./directives/contact-group-list.js'))
    .controller('contactCtrl', require('./controllers/contact'))
    .controller('contactListCtrl', require('./controllers/contact-list'))
    .controller('contactDetailsCtrl', require('./controllers/contact-details'))
    .controller('contactAddCtrl', require('./controllers/contact-add'))
    .controller('groupAddCtrl', require('./controllers/group-add'))
    .service('ContactService', require('./services/contact-service'))
    .config(require('./router/route'));

},{"./controllers/contact":52,"./controllers/contact-add":49,"./controllers/contact-details":50,"./controllers/contact-list":51,"./controllers/group-add":53,"./directives/contact-group-list.js":54,"./directives/scrolly.js":55,"./router/route":57,"./services/contact-service":58}],57:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        console.log('Project router');
        $stateProvider
            .state('authenticated.layout.contact', {
                url: '^/contact',
                type: 'authenticated',
                stateName: 'Contact',
                abstract: true,
                template: require('../templates/contact.html'),
                controller: 'contactCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail', {
                url: '/thumbnail',
                stateName: 'Contact',
                type: 'authenticated',
                abstract: true,
                template: require('../templates/contact-thumbnail.html'),
                controller: 'contactListCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail.details', {
                url: '/details',
                stateName: 'Contact',
                type: 'authenticated',
                // abstract: true,
                template: require('../templates/contact-details.html'),
                controller: 'contactDetailsCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail.addContact', {
                url: '/add-contact',
                stateName: 'Contact',
                type: 'authenticated',
                // abstract: true,
                template: require('../templates/contact-add.html'),
                controller: 'contactAddCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail.addGroup', {
                url: '/add-group',
                stateName: 'Contact',
                type: 'authenticated',
                // abstract: true,
                template: require('../templates/group-add.html'),
                controller: 'groupAddCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail.editContact', {
                url: '/edit-contact/:id',
                stateName: 'Contact',
                type: 'authenticated',
                isEdit: true,
                // abstract: true,
                template: require('../templates/contact-add.html'),
                controller: 'contactAddCtrl as vm'
            })
            .state('authenticated.layout.contact.thumbnail.editGroup', {
                url: '/add-group/:id',
                stateName: 'Contact',
                type: 'authenticated',
                isEdit: true,
                // abstract: true,
                template: require('../templates/group-add.html'),
                controller: 'groupAddCtrl as vm'
            });

        $urlRouterProvider.when('/contact/', '/contact/thumbnail/details')
            .when('/contact', '/contact/thumbnail/details')
            .when('/contact/thumbnail', '/contact/thumbnail/details')
            .when('/contact/thumbnail/', '/contact/thumbnail/details');
    }
];

},{"../templates/contact-add.html":59,"../templates/contact-details.html":60,"../templates/contact-thumbnail.html":62,"../templates/contact.html":63,"../templates/group-add.html":64}],58:[function(require,module,exports){
 'use strict';

 module.exports = [
     'ApiRequestService',
     'API',
     'BasicsFactory',
     function(ApiRequestService, API, BasicsFactory) {

         function contactList(cfg) {
             var params = { mode: 1 };
             if (cfg.params) {
                 angular.extend(params, cfg.params);
             }
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: params,
                 url: API.contactList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function contactDetails(cfg) {
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.contactList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         };

         function groupList(cfg) {
             /* var params = { mode: 1 };
              if (cfg.params) {
                  angular.extend(params, cfg.params);
              }*/
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.groupList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function groupDetails(cfg) {
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.groupList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function groupMembersList(cfg) {
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.groupMember
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function createContact(cfg) {
             var apiObject = {
                 method: 'POST',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.createContact,
                 data: cfg.data || {}
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function createGroup(cfg) {
             var apiObject = {
                 method: 'POST',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.createGroup,
                 data: cfg.data || {}
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function updateGroup(cfg) {
             var apiObject = {
                 method: 'POST',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.updateGroup,
                 data: cfg.data || {}
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function updateContact(cfg){
            var apiObject = {
                 method: 'POST',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.updateContact,
                 data: cfg.data || {}
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         return {
             contactList: contactList,
             groupList: groupList,
             groupDetails: groupDetails,
             groupMembersList: groupMembersList,
             contactDetails: contactDetails,
             createContact: createContact,
             createGroup: createGroup,
             updateGroup: updateGroup,
             updateContact: updateContact

         }
     }
 ];

},{}],59:[function(require,module,exports){
module.exports = "<div ng-init=vm.init()><scrollable><div class=add-contact><form name=addContact ui-form=submitForm><div class=\"user-license-block form-block\"><div class=header><p>User License</p></div><div class=body><div class=row><div class=\"options col-xs-8\"><div class=row><div class=\"option col-xs-4\"><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio1 ng-model=value value=1 class=hide> <img ng-src=\"{{(value==='1')?'./resources/radio-active.png':'./resources/radio-inactive.png'}}\"></label><div class=option-details><p>Employee</p><p class=sub>Your Company Employee</p></div></div><div class=\"option col-xs-4\"><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio2 ng-model=value value=2 class=hide> <img ng-src=\"{{(value==='2')?'./resources/radio-active.png':'./resources/radio-inactive.png'}}\"></label><div class=option-details><p>Shared User</p><p class=sub>External Project Planner</p></div></div><div class=\"option col-xs-4\"><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio3 ng-model=value value=3 class=hide> <img ng-src=\"{{(value==='3')?'./resources/radio-active.png':'./resources/radio-inactive.png'}}\"></label><div class=option-details><p>Contact</p><p class=sub>Your Account Contact</p></div></div></div></div><div class=\"stats col-xs-4\"><div class=state><p class=number>20</p><p>Total Seats</p></div><div class=state><p class=number>120</p><p>Used</p></div><div class=state><p class=number>8</p><p>Available</p></div></div></div></div></div><div class=\"contact-info-block form-block\"><div class=header><p>Contact Info</p></div><div class=body><div class=img-uploader><div class=text-center><div class=img-wrapper><img src=./resources/upload.png></div><p>Upload Image</p></div></div><div class=form><div class=form-wrapper><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"col-xs-4 label-wrapper\"><label class=col-form-label for=First-Name>First Name <sup>*</sup></label></div><div class=col-xs-8><input type=text name=First_Name placeholder=\"First Name\" class=form-control type=text id=First-Name ng-model=vm.firstName ui-required ng-class=\"{'error':(addContact.First_Name.$invalid && addContact.First_Name.$dirty)}\"></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=Last-Name>Last Name</label></div><div class=col-xs-8><input type=text name=Last_Name placeholder=\"Last Name\" class=form-control type=text id=Last-Name ng-model=vm.lastName></div></div></div><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=Title>Title</label></div><div class=col-xs-8><input type=text name=Title placeholder=Title class=form-control type=text id=Title ng-model=vm.title></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=Company>Company</label></div><div class=col-xs-8><input type=text name=Company placeholder=Company class=form-control type=text id=Company ng-model=vm.company></div></div></div><div class=\"row form-group\"><div class=col-sm-12><div class=\"label-wrapper col-md-2 col-sm-4\"><label class=col-form-label for=Email>Email <sup>*</sup></label></div><div class=\"col-md-10 col-sm-8\"><input type=text name=Email placeholder=Email class=form-control type=text id=Email ng-model=vm.email ui-required ui-email ng-class=\"{'error':(addContact.Email.$invalid && addContact.Email.$dirty)}\"></div></div></div><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=Phone>Phone/Cell</label></div><div class=col-xs-8><input type=text name=Phone placeholder=Phone class=form-control type=text id=Phone ng-model=vm.phone></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Website</label></div><div class=col-xs-8><input type=text name=Website placeholder=Website class=form-control type=text id=Website ng-model=vm.website></div></div></div><div class=\"row form-group\"><div class=col-sm-12><div class=\"label-wrapper col-md-2 col-sm-4\"><label class=col-form-label for=Address>Address</label></div><div class=\"col-md-10 col-sm-8\"><input type=text name=Address placeholder=Address class=form-control type=text id=Address ng-model=vm.address></div></div></div><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=City>City</label></div><div class=col-xs-8><input type=text name=City placeholder=City class=form-control type=text id=City ng-model=vm.city></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=Pin>Pin</label></div><div class=col-xs-8><input type=text name=Pin placeholder=\"Postal Code\" class=form-control type=text id=Pin ng-model=vm.pin></div></div></div><div class=\"row form-group last-div\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Country</label></div><div class=col-xs-8><select class=form-control ng-model=vm.country ng-change=vm.getStateList() ng-options=\"country.CountryName for country in vm.countryList\"></select></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>State</label></div><div class=col-xs-8><select class=form-control ng-model=vm.state ng-options=\"state.StateName for state in vm.stateList\"></select></div></div></div></div></div></div></div><div class=\"other-info-block form-block\"><div class=header><p>Other Info</p></div><div class=body><div class=form><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Project Role</label></div><div class=col-xs-8><select class=form-control ng-model=vm.role ng-options=\"role.CodeDesc for role in vm.roleList\"></select></div></div><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Business</label></div><div class=col-xs-8><select class=form-control ng-model=vm.business ng-options=\"key as value for (key , value) in vm.businessList\"></select></div></div></div><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Occupation</label></div><div class=col-xs-8><select class=form-control ng-model=vm.occupation ng-options=\"key as value for (key , value) in vm.occupationList\"></select></div></div></div></div></div></div><div class=\"button-block form-block\"><div class=header><p></p></div><div class=body><div class=form><div class=\"row form-group\"><div class=col-sm-12><div class=\"col-md-offset-2 col-md-10 col-sm-8 col-sm-offset-4 error-msg\" ng-if=\"(addContact.Email.$invalid && addContact.Email.$dirty)||(addContact.First_Name.$invalid && addContact.First_Name.$dirty)\"><p><sup>**</sup>Please fill up the mandatory fields.</p></div><div class=\"col-md-offset-2 col-md-10 col-sm-8 col-sm-offset-4\"><button class=submit-btn type=submit>Save</button> <button class=cancel-btn type=button ng-click=vm.gotoContactList()>Cancel</button></div></div></div></div></div></div></form></div></scrollable></div>";

},{}],60:[function(require,module,exports){
module.exports = "<div ng-init=vm.init()><div class=contact-details ng-if=\"vm.selectContactDetails && !vm.isGroupSelected\"><div class=user-info><scrollable><div class=info-header><div class=dp><img src=./resources/default-user.png class=profile-pic><div class=\"btn-group more-btn\" uib-dropdown dropdown-append-to-body><button id=btn-append-to-body type=button class=\"btn btn-primary\" uib-dropdown-toggle><img src=./resources/more.png></button><ul class=\"dropdown-menu options\" uib-dropdown-menu role=menu aria-labelledby=btn-append-to-body><li role=menuitem><a xui-sref><div><img src=./resources/export.png><p>Export</p></div></a></li><li role=menuitem><a href=# ui-sref=authenticated.layout.contact.thumbnail.editContact({id:vm.selectContactDetails.PWContactID})><div><img src=./resources/edit.png><p>Edit</p></div></a></li><li role=menuitem><a href=#><div><img src=./resources/delete2.png><p>Delete</p></div></a></li></ul></div></div><div class=name-designation-block><p class=name ng-bind=vm.selectContactDetails.ContactName></p><p class=designation ng-bind=vm.selectContactDetails.Occupation.PropertyID|occupationFilter>Angular Developer</p></div><div class=action><button uib-tooltip=\"Send Message\"><img src=./resources/meg.png></button></div></div><div class=user-contacts><p class=group-count><span>4</span> groups</p></div><div class=information><div class=info-row><label>Company</label><p ng-bind=\"vm.selectContactDetails.CompanyName ||  vm.notAvailable\"></p></div><div class=info-row><label>Role</label><p>Employee</p></div><div class=info-row><label>Email</label><p ng-bind=\"vm.selectContactDetails.Email ||  vm.notAvailable\"></p></div><div class=info-row><label>Mobile</label><p ng-bind=\"vm.selectContactDetails.contactNo ||  vm.notAvailable\"></p></div><div class=info-row><label>Link</label><p ng-bind=\"vm.selectContactDetails.WebURL ||  vm.notAvailable \"></p></div></div></scrollable></div><div class=activity-stream><div class=recent-activity><div class=title><p>Activity Stream</p></div><div class=activity-wrapper><scrollable><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div></scrollable></div></div></div></div><div class=contact-details ng-if=\"vm.selectContactDetails && vm.isGroupSelected\"><div class=user-info><scrollable><div class=info-header><div class=dp><img src=./resources/default-group-image.png class=profile-pic><div class=\"btn-group more-btn\" uib-dropdown dropdown-append-to-body><button id=btn-append-to-body type=button class=\"btn btn-primary\" uib-dropdown-toggle><img src=./resources/more.png></button><ul class=\"dropdown-menu options\" uib-dropdown-menu role=menu aria-labelledby=btn-append-to-body><li role=menuitem><a xui-sref><div><img src=./resources/export.png><p>Export</p></div></a></li><li role=menuitem><a href=# ui-sref=authenticated.layout.contact.thumbnail.editGroup({id:vm.selectContactDetails.PWGroupID})><div><img src=./resources/edit.png><p>Edit</p></div></a></li><li role=menuitem><a href=#><div><img src=./resources/delete2.png><p>Delete</p></div></a></li></ul></div></div><div class=name-designation-block><p class=name ng-bind=vm.selectContactDetails.GroupName></p></div></div><div class=user-contacts><p class=contact-count><span ng-bind=\"vm.selectContactDetails.membersCount || 0\"></span> Contacts</p><p class=add-member>ADD MEMBERS</p></div><div class=information><div class=info-row><label>Company</label><p ng-bind=\"vm.selectContactDetails.CompanyName  ||  vm.notAvailable\"></p></div><div class=info-row><label>Description</label><p ng-bind=\"vm.selectContactDetails.Notes  ||  vm.notAvailable\"></p></div><div class=info-row><label>Link</label><p ng-bind=\"vm.selectContactDetails.WebURL ||  vm.notAvailable \"></p></div></div></scrollable></div><div class=members-list><div class=list-wrapper><div class=title><p class=text>ALL MEMBERS (<span ng-bind=vm.selectContactDetails.membersCount></span>)</p><div class=\"pull-right double-line\"><div class=\"field pagination-field\"><ul uib-pagination boundary-links=true total-items=\" vm.selectContactDetails.membersCount\" ng-model=vm.pageNo class=pagination-sm previous-text=&lsaquo; next-text=&rsaquo; first-text=&laquo; last-text=&raquo; max-size=3 ng-change=vm.pageChanged() items-per-page=vm.perPageItem.value></ul></div><div class=\"per-page-field field\"><div class=btn-group uib-dropdown is-open=status.isopenPerPage><button id=single-button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.perPageItem.text></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button ng-model=vm.perPageItem><li role=menuitem ng-repeat=\"item in vm.perPageItemList\" ng-click=\"vm.perPageItem=item;vm.changePerPageCount(item)\"><a href=\"\" ng-bind=item.text></a></li></ul></div></div></div></div><div ng-if=\"vm.selectContactDetails.members.length>0\" id=customize-grid ui-grid=vm.gridOptions class=file-list-view ui-grid-resize-columns ui-grid-pinning ui-grid-auto-resize></div></div></div></div></div>";

},{}],61:[function(require,module,exports){
module.exports = "<div class=contact-list ng-init=vm.init()><div class=list><scrollable scrolly=showMore()><div class=alphabet-contact-wrapper ng-repeat=\"option in vm.formattedList\" ng-if=option.contacts.length><div class=\"alphabet-divider {{option.alphabet}}\" id={{option.aphabet}}><span ng-bind=option.alphabet></span></div><div class=user ng-repeat=\"contact in option.contacts\" ng-class=\"{'selected-contact':(vm.selected.isGroup)?((vm.selected.PWGroupID)?(contact.PWGroupID===vm.selected.PWGroupID):false):((vm.selected.PWContactID)?(contact.PWContactID===vm.selected.PWContactID):false)}\" ng-click=vm.getInfo(contact)><div class=dp-wrapper><img ng-src={{(contact.isGroup)?&quot;./resources/default-group-image.png&quot;:&quot;./resources/default-user.png&quot;}}></div><div class=details><p class=name ng-bind=(contact.isGroup)?contact.GroupName:contact.ContactName></p><p class=info ng-hide=contact.isGroup><span ng-bind=\"contact.designation||&quot;No Designation Found&quot;\"></span><span ng-if=contact.organization>, <span ng-bind=contact.organization></span></span></p><p class=info ng-show=contact.isGroup><span ng-bind=contact.membersCount></span> members</p><img src=./resources/arrow-left.png class=arrow-right></div></div></div><div class=\"text-center {{vm.isCall}}\" ng-hide=vm.isCall><i class=\"fa fa-spinner fa-spin\"></i></div></scrollable></div><div class=sort-alphabet><scrollable><div class=alphabet ng-repeat=\"option in vm.formattedList\" ng-click=vm.scrollAlphabetList(option.alphabet,$index) ng-disabled=option.contacts.length><button ng-disabled=!option.contacts.length><span ng-bind=option.alphabet></span></button></div></scrollable></div></div>";

},{}],62:[function(require,module,exports){
module.exports = "<div class=body-wrapper ng-init=vm.init()><contact-list></contact-list><div ui-view style=\"height: 100%\" class=contact-dynamic-container></div></div>";

},{}],63:[function(require,module,exports){
module.exports = "<div class=\"contact theme1\" ng-init=vm.init()><div class=header><p class=heading>My Contacts (38)</p></div><div class=body-container><div class=header><div class=search-field><input type=text name=\"\" placeholder=\"Search Contact/Group\" ng-model=vm.searchKey ng-change=vm.refreshContactList()> <img src=./resources/search.png ng-if=\"!vm.searchIsInProgress && !vm.searchedList\"> <i class=fa ng-class=\"{&quot;fa-spinner fa-spin&quot;:vm.searchIsInProgress , &quot;fa-times&quot;:vm.searchedList}\" ng-click=vm.clearSearch()></i></div><div class=other-fields><div class=left-btns><button ng-class=\"{&quot;active&quot; : vm.activeBtn===&quot;AddContact&quot;}\" ng-click=\"vm.gotoState('authenticated.layout.contact.thumbnail.addContact')\">ADD CONTACT<div class=under-line></div></button> <button ng-class=\"{&quot;active&quot; : vm.activeBtn===&quot;AddGroup&quot;}\" ng-click=\"vm.gotoState('authenticated.layout.contact.thumbnail.addGroup')\">CREATE GROUP<div class=under-line></div></button> <button>IMPORT CONTACTS<div class=under-line></div></button></div><div class=right-btn><button><img src=./resources/export_hover.png>EXPORT CONTACTS</button></div></div></div><div class=body ui-view></div></div></div>";

},{}],64:[function(require,module,exports){
module.exports = "<div ng-init=vm.init()><scrollable><div class=\"add-contact add-group\"><form name=addGroup ui-form=submitForm><div class=\"contact-info-block form-block\"><div class=header><p>Group Info</p></div><div class=body><div class=img-uploader><div class=text-center><div class=img-wrapper><img src=./resources/upload.png></div><p>Upload Image</p></div></div><div class=form><div class=form-wrapper><div class=\"row form-group\"><div class=col-sm-12><div class=\"label-wrapper col-md-2 col-sm-4\"><label class=col-form-label for=Group_Name>Group Name <sup>*</sup></label></div><div class=\"col-md-10 col-sm-8\"><input type=text name=Group_Name placeholder=\"Group Name\" class=form-control type=text id=Group_Name ng-model=vm.groupName ui-required ng-class=\"{'error':(addGroup.Group_Name.$invalid && addGroup.Group_Name.$dirty)}\"></div></div></div><div class=\"row form-group last-div\"><div class=col-sm-12><div class=\"label-wrapper col-md-2 col-sm-4\"><label class=col-form-label for=Description>Description</label></div><div class=\"col-md-10 col-sm-8\"><textarea placeholder=\"Group Description\" id=Description name=Description ng-model=vm.description></textarea></div></div></div></div></div></div></div><div class=\"other-info-block form-block\"><div class=header><p>Add Group Members</p></div><div class=body><div class=form><div class=\"row form-group\"><div class=\"col-md-6 col-sm-12\"><div class=\"label-wrapper col-xs-4\"><label class=col-form-label for=example-text-input>Occupation</label></div><div class=col-xs-8><select class=form-control ng-model=vm.occupation ng-options=\"key as value for (key , value) in vm.occupationList\"></select></div></div></div><div class=\"row form-group\"><div class=col-sm-12><div class=\"label-wrapper col-md-2 col-sm-4\"><label class=col-form-label for=add-people>Add People</label></div><div class=\"col-md-10 col-sm-8\"><ui-select multiple=multiple ng-model=vm.members theme=bootstrap ng-disabled=ctrl.disabled sortable=true close-on-select=false><ui-select-match placeholder=\"Add Group Members\"><div class=ui-selected-options><img src=./resources/default-user.png class=dp><p ng-bind=$item.ContactName></p><img src=./resources/cross-search-tag.png class=cross ng-hide=$select.disabled ng-click=$selectMultiple.removeChoice($index)></div></ui-select-match><ui-select-choices repeat=\"person in  (vm.contacts | filter: $select.search)\"><div class=ui-options><img src=./resources/default-user.png><div class=details><p ng-bind=person.ContactName class=name></p><p ng-bind=person.Email class=email></p></div></div></ui-select-choices></ui-select></div></div></div></div></div></div><div class=\"button-block form-block\"><div class=header><p></p></div><div class=body><div class=form><div class=\"row form-group\"><div class=col-sm-12><div class=\"col-md-offset-2 col-md-10 col-sm-8 col-sm-offset-4 error-msg\" ng-if=\"(addGroup.Group_Name.$invalid && addGroup.Group_Name.$dirty)\"><p><sup>**</sup>Please fill up the mandatory fields.</p></div><div class=\"col-md-offset-2 col-md-10 col-sm-8 col-sm-offset-4\"><button class=submit-btn type=submit>Save</button> <button class=cancel-btn type=button ng-click=vm.gotoContactList()>Cancel</button></div></div></div></div></div></div></form></div></scrollable></div>";

},{}],65:[function(require,module,exports){
module.exports = "<div class=\"ui-grid-cell-contents name-cell\"><div class=dp-wrapper><img src=./resources/default-user.png></div><div class=details><p class=name>{{ COL_FIELD }}</p><p><span class=designation>{{row.entity.Designation||'Not available'}}</span> <span ng-if=row.entity.CompanyName>,</span><span class=designation ng-if=row.entity.CompanyName>{{row.entity.CompanyName||'Not available'}}</span></p></div></div>";

},{}],66:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'toaster',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        toaster
    ) {
        var vm = this;

        vm.init = function() {
            console.log('Dashboard init');
            $scope.$emit('clearProjectDetails');
        };
        vm.goToProjects = function() {
            $state.go('authenticated.layout.project.list');
        }
        vm.goToContacts = function() {
                $state.go('authenticated.layout.contact.thumbnail.details');
            }
            // vm.goToState = function() {
            //      $state.go('authenticated.layout.project.list');
            // }

    }
];

},{}],67:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.dashboard', [
        'ui.router',
        'ui.bootstrap'
    ])
    .controller('dashboardCtrl', require('./controllers/dashboard'))
    // .service('ProjectService',require('./services/project-service'))
    .config(require('./router/route'));

},{"./controllers/dashboard":66,"./router/route":68}],68:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        console.log('Project router');
        $stateProvider
            .state('authenticated.layout.dashboard', {
                url: '^/dashboard',
                type: 'authenticated',
                stateName: 'Dashboard',
                template: require('../templates/dashboard.html'),
                controller: 'dashboardCtrl as vm'
            });

        // $urlRouterProvider.when('/project/', '/project/list');
        // $urlRouterProvider.when('/project', '/project/list');
    }
];

},{"../templates/dashboard.html":69}],69:[function(require,module,exports){
module.exports = "<div class=\"dashboard theme1\" ng-init=vm.init()><div class=main-container><div class=dashboard-title><p>Dashboard</p></div><div class=short-cuts><div class=wrapper><div class=short-cut ng-click=vm.goToProjects()><div class=header><div class=details><div class=img-wrapper><img src=./resources/projects-menu.png></div><div class=module-name><p class=heading>PROJECTS</p><p class=sub-heading>Total Count</p></div></div></div><div class=count>18</div></div></div><div class=wrapper><div class=short-cut ng-click=vm.goToContacts()><div class=header><div class=details><div class=img-wrapper><img src=./resources/scontacts-menu.png></div><div class=module-name><p class=heading>CONTACTS</p><p class=sub-heading>Total Count</p></div></div></div><div class=count>66</div></div></div><div class=wrapper><div class=short-cut><div class=header><div class=details><div class=img-wrapper><img src=./resources/files-dash.png></div><div class=module-name><p class=heading>UPDATED FILES</p><p class=sub-heading>Total Count</p></div></div></div><div class=count>122</div></div></div></div><div class=stats><scrollable><div class=state-contnr><div class=active-user><div class=heading><p><span class=number>22</span><span class=text>Active Users</span></p></div><div class=image-contnr><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div></div><div class=more-btn><button>+6 More</button></div></div></div><div class=state-contnr><div class=recent-user><div class=heading><p><span class=number>7</span><span class=text>Recent Logged In Users</span></p></div><div class=image-contnr><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=img-wrapper><img src=./resources/profile.jpg></div></div><div class=more-btn><button>+6 More</button></div></div></div><div class=state-contnr><div class=guest-user><div class=heading><p><span class=number>4</span><span class=text>Guest Users</span></p></div><div class=users-contnr><div class=user><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=details><p class=name>Tamodeep Das</p><p class=designation>Engineer, Innofied PVT Ltd</p></div></div><div class=user><div class=img-wrapper><img src=./resources/profile.jpg></div><div class=details><p class=name>Tamodeep Das</p><p class=designation>Engineer, Innofied PVT Ltd</p></div></div><div class=more-btn><button>+6 More</button></div></div></div></div><div class=state-contnr><div class=project-graph><div id=chart_div></div></div></div></scrollable></div></div><div class=recent-activity><div class=title><p>Recent Activities</p></div><div class=activity-wrapper><scrollable><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div><div class=day-activity><div class=date-time><div class=date><span class=number>25</span><span class=text>Oct</span></div><div class=year>2016</div><div class=day>Monday</div></div><div class=activities><div class=activity><div class=bullet></div><div class=details><p>You have created a project Office Decoration.</p></div></div><div class=activity><div class=bullet></div><div class=details><p>You have uploaded 4 files in the project Office Decoration.</p><div class=file-list><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div><div class=file><div class=extension>XLS</div><div class=name>constractor list.xls</div></div></div></div></div><div class=activity><div class=bullet></div><div class=details><p>You have deleted a project Office Decoration.</p></div></div></div></div></scrollable></div></div></div>";

},{}],70:[function(require,module,exports){
'use strict ';
module.exports = angular.module('modules', [
    require('./common').name,
    require('./theme').name,
    require('./upload').name,
    require('./project').name,
    require('./dashboard').name,
    require('./contact').name
]);

},{"./common":26,"./contact":56,"./dashboard":67,"./project":73,"./theme":85,"./upload":94}],71:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'ProjectService',
    'toaster',
    '$timeout',
    '$uibModal',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        ProjectService,
        toaster,
        $timeout,
        $uibModal
    ) {
        var vm = this;

        vm.init = function() {
            console.log('Inside init');
            $scope.$emit('clearProjectDetails');
            vm.pageNo = 1;
            vm.sortOptions = [{
                value: 0,
                text: "Most Recent"
            }, {
                value: 1,
                text: "Marked Favoutite"
            }];
            vm.sortOption = vm.sortOptions[0];
            vm.perPageItemList = [{
                value: 15,
                text: "15 per page"
            }, {
                value: 25,
                text: "25 per page"
            }, {
                value: 50,
                text: "50 per page"
            }, {
                value: 100,
                text: "100 per page"
            }];
            vm.perPageItem = vm.perPageItemList[0];
            vm.apiObject = {
                params: {},
                headers: {
                    tokenkey: BasicsFactory.getDetails().tokenKey,
                    Page: vm.pageNo,
                    PerPage: vm.perPageItem.value
                }
            };
            getProjectList();
            getCountryList();

            $scope.projectMenuOptions = function(item, idx) {
                var itemSelectedMenu = [
                    ['Edit', function($itemScope, $event, modelValue, text, $li) {
                        vm.editProject(item, idx);
                    }]
                ];

                return itemSelectedMenu;


            }
        };

        function getCountryList() {
            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey
                },
                params: {
                    action: 1//country
                }
            };
            ProjectService.locationList(apiObject)
                .then(function(response) {
                    console.log('response : ', response);
                    response = response[0];
                    vm.countryList = response;
                    vm.country = vm.countryList[0];
                    vm.getStateList(vm.country);
                }, function() {});
        }

        vm.getStateList = function(country, modal) {
            console.log('getStateList : ', country);
            var apiObject = {
                headers: {
                    TokenKey: BasicsFactory.getDetails().tokenKey
                },
                params: {
                    action: 2,//state
                    countryId: country.CountryID
                }
            };
            ProjectService.locationList(apiObject)
                .then(function(response) {
                    console.log('response : ', response);
                    response = response[0];
                    vm.stateList = response;
                    vm.state = vm.stateList[0];
                    if (modal) {
                        modal.stateList = response;
                        modal.state = vm.stateList[0];
                    }
                    console.log('vm = ', vm);
                }, function() {});
        }

        function getProjectList(isEmit) {
            var apiObject = vm.apiObject || {
                params: {},
                headers: {
                    tokenkey: BasicsFactory.getDetails().tokenKey,
                    Page: vm.pageNo,
                    PerPage: vm.perPageItem.value
                }
            };
            ProjectService.projectList(apiObject)
                .then(function(response) {
                        var resHeader = response[2];
                        // console.log(resHeader('Max-Page'));
                        vm.totalCount = vm.perPageItem.value * resHeader('Max-Page');
                        response = response[0];
                        vm.projects = response;
                        (isEmit) && ($scope.$emit('updateProjectList', vm.projects));
                        vm.projects.forEach(function(project) {
                            // console.log('b4 : ', project);
                            var apiObj = {
                                headers: {
                                    TokenKey: BasicsFactory.getDetails().tokenKey
                                },
                                params: {
                                    pinProjectId: project.PINProjectID
                                }
                            };
                            ProjectService.projectDetails(apiObj)
                                .then(function(response) {
                                    console.log('res ', response);
                                    project.details = response[0];
                                });

                            // console.log('ftr : ', project);
                        });
                        // console.log('ProjectResponse : ', response);
                    },
                    function(err) {
                        console.log('ProjectResponse err: ', err);
                    });
        };

        vm.createNewProject = function() {
            vm.projectName = (vm.projectName) ? vm.projectName.trim() : '';
            if (vm.projectName === '') {
                return;
            }
            var cfg = {
                data: {
                    "ProjectName": vm.projectName,
                    "ProjectNumber": ""
                }
            };
            (vm.country) && (cfg.data.CountryName = vm.country.CountryName);
            (vm.state) && (cfg.data.StateName = vm.state.StateName);
            (vm.state) && (cfg.data.StateID = vm.state.StateID);
            ProjectService.createNewProject(cfg)
                .then(
                    function(response) {
                        toaster.pop('success', vm.projectName + ' is successfully created');
                        getProjectList(true);
                        vm.projectName = '';
                    },
                    function(err) {

                    });
        }

        vm.makeItFavourite = function(project) {

            var cfg = {
                params: {
                    pinProjectId: project.PINProjectID,
                    isFavorite: project.IsFavorite
                }
            };
            console.log('Project : ', project, cfg);
            ProjectService.makeItFavourite(cfg)
                .then(
                    function(response) {
                        console.log('Response : ', response);
                    },
                    function(err) {
                        console.log('err : ', err);
                    }
                );
        }

        vm.filterProjectList = function(option) {
            if (option.value === 0) {
                vm.apiObject.params.isFavorite = 0;
            }
            if (option.value === 1) {
                vm.apiObject.params.isFavorite = 1;
            }
            getProjectList();
        }

        vm.searchProject = function() {
            /*if (vm.searchKey.length < 3) {
                return;
            }*/

            vm.searchTimer && clearTimeout(vm.searchTimer);
            vm.searchTimer = setTimeout(function() {
                vm.pageNo = 1;
                vm.apiObject.params.start = vm.searchKey;
                getProjectList();
            }, 1000);
        }

        vm.changePerPageCount = function(item) {
            vm.apiObject.headers.PerPage = item.value;
            vm.pageNo = 1;
            vm.apiObject.headers.Page = 1;
            getProjectList();
        }

        vm.pageChanged = function() {
            vm.apiObject.headers.Page = vm.pageNo;
            getProjectList();
        }

        vm.selectProject = function(project) {

            BasicsFactory.setProjectDetails({
                PINProjectID: project.PINProjectID,
                projectName: project.ProjectName
            })
            $scope.$emit('changeSelectedProject', project);
            $state.go('authenticated.layout.project.upload-view');
        }

        vm.editProject = function(project, idx) {
            var modalInstance = $uibModal
                .open({
                    template: require('../templates/update-project.html'),
                    controller: "projectUpdateCtrl as vm",
                    size: "lg",
                    resolve: {
                        Project: function() {
                            return project;
                        },
                        CountryList: function() {
                            return vm.countryList;
                        },
                        getStateList: function() {
                            return vm.getStateList;
                        },
                        StateList: function() {
                            return vm.stateList;
                        }
                    }
                });
            modalInstance.result.then(function(data) {
                console.log('success', data, idx);
                vm.projects[idx].details = data.project;
                console.log('vm.projects', vm.projects);
                vm.country = data.country;
                vm.state = data.state;
            }, function(data) {});


        }

    }
];

},{"../templates/update-project.html":78}],72:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'ProjectService',
    'toaster',
    '$timeout',
    '$uibModalInstance',
    'Project',
    'CountryList',
    'getStateList',
    'StateList',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        ProjectService,
        toaster,
        $timeout,
        $uibModalInstance,
        Project,
        CountryList,
        getStateList,
        StateList
    ) {
        var vm = this;

        vm.init = function() {
            //Date options
            $scope.today = function() {
                $scope.dt = new Date();
            };
            $scope.property = {
                opened: false
            };
            $scope.today();
            $scope.open = function(property) {
                console.log('property.opened', property);
                property.opened = true;
            };
            $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
            $scope.format = $scope.formats[0];
            $scope.popup1 = {
                opened: false
            };
            $scope.dateOptions = {
                formatYear: 'yy',
                startingDay: 1
            };
            //Date options

            vm.project = Project.details;
            vm.countryList = CountryList;
            vm.stateList = StateList;
            vm.getStateList = getStateList;
            vm.country = vm.countryList[0];
            vm.state = vm.stateList[0];
            console.log('vm.project', vm.project);
        };

        vm.cancel = function() {
            $uibModalInstance.dismiss('cancel');
        };

        vm.editProject = function() {
            var projectDetails = angular.copy(vm.project);
            //insert country and state
            projectDetails.CountryName = vm.country.CountryName;
            projectDetails.StateName = vm.state.StateName;
            projectDetails.StateID = vm.state.StateID;
            //insert city and zip
            projectDetails.city = projectDetails.City;
            projectDetails.zip = projectDetails.Zip;
            delete projectDetails.ProjectOwner;

            ProjectService.editProject({
                data: projectDetails
            }).then(function(response) {
                console.log('Success', response);
                console.log('Project Details', projectDetails);
                $uibModalInstance.close({
                    project: projectDetails,
                    country: vm.country,
                    state: vm.state
                });
            }, function(error) {
                console.log('Error', error);
            })


        }

    }
];

},{}],73:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.project', [
        'ui.router',
        'ui.bootstrap'
    ])
    .controller('projectCtrl', require('./controllers/project'))
    .controller('projectUpdateCtrl', require('./controllers/projectUpdateCtrl'))
    .service('ProjectService', require('./services/project-service'))
    .config(require('./router/route'));

},{"./controllers/project":71,"./controllers/projectUpdateCtrl":72,"./router/route":74,"./services/project-service":75}],74:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        console.log('Project router');
        $stateProvider
            .state('authenticated.layout.project', {
                url: '^/project',
                type: 'authenticated',
                stateName: 'Projects',
                abstract: true,
                template: require('../templates/project-main.html')
            })
            .state('authenticated.layout.project.list', {
                url: '/list',
                type: 'authenticated',
                stateName: 'Projects',
                template: require('../templates/project.html'),
                controller: 'projectCtrl as vm'
            });

        $urlRouterProvider.when('/project/', '/project/list');
        $urlRouterProvider.when('/project', '/project/list');
    }
];

},{"../templates/project-main.html":76,"../templates/project.html":77}],75:[function(require,module,exports){
 'use strict';

 module.exports = [
     'ApiRequestService',
     'API',
     'BasicsFactory',
     function(ApiRequestService, API, BasicsFactory) {
         function projectList(cfg) {
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers || {},
                 params: cfg.params || {},
                 url: API.projectList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function createNewProject(cfg) {
             var headers = {
                     tokenKey: BasicsFactory.getDetails().tokenKey
                 },
                 apiObject = {
                     method: 'POST',
                     headers: headers,
                     params: cfg.params || {},
                     data: cfg.data,
                     url: API.createProject
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function editProject(cfg) {
             var headers = {
                     "tokenKey": BasicsFactory.getDetails().tokenKey,
                     "Content-Type": "application/json"
                 },
                 apiObject = {
                     method: 'POST',
                     headers: headers,
                     params: cfg.params || {},
                     data: cfg.data,
                     url: API.editProject
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function makeItFavourite(cfg) {
             var headers = {
                     tokenkey: BasicsFactory.getDetails().tokenKey
                 },
                 apiObject = {
                     method: 'POST',
                     headers: headers,
                     params: cfg.params || {},
                     data: cfg.data || {},
                     url: API.projectList
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function locationList(cfg) {
             var headers = {
                     tokenkey: BasicsFactory.getDetails().tokenKey
                 },
                 apiObject = {
                     method: 'GET',
                     headers: headers,
                     params: cfg.params || {},
                     data: cfg.data || {},
                     url: API.location
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function projectDetails(cfg) {
             var apiObject = {
                 method: 'GET',
                 headers: cfg.headers,
                 params: cfg.params || {},
                 data: cfg.data || {},
                 url: API.projectList
             };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         function projectRoleList(cfg) {
             var headers = {
                     tokenkey: BasicsFactory.getDetails().tokenKey
                 },
                 apiObject = {
                     method: 'GET',
                     headers: headers,
                     params: cfg.params || {},
                     data: cfg.data || {},
                     url: API.projectRole
                 };

             return ApiRequestService
                 .apiRequest(apiObject);
         }

         return {
             projectList: projectList,
             createNewProject: createNewProject,
             editProject: editProject,
             makeItFavourite: makeItFavourite,
             locationList: locationList,
             projectDetails: projectDetails,
             projectRoleList: projectRoleList
         };
     }
 ];

},{}],76:[function(require,module,exports){
module.exports = "<div><div class=\"project-main-container blue-color-main height-100\" ui-view></div></div>";

},{}],77:[function(require,module,exports){
module.exports = "<div class=\"project doc-container\" ng-init=vm.init()><div class=\"general-upload-header row\"><div class=\"col-sm-6 text-left\"></div><div class=\"col-sm-6 text-right\"><div class=right-header-container>View <button class=\"grid-view-btn view-btn\" ng-class=\"{'view-active': isGrid}\" ng-click=\"isGrid = true\"></button> <span class=ver-divider>|</span> <button class=\"list-view-btn view-btn\" ng-class=\"{'view-active': !isGrid}\" ng-click=\"isGrid = false\"></button></div></div></div><div class=header><div class=\"sort-field field\"><label class=field-label>Sort by</label><div class=btn-group uib-dropdown is-open=status.isopenSort><button id=single-button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.sortOption.text></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button><li role=menuitem ng-repeat=\"option in vm.sortOptions\" ng-click=\"vm.sortOption=option;vm.filterProjectList(option)\"><a href=\"\" ng-bind=option.text></a></li></ul></div></div><div class=\"search-field field\"><label class=field-label>Search Project</label><input type=text name=\"\" class=input-field placeholder=\"Project name\" ng-model=vm.searchKey ng-change=vm.searchProject()> <button class=cross-btn ng-show=vm.searchKey ng-click=\"vm.searchKey='';vm.searchProject()\"><i class=\"fa fa-times\"></i></button></div><div class=\"pull-right double-line\"><div class=\"field button-group\"><button uib-tooltip=\"Create Project\"><img src=./resources/filter.png></button></div><div class=\"field pagination-field\"><ul uib-pagination boundary-links=true total-items=vm.totalCount ng-model=vm.pageNo class=pagination-sm previous-text=&lsaquo; next-text=&rsaquo; first-text=&laquo; last-text=&raquo; max-size=3 ng-change=vm.pageChanged() items-per-page=vm.perPageItem.value></ul></div><div class=\"per-page-field field\"><div class=btn-group uib-dropdown is-open=status.isopenPerPage><button id=single-button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.perPageItem.text></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button ng-model=vm.perPageItem><li role=menuitem ng-repeat=\"item in vm.perPageItemList\" ng-click=\"vm.perPageItem=item;vm.changePerPageCount(item)\"><a href=\"\" ng-bind=item.text></a></li></ul></div></div></div></div><div class=body><div class=body-margin><div class=\"project-wrapper create-project\"><div class=each-project><div class=project-img><img src=\"\"><div class=add-img><div><img src=./resources/plus.png><p>Add Project Image{{vm.totalCount}}</p></div></div></div><div class=project-details><div class=details-header><input type=text name=\"\" placeholder=\"Enter project name\" class=project-name ng-model=vm.projectName></div><div class=details-body><div class=\"details-row country-field\"><label class=project-label>Country</label><div class=btn-group uib-dropdown is-open=status.isopenCountryList><button id=single-button type=button class=btn uib-dropdown-toggle ng-disabled=disabled><span ng-bind=vm.country.CountryName></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button><li role=menuitem ng-repeat=\"option in vm.countryList\" ng-click=\"vm.country=option;vm.getStateList(option)\"><a href=\"\" ng-bind=option.CountryName></a></li></ul></div></div><div class=\"details-row state-field\"><label class=project-label>State</label><div class=btn-group uib-dropdown is-open=status.isopenStateList><button id=single-button type=button class=btn uib-dropdown-toggle xng-disabled=vm.stateList.length><span ng-bind=vm.state.StateName></span> <i class=caret></i></button><ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=single-button><li role=menuitem ng-repeat=\"option in vm.stateList\" ng-click=\"vm.state=option;vm.filterProjectList(option)\"><a href=\"\" ng-bind=option.StateName></a></li></ul></div></div><div class=btn-wrapper><button ng-click=vm.createNewProject()>Create Project</button></div></div></div></div></div><div class=project-wrapper ng-repeat=\"project in vm.projects\" context-menu=\"projectMenuOptions(project, $index)\"><div class=each-project><div class=project-img><img src=./resources/download.jpg style=width:200px;height:130px ng-if=project.coverImage><div class=add-img ng-if=!project.coverImage><div><i class=\"fa fa-plus\"></i><p>Add Project Image</p></div></div></div><div class=project-details ng-click=vm.selectProject(project)><div class=details-header><p class=project-name>{{project.details.ProjectName}}</p><span class=project-bookmark uib-rating ng-model=project.IsFavorite max=1 on-hover=hoveringOver(value) on-leave=\"overStar = null\" titles=\"['Mark As Favourite']\" aria-labelledby=default-rating ng-click=vm.makeItFavourite(project)></span></div><div class=details-body><div class=details-row><label class=project-label>Owner</label><span class=project-value>{{project.ProjectOwner.FirstName}} {{project.ProjectOwner.LastName}}</span></div><div class=details-row><label class=project-label>Storage</label><span class=project-value></span></div><div class=details-row><label class=project-label>Country</label><span class=project-value>{{project.details.CountryName}}</span></div><div class=details-row><label class=project-label>State</label><span class=project-value>{{project.details.StateName}}</span></div></div></div></div></div></div></div></div>";

},{}],78:[function(require,module,exports){
module.exports = "<div class=modal-header ng-init=vm.init()><h3 class=\"text-center modal-title\" id=modal-title>Edit Project</h3></div><div class=\"modal-body project-edit-modal\" id=modal-body><uib-tabset active=active vertical=true><uib-tab index=0 heading=\"Project Info\"><form class=form-horizontal><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=name>Project Name</label><div class=col-sm-10><input type=text class=form-control id=name placeholder=\"Project Name\" ng-model=vm.project.ProjectName></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=projno>Project No</label><div class=\"col-sm-4 padding-right-0\"><input type=text class=form-control id=projno placeholder=\"Project No\" ng-model=vm.project.ProjectNumber></div><label class=\"control-label col-sm-2 date-label\" for=name>Start Date</label><div class=\"col-sm-4 date-field-fix\"><input type=text class=form-control uib-datepicker-popup={{format}} ng-model=dt is-open=property.opened datepicker-options=dateOptions ng-required=true show-button-bar=false close-text=\"Close\"> <span class=\"input-group-btn calendar-icon\"><button type=button class=\"btn btn-default\" ng-click=open(property)><i class=\"fa fa-calendar\"></i></button></span></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=desc>Description</label><div class=col-sm-10><textarea ng-model=vm.project.ProjectDescription class=form-control placeholder=Description></textarea></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=address>Address</label><div class=col-sm-10><input type=text class=form-control id=address placeholder=Address ng-model=vm.project.ProjectAddress1></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=city>City</label><div class=\"col-sm-4 padding-right-0\"><input type=text class=form-control id=city placeholder=City ng-model=vm.project.City></div><label class=\"control-label col-sm-2 pin-label\" for=pincode>Pin</label><div class=\"col-sm-4 padding-right-0\"><input type=text class=form-control id=pincode placeholder=Pincode ng-model=vm.project.Zip></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=country>Country</label><div class=\"col-sm-4 padding-right-0\"><select type=text class=form-control id=country ng-options=\"option.CountryName for option in vm.countryList track by option.CountryID\" ng-change=\"vm.getStateList(vm.country, vm)\" ng-model=vm.country></select></div><label class=\"control-label col-sm-2 pin-label\" for=state>State</label><div class=\"col-sm-4 padding-right-0\"><select type=text class=form-control id=state placeholder=State ng-options=\"option.StateName for option in vm.stateList track by option.StateID\" ng-model=vm.state></select></div></div><div class=\"row form-group text-right bottom-button-panel\"><div class=col-sm-12><button class=\"btn save-btn\" ng-click=vm.editProject()>Save</button> <button class=\"btn cancel-btn\" ng-click=vm.cancel()>Cancel</button></div></div></form></uib-tab><uib-tab index=1 heading=\"Project Owner\"><form class=form-horizontal><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=owner_first>First Name</label><div class=col-sm-10><input type=text class=form-control id=owner_first placeholder=\"First Name\" ng-model=vm.project.ProjectOwner.FirstName></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=owner_last>Last Name</label><div class=col-sm-10><input type=text class=form-control id=owner_last placeholder=\"Last Name\" ng-model=vm.project.ProjectOwner.LastName></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=company>Company</label><div class=col-sm-10><input type=text class=form-control id=company placeholder=Company ng-model=vm.project.ProjectOwner.CompanyName></div></div><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=email>Email</label><div class=\"col-sm-4 padding-right-0\"><input type=email class=form-control id=email placeholder=Email ng-model=vm.project.ProjectOwner.Email></div><label class=\"control-label col-sm-2 pin-label\" for=cell>Cell</label><div class=\"col-sm-4 padding-right-0\"><input type=text class=form-control id=cell placeholder=Cell ng-model=vm.project.ProjectOwner.PhoneMobile></div></div><div class=horizontal-form-line></div><div class=\"replace-area row form-group\"><p class=col-sm-12>Once the new project owner is selected, edit privilege of this project will pass on the new owner</p></div><div class=\"row form-group text-right bottom-button-panel\"><div class=col-sm-12><button class=\"btn save-btn\">Save</button> <button class=\"btn cancel-btn\" ng-click=vm.cancel()>Cancel</button></div></div></form></uib-tab><uib-tab index=2 heading=Invite><form class=form-horizontal><div class=\"row form-group\"><label class=\"control-label col-sm-12 text-left invite-label\" for=owner_first>Project Invitation Message</label><div class=\"col-sm-12 invite-col-sm\"><textarea class=form-control placeholder=Message></textarea></div></div><div class=\"row form-group text-right bottom-button-panel bottom-adust\"><div class=col-sm-12><button class=\"btn save-btn\">Send invitation</button> <button class=\"btn cancel-btn\" ng-click=vm.cancel()>Cancel</button></div></div></form></uib-tab><uib-tab index=3 heading=Settings><form class=form-horizontal><div class=\"row form-group\"><label class=\"control-label col-sm-2\" for=owner_first>Project Status</label><div class=col-sm-7><select class=\"form-control project-status-select\"><option>Active</option></select></div></div><div class=\"row form-group text-right bottom-button-panel bottom-adust\"><div class=col-sm-12><button class=\"btn save-btn\">Save</button> <button class=\"btn cancel-btn\" ng-click=vm.cancel()>Cancel</button></div></div></form></uib-tab></uib-tabset></div>";

},{}],79:[function(require,module,exports){
'use strict';

module.exports = [
    '$window',
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'ProjectService',
    'ThemeFactory',
    function(
        $window,
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        ProjectService,
        ThemeFactory
    ) {
        var vm = this;
        var topElements,
            leftElements;

        vm.init = function() {

            // getProjectList();
            var baseData = BasicsFactory.getDetails(),
                project = {
                    PINProjectID: baseData.PINProjectID,
                    ProjectName: baseData.projectName
                };
            $scope.userName = baseData.personalDetails.FirstName + ' ' + baseData.personalDetails.LastName;

            vm.selectedProject = (project.PINProjectID) ? project : { ProjectName: "Select Project" };


            topElements = ThemeFactory.topElements();


            leftElements = ThemeFactory.leftElements();



            //side Menu Options
            // vm.sideMenuOptions = [{
            //     name: "Dashboard",
            //     badge: 0,
            //     icon: "./resources/dashboard-menu.png",
            //     // active: true,
            //     state: "authenticated.layout.dashboard"
            // }, {
            //     name: "Projects",
            //     badge: 0,
            //     icon: "./resources/projects-menu.png",
            //     state: "authenticated.layout.project.list"
            // }, {
            //     name: "Contact",
            //     badge: 0,
            //     icon: "./resources/scontacts-menu.png",
            //     state: "authenticated.layout.contact.thumbnail"
            // }, {
            //     name: "Message",
            //     badge: 1,
            //     icon: "./resources/message-menu.png",
            //     state: ""
            // }, {
            //     name: "Message Board",
            //     badge: 20,
            //     icon: "./resources/message-board-menu.png",
            //     state: ""
            // }, {
            //     name: "Notifications",
            //     badge: 99,
            //     icon: "./resources/notification-menu.png",
            //     state: ""
            // }];

            //Header Menu options
            // vm.headerMenuOption = [{
            //     name: "Notifications",
            //     badge: 99,
            //     icon: "./resources/notification2.png",
            //     state: "",
            //     class: "notification"
            // }, {
            //     name: "Message",
            //     badge: 1,
            //     icon: "./resources/meg.png",
            //     state: "",
            //     class: "message"
            // }, {
            //     name: "Dashboard",
            //     badge: 0,
            //     state: "authenticated.layout.dashboard",
            //     class: "dashboard"
            // }, {
            //     name: "Contact",
            //     badge: 0,
            //     state: "authenticated.layout.contact.thumbnail",
            //     class: "contact"
            // }];
            topElements.forEach(function(val, idx) {
                val.class = "dashboard";
                if (idx === 0) {
                    val.active = true;
                }
            })
            vm.headerMenuOption = topElements;
            vm.sideMenuOptions = leftElements;
            console.log('headerMenuOption', vm.headerMenuOption);


            // vm.changeActiveOption();
            $rootScope.$on('ActiveMenuOption', vm.changeActiveOption);
            $scope.$on('clearProjectDetails', vm.clearProjectDetails);
            $scope.$on('changeSelectedProject', changeSelectedProject);
            $scope.$on('updateProjectList', setNewProjectList);
            vm.isCollapsed = (window.innerWidth < 1140);
            vm.isVisible = !(window.innerWidth < 1080);
            $(window).on('resize', function() {
                vm.isCollapsed = (window.innerWidth < 1140);
                vm.isVisible = !(window.innerWidth < 1080);
                $scope.$apply();
            });
        }

        vm.clearProjectDetails = function() {
            console.log("clearProjectDetails ----------->");
            BasicsFactory.clearProjectDetails();
            vm.selectedProject = { ProjectName: "Select Project" };
        }

        vm.changeActiveOption = function(e, state) {
            state = (state) ? state : $state.current;
            vm.sideMenuOptions.forEach(function(each) {

                console.log("State : ", state.stateName, each.name, state.stateName === each.name);
                if (each.name === state.stateName) {
                    each.active = true;
                } else {
                    each.active = false;
                }

            });

            vm.headerMenuOption.forEach(function(each) {

                console.log("State : ", state.stateName, each.name, state.stateName === each.name);
                if (each.name === state.stateName) {
                    each.active = true;
                } else {
                    each.active = false;
                }

            })

        }

        vm.gotoState = function(option) {
            if (option.name.trim() === "Dashboard") {
                $state.go('authenticated.layout.dashboard');
            } else if (option.name.trim() === "Project") {
                $state.go('authenticated.layout.project.list');
            } else if (option.name.trim() === "Contact") {
                $state.go('authenticated.layout.contact.thumbnail.details');
            }
        }

        vm.doLogOut = function() {
            BasicsFactory.clearUserDetails();
            $state.go('public.login');
        }

        vm.selectProject = function(project) {
            console.log("Project : ", project);
            BasicsFactory.setProjectDetails({
                PINProjectID: project.PINProjectID,
                projectName: project.ProjectName
            })

            $state.go('authenticated.layout.project.upload-view', {}, { reload: true });
        }

        function changeSelectedProject(e, project) {
            console.log("changeSelectedProject ------------> ");
            vm.selectProject(project);
            vm.projects.forEach(function(each) {
                if (each.PINProjectID === project.PINProjectID) {
                    vm.selectedProject = each;
                }
            });
        }

        function setNewProjectList(e, projects) {
            vm.projects = projects;
        }

        /* function getProjectList() {
             var apiObject = vm.apiObject || {
                 params: {},
                 headers: {
                     tokenkey: BasicsFactory.getDetails().tokenKey,
                     Page: vm.pageNo || 1,
                     PerPage: 100
                 }
             };
             ProjectService.projectList(apiObject)
                 .then(function(response) {
                         response = response[0];
                         vm.projects = response;
                         // vm.selectedProject = vm.projects[0];
                          vm.projects.forEach(function(project) {
                              console.log('b4 : ', project);
                              var apiObj = {
                                  headers: {
                                      TokenKey: BasicsFactory.getDetails().tokenKey
                                  },
                                  params: {
                                      pinProjectId: project.PINProjectID
                                  }
                              };
                              ProjectService.projectDetails(apiObj)
                                  .then(function(response) {
                                      console.log('res ', response);
                                      project.details = response[0];
                                  });

                              console.log('ftr : ', project);
                          });
                         console.log('ProjectResponse : ', response);
                     },
                     function(err) {
                         console.log('ProjectResponse err: ', err);
                     });
         };*/
    }
];

},{}],80:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'CustomTemplateService',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        CustomTemplateService
    ) {
        var vm = this,
            selectedIndex;
        vm.templates = [];
        vm.test = "abc";
        vm.firstName = BasicsFactory.getDetails().personalDetails.FirstName;
        $rootScope.customTemplateStep = 0;

        vm.init = function() {
            console.log('Inside init');
            selectedIndex = 0;
            CustomTemplateService.getMasterTemplate({}).then(function(response) {
                console.log('Response master template', response);
                vm.templates = response[0].data.masterTemplates;
                vm.templates.forEach(function(val, idx) {
                    val.imgSrc = 'resources/theme/template' + (idx + 1) + '.png';
                })
                vm.selectedTemplate = vm.templates[selectedIndex];
            }, function(error) {
                console.log('Master template error', error);
            })
        }


        vm.selectTemplate = function(idx) {
            vm.templates[selectedIndex].isSelected = false;
            vm.templates[idx].isSelected = true;
            selectedIndex = idx;
            vm.selectedTemplate = vm.templates[selectedIndex];
        }
        vm.createTheme = function() {
            $state.go('authenticated.theme.step2');
        }
        vm.goToDashboard = function() {
            var templateData = {};

            templateData.data = {
                copyMaster: true,
                PWUserId: BasicsFactory.getDetails().PWAccountID,
                defaultTemplateId: vm.selectedTemplate.TemplateId
            }

            CustomTemplateService.addCustomTemplate(templateData).then(function(response) {
                console.log('Success', response[0]);
                $state.go('authenticated.layout.dashboard');
            }, function(error) {
                console.log('Custom template error', error);
            })
        }

    }
];

},{}],81:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    '$state',
    'ThemeFactory',
    function(
        $rootScope,
        $scope,
        $state,
        ThemeFactory
    ) {
        var vm = this,
            textureIdx,
            colorIdx;
        $rootScope.customTemplateStep = 1;
        vm.colors = [];

        function saveState() {
            ThemeFactory.background({
                color: vm.colors[colorIdx],
                colorIdx: colorIdx,
                texture: vm.textures[textureIdx],
                textureIdx: textureIdx
            })
        }

        vm.init = function() {
            vm.colors = [{
                color: '1',
                code: '#ef292a'
            }, {
                color: '2',
                code: '#fc1e3f'
            }, {
                color: '3',
                code: '#fce94f'
            }, {
                color: '4',
                code: '#8ae234'
            }, {
                color: '5',
                code: '#739fd0'
            }, {
                color: '6',
                code: '#ae7fa9'
            }, {
                color: '7',
                code: '#888a85'
            }, {
                color: '8',
                code: '#eeeece'
            }, {
                color: '9',
                code: '#cc0001'
            }, {
                color: '10',
                code: '#f57800'
            }, {
                color: '11',
                code: '#edd300'
            }, {
                color: '12',
                code: '#73d216'
            }, {
                color: '13',
                code: '#3466a5'
            }, {
                color: '14',
                code: '#75507b'
            }, {
                color: '15',
                code: '#555754'
            }, {
                color: '16',
                code: '#d4d7d0'
            }, {
                color: '17',
                code: '#a40000'
            }, {
                color: '18',
                code: '#cf5c01'
            }, {
                color: '19',
                code: '#c4a001'
            }, {
                color: '20',
                code: '#4f9b07'
            }, {
                color: '21',
                code: '#214a88'
            }, {
                color: '22',
                code: '#5b3566'
            }, {
                color: '23',
                code: '#2f3437'
            }, {
                color: '24',
                code: '#babdb6'
            }];
            vm.textures = [{
                code: '1',
                url: './resources/texture/texture_bg1.png'
            }, {
                code: '2',
                url: './resources/texture/texture_bg2.png'
            }, {
                code: '3',
                url: './resources/texture/texture_bg3.png'
            }, {
                code: '4',
                url: './resources/texture/texture_bg4.png'
            }, {
                code: '5',
                url: './resources/texture/texture_bg5.png'
            }, {
                code: '6',
                url: './resources/texture/texture_bg6.png'
            }, {
                code: '7',
                url: './resources/texture/texture_bg7.png'
            }, {
                code: '8',
                url: ''
            }]
            colorIdx = 9;
            textureIdx = 7;
            if (Object.keys(ThemeFactory.background()).length) {
                //Set existing details
                textureIdx = ThemeFactory.background().textureIdx;
                colorIdx = ThemeFactory.background().colorIdx;

            }
            vm.textures[textureIdx].isSelected = true;
            vm.colors[colorIdx].isSelected = true;
            saveState();
        }

        vm.selectTexture = function(texture, idx) {
            vm.textures[textureIdx].isSelected = false;
            texture.isSelected = true;
            textureIdx = idx;
            saveState();
        }
        vm.selectColor = function(color, idx) {
            vm.colors[colorIdx].isSelected = false;
            color.isSelected = true;
            colorIdx = idx;
            saveState();
        }
        vm.nextstep = function() {
            saveState();
            $state.go('authenticated.theme.step3');
        }



    }
];

},{}],82:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    'ThemeFactory',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state,
        ThemeFactory
    ) {
        var vm = this;
        vm.elements = [];
        $rootScope.customTemplateStep = 2;

        $scope.dragTopControlListeners = {
            accept: function(sourceItemHandleScope, destSortableScope) {
                return boolean
            }, //override to determine drag is allowed or not. default is true.
            itemMoved: function(event) {},
            orderChanged: function(event) {},
            clone: true, //optional param for clone feature.
            allowDuplicates: false //optional param allows duplicates to be dropped.
        };

        $scope.dragLeftControlListeners = {
            accept: function(sourceItemHandleScope, destSortableScope) {
                return boolean
            }, //override to determine drag is allowed or not. default is true.
            itemMoved: function(event) {},
            orderChanged: function(event) {},
            clone: true, //optional param for clone feature.
            allowDuplicates: false //optional param allows duplicates to be dropped.
        };

        function saveState() {
            ThemeFactory.elements(vm.elements);
            ThemeFactory.topElements(vm.topElements);
            ThemeFactory.bottomElements(vm.bottomElements);
            ThemeFactory.leftElements(vm.leftElements);
            ThemeFactory.rightElements(vm.rightElements);
        }

        vm.init = function() {
            vm.elements = [{
                'name': 'Dashboard',
                'icon': './resources/dashboard-menu.png'
            }, {
                'name': 'Project',
                'icon': './resources/projects-menu.png'
            }, {
                'name': 'Contact',
                'icon': './resources/scontacts-menu.png'
            }, {
                'name': 'Messages',
                'icon': './resources/message-menu.png'
            }, {
                'name': 'Notification',
                'icon': './resources/notification-menu.png'
            }];
            vm.topElements = [];
            vm.bottomElements = [];
            vm.leftElements = [];
            vm.rightElements = [];

            if (ThemeFactory.topElements().length || ThemeFactory.bottomElements().length || ThemeFactory.leftElements().length || ThemeFactory.rightElements().length) {
                vm.elements = [];
            }
            if (ThemeFactory.elements().length) {
                vm.elements = ThemeFactory.elements();
            }
            if (ThemeFactory.topElements().length) {
                vm.topElements = ThemeFactory.topElements();
            }
            if (ThemeFactory.bottomElements().length) {
                vm.bottomElements = ThemeFactory.bottomElements();
            }
            if (ThemeFactory.leftElements().length) {
                vm.leftElements = ThemeFactory.leftElements();
            }
            if (ThemeFactory.rightElements().length) {
                vm.rightElements = ThemeFactory.rightElements();
            }
            saveState();
        }

        vm.elementDropped = function(data, to) {
            var idx;
            if (data.pos === to) {
                //Do nothing
            } else {
                if (data.pos === 'top') {
                    idx = vm.topElements.indexOf(data.data);
                    vm.topElements.splice(idx, 1);
                } else if (data.pos === 'center') {
                    idx = vm.elements.indexOf(data.data);
                    vm.elements.splice(idx, 1);
                } else if (data.pos === 'bottom') {
                    idx = vm.bottomElements.indexOf(data.data);
                    vm.bottomElements.splice(idx, 1);
                } else if (data.pos === 'right') {
                    idx = vm.rightElements.indexOf(data.data);
                    vm.rightElements.splice(idx, 1);
                } else if (data.pos === 'left') {
                    idx = vm.leftElements.indexOf(data.data);
                    vm.leftElements.splice(idx, 1);
                }
                if (to === 'top') {
                    if (vm.topElements.indexOf(data.data) === -1) {
                        vm.topElements.push(data.data);
                    }
                } else if (to === 'left') {
                    if (vm.leftElements.indexOf(data.data) === -1) {
                        vm.leftElements.push(data.data);
                    }
                } else if (to === 'center') {
                    vm.elements.push(data.data);
                } else if (to === 'right') {
                    if (vm.rightElements.indexOf(data.data) === -1) {
                        vm.rightElements.push(data.data);
                    }
                } else if (to === 'bottom') {
                    if (vm.bottomElements.indexOf(data.data) === -1) {
                        vm.bottomElements.push(data.data);
                    }
                }

            }
        }
        vm.nextstep = function() {
            saveState();
            $state.go('authenticated.theme.step4');
        }

    }
];

},{}],83:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    'ThemeFactory',
    '$state',
    'CustomTemplateService',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        ThemeFactory,
        $state,
        CustomTemplateService
    ) {
        var vm = this;
        $rootScope.customTemplateStep = 3;

        vm.init = function() {
            vm.themeName = "";

        }

        vm.saveDetails = function() {
            var templateConfig = ThemeFactory.getDetails(),
                templateData = {};
            vm.themeName = vm.themeName.trim();
            templateData.data = {
                PWUserId: BasicsFactory.getDetails().PWAccountID,
                templateConfig: templateConfig
            };
            if (Object.keys(templateConfig.background).length) {
                CustomTemplateService.addCustomTemplate(templateData).then(function(response) {
                    console.log('Success', response[0]);
                    $state.go('authenticated.layout.dashboard');
                }, function(error) {
                    console.log('Custom template error', error);
                })
            }
        }

    }
];

},{}],84:[function(require,module,exports){
'use strict';

module.exports = [
    '$rootScope',
    '$scope',
    'BasicsFactory',
    '$state',
    function(
        $rootScope,
        $scope,
        BasicsFactory,
        $state
    ) {
        var vm = this;
        $scope.customTemplateBreadcrumb = [{
            title: 'Theme Color',
            link: 'authenticated.theme.step2'
        }, {
            title: 'Arrange Panels',
            link: 'authenticated.theme.step3'
        }, {
            title: 'Save',
            link: 'authenticated.theme.step4'
        }]

        function init() {}

        vm.goToStep = function(breadcrumb) {
            $state.go(breadcrumb.link);
        }

    }
];

},{}],85:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.theme', [
        'ui.router',
        'ui.bootstrap'
    ])
    .controller('themeStepCtrl', require('./controllers/themeStepCtrl.js'))
    .controller('themeStep1Ctrl', require('./controllers/themeStep1Ctrl.js'))
    .controller('themeStep2Ctrl', require('./controllers/themeStep2Ctrl.js'))
    .controller('themeStep3Ctrl', require('./controllers/themeStep3Ctrl.js'))
    .controller('themeStep4Ctrl', require('./controllers/themeStep4Ctrl.js'))
    .controller('layoutCtrl', require('./controllers/layoutCtrl.js'))
    .config(require('./router/route'));

},{"./controllers/layoutCtrl.js":79,"./controllers/themeStep1Ctrl.js":80,"./controllers/themeStep2Ctrl.js":81,"./controllers/themeStep3Ctrl.js":82,"./controllers/themeStep4Ctrl.js":83,"./controllers/themeStepCtrl.js":84,"./router/route":86}],86:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('authenticated.theme', {
                url: '^/theme',
                type: 'authenticated',
                stateName: 'Theme',
                template: require('../templates/theme-home.html'),
                abstract: true,
                controller: 'themeStepCtrl as vm'
            })
            .state('authenticated.theme.step1', {
                url: '/step1',
                type: 'authenticated',
                stateName: 'ThemeStep1',
                template: require('../templates/theme-step1.html'),
                controller: 'themeStep1Ctrl as vm'
            })
            .state('authenticated.theme.step2', {
                url: '/step2',
                type: 'authenticated',
                stateName: 'ThemeStep2',
                template: require('../templates/theme-step2.html'),
                controller: 'themeStep2Ctrl as vm'
            })
            .state('authenticated.theme.step3', {
                url: '/step3',
                type: 'authenticated',
                stateName: 'ThemeStep3',
                template: require('../templates/theme-step3.html'),
                controller: 'themeStep3Ctrl as vm'
            })
            .state('authenticated.theme.step4', {
                url: '/step4',
                type: 'authenticated',
                stateName: 'ThemeStep4',
                template: require('../templates/theme-step4.html'),
                controller: 'themeStep4Ctrl as vm'
            })
            .state('authenticated.layout', {
                url: '^/layout',
                abstract: true,
                type: "authenticated",
                template: require('../templates/theme1-layout.html'),
                controller: "layoutCtrl as vm"
            });

        $urlRouterProvider.when('/theme', '/step1');
    }
];

},{"../templates/theme-home.html":87,"../templates/theme-step1.html":88,"../templates/theme-step2.html":89,"../templates/theme-step3.html":90,"../templates/theme-step4.html":91,"../templates/theme1-layout.html":92}],87:[function(require,module,exports){
module.exports = "<div class=\"theme-main-container xcontainer-fluid\"><div class=\"common-header xrow\"><div class=col-xs-4><img class=logo-img src=resources/theme/skysite-logo.png></div><div class=col-xs-4></div><div class=col-xs-4>Dropdown</div></div><div><div class=custom-template-breadcrumb ng-if=$root.customTemplateStep><div class=\"pre-header-template hide\">Customize Theme</div><ol class=breadcrumb><li ng-repeat=\"template in customTemplateBreadcrumb\"><a ng-class=\"{'active': $root.customTemplateStep==($index+1)}\" ng-click=vm.goToStep(template)>{{template.title}}</a></li></ol></div><div class=xcontainer><div ui-view></div></div></div></div>";

},{}],88:[function(require,module,exports){
module.exports = "<div class=\"theme-step1-container container\" ng-init=vm.init()><div class=\"theme-select text-center\"><div>{{vm.selectedTemplate.TemplateName}} loaded</div></div><div class=welcome-text><div class=\"name text-center\">Hello {{vm.firstName}},</div><p class=text-center>You can create your custom theme or you can choose an existing one!</p></div><div class=\"own-theme-btn text-center\"><button class=\"btn btn-primary create-btn\" ng-click=vm.createTheme()>Create your own theme</button></div><p class=\"text-center pick\">Or pick a template you like.</p><div class=\"xrow template-selection-row\"><div ng-repeat=\"template in vm.templates\" class=\"col-sm-6 col-md-3 text-center template-img-container\" ng-click=vm.selectTemplate($index) ng-class=\"{'selected':template.isSelected}\"><img class=template-img ng-src={{template.imgSrc}}><p class=text-center>{{template.TemplateName}}</p><img class=theme-selected-tick src=resources/theme/theme-active.png></div></div><div class=\"next-btn-container text-right row\"><div class=col-sm-12><button class=\"btn btn-primary next-btn\" ng-click=vm.goToDashboard()>Next</button></div></div></div>";

},{}],89:[function(require,module,exports){
module.exports = "<div class=theme-step2-container ng-init=vm.init()><div class=step2-top-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\"></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div><div class=step2-middle-section><div class=\"col-sm-1 left-panel-drop height-100\"></div><div class=\"col-sm-10 center-main-panel height-100\"><div class=\"center-header text-center\">Choose your preferable color and texture for your theme</div><div class=\"row color-texture-container\"><div class=col-md-6><p class=color-container>Pick a template color you like</p><div class=color-list><div ng-repeat=\"color in vm.colors\" ng-class=\"{'selected': color.isSelected}\" class=color-list-item style=background:{{color.code}} ng-click=\"vm.selectColor(color, $index)\"><img src=./resources/tick_white.png ng-if=color.isSelected></div></div></div><div class=col-md-6><p class=template-container>Pick a background texture you like</p><div class=texture-list><div ng-repeat=\"texture in vm.textures\" ng-class=\"{'selected': texture.isSelected}\" class=texture-list-item style=background-image:url({{texture.url}}) ng-click=\"vm.selectTexture(texture, $index)\"><img src=./resources/tick_gray.png ng-if=texture.isSelected></div></div></div></div><div class=\"next-btn-container text-right\"><button class=\"btn btn-primary next-btn\" ng-click=vm.nextstep()>Next</button></div></div><div class=\"col-sm-1 right-panel-drop height-100\"></div></div><div class=step2-bottom-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\"></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div></div>";

},{}],90:[function(require,module,exports){
module.exports = "<div class=\"theme-step2-container theme-step3-container\" ng-init=vm.init()><div class=step2-top-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\" ng-drop=true ng-drop-data=\"{pos: 'top'}\" ng-drop-success=\"vm.elementDropped($data,'top')\"><div class=\"top-down-panel-name height-100 text-center\" data-as-sortable=board.dragTopControlListeners data-ng-model=vm.topElements><div class=name ng-if=!vm.topElements.length>Top Panel</div><div ng-repeat=\"ele in vm.topElements\" class=\"top-list-container height-100\" ang-drag=true ang-drag-data=\"{data: ele, pos: 'top'}\" ng-if=vm.topElements.length data-as-sortable-item><div class=\"top-list height-100\" style=background-image:url({{ele.icon}}) data-as-sortable-item-handle></div><button class=cross-btn ng-click=\"vm.elementDropped({data: ele, pos: 'top'}, 'center')\"><i class=\"fa fa-times\" aria-hidden=true></i></button></div></div></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div><div class=step2-middle-section><div class=\"col-sm-1 left-panel-drop height-100\"><div class=display-table><div class=display-table-cell ng-drop=true ng-drop-success=\"vm.elementDropped($data,'left')\" data-as-sortable=board.dragLeftControlListeners data-ng-model=vm.leftElements><div class=\"left-right-panel-name text-center\" ng-if=!vm.leftElements.length><div class=\"name height-100\">Left Panel</div></div><div class=right-list-container ng-if=vm.leftElements.length><div class=right-list ng-repeat=\"ele in vm.leftElements\" ang-drag=true ang-drag-data=\"{data: ele, pos: 'left'}\" data-as-sortable-item><div data-as-sortable-item-handle style=\"background-image:url({{ele.icon}}); background-repeat: no-repeat; width:100%; min-height: 20px; height: 100%\"></div><button class=cross-btn ng-click=\"vm.elementDropped({data: ele, pos: 'left'}, 'center')\"><i class=\"fa fa-times\" aria-hidden=true></i></button></div></div></div></div></div><div class=\"col-sm-10 center-main-panel height-100\" ang-drop=true ang-drop-success=\"vm.elementDropped($data, 'center')\"><div class=\"center-header text-center\">Drag your preferable features to the Left, Top, Right and Left Panel.</div><div class=element-container><div ng-repeat=\"element in vm.elements\" class=element-item style=background-image:url({{element.icon}}) ng-drag=true ng-drag-data=\"{data: element, pos: 'center'}\"><div class=element-name>{{element.name}}</div></div></div><div class=\"next-btn-container text-right center-next-btn\"><button class=\"btn btn-primary next-btn\" ng-click=vm.nextstep()>Next</button></div></div><div class=\"col-sm-1 right-panel-drop height-100\"><div class=display-table><div class=display-table-cell ng-drop=true ng-drop-success=\"vm.elementDropped($data,'right')\"><div class=\"left-right-panel-name text-center\" ng-if=!vm.rightElements.length><div class=name>Right Panel</div></div><div class=right-list-container ng-if=vm.rightElements.length><div class=right-list ng-repeat=\"ele in vm.rightElements\" style=background-image:url({{ele.icon}}) ng-drag=true ng-drag-data=\"{data: ele, pos: 'right'}\"></div></div></div></div></div></div><div class=step2-bottom-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\" ng-drop=true ng-drop-data=\"{pos: 'bottom'}\" ng-drop-success=\"vm.elementDropped($data,'bottom')\"><div class=\"top-down-panel-name height-100 text-center\"><div class=name ng-if=!vm.bottomElements.length>Bottom Panel</div><div class=\"top-list-container height-100\" ng-if=vm.bottomElements.length ng-repeat=\"ele in vm.bottomElements\" ng-drag=true ng-drag-data=\"{data: ele, pos: 'bottom'}\"><div class=\"top-list height-100\" style=background-image:url({{ele.icon}})></div></div></div></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div></div>";

},{}],91:[function(require,module,exports){
module.exports = "<div class=theme-step2-container ng-init=vm.init()><div class=step2-top-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\"></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div><div class=step2-middle-section><div class=\"col-sm-1 left-panel-drop height-100\"></div><div class=\"col-sm-10 center-main-panel height-100\"><div class=display-table><div class=display-table-cell><p>Enter a name of your theme and save</p><input class=theme-name ng-model=vm.themeName type=text name=\"\" placeholder=\"Enter Theme Name\"> <button ng-click=vm.saveDetails() class=\"btn btn-primary save-btn\" ng-disabled=\"vm.themeName.length==0\">SAVE</button></div></div></div><div class=\"col-sm-1 right-panel-drop height-100\"></div></div><div class=step2-bottom-section><div class=\"col-sm-1 left-spacing-adjust height-100\"></div><div class=\"col-sm-10 center-spacing-adjust height-100\"></div><div class=\"col-sm-1 right-spacing-adjust height-100\"></div></div></div>";

},{}],92:[function(require,module,exports){
module.exports = "<div class=layout1 ng-init=vm.init() ng-class=\"{'collapsed-menu':vm.isCollapsed}\"><div class=header-block><img src=./resources/theme/skysite-logo.png class=logo-img><ul class=menu><li class=global-search><input type=text name=\"\" placeholder=Search> <img src=./resources/search.png></li><li ng-repeat=\"option in  vm.headerMenuOption \" class={{option.class}}-option ng-class=\"{'active': option.active}\" ng-click=vm.gotoState(option) tooltip-placement=bottom uib-tooltip={{option.name}}><img class=option-icon-image ng-if=option.icon ng-src={{option.icon}}></li><li class=other-option><img src=./resources/more-horizontal.png></li></ul></div><div class=body-block><div class=menu-block><div class=menu-header><div class=profile-info><div class=pic-wrapper><img src=./resources/himadri.jpg class=profile-pic></div><div class=user-info><p class=name>{{userName}}</p><p class=designation><span>India&nbsp;</span><span>Head, ARC</span></p></div></div><div class=options><button class=settings><img src=./resources/settings.png> <span>Settings</span></button> <button class=logout ng-click=vm.doLogOut()><img src=./resources/logout.png> <span>Logout</span></button></div></div><div class=menu-options><scrollable><ul><li class=options ng-repeat=\"option in vm.sideMenuOptions\" ng-class=\"{'active': option.active}\" ng-click=vm.gotoState(option)><a xui-sref=option.state><div class=img-wrapper><img ng-src={{option.icon}}></div><div class=details><span ng-bind=option.name></span><div class=badge ng-show=option.badge ng-bind=option.badge></div></div></a></li></ul></scrollable></div><div class=menu-footer ng-show=vm.isVisible><button class={{vm.isCollapsed}} ng-click=\"vm.isCollapsed = !vm.isCollapsed\"><img src=./resources/arrow-left-double.png></button></div></div><div class=main-block ui-view></div><div class=footer><ul><li>Support</li><li>Help</li><li>Feedback</li><li>Terms &amp; Use</li><li>Utilities</li></ul><p>&copy; 2016 ARC Document Solutions</p></div></div></div>";

},{}],93:[function(require,module,exports){
module.exports = [
    '$window',
    '$state',
    '$rootScope',
    '$scope',
    '$state',
    'LoginService',
    'BasicsFactory',
    function($window, $state, $rootScope, $scope, $state, LoginService, BasicsFactory) {
        console.log('Upload View Controller');
    }
]

},{}],94:[function(require,module,exports){
'use strict';
// Module defination as well as defination for all the directives, controllers for this moduls

module.exports = angular.module('modules.upload', [
        'ui.router',
        'ui.bootstrap'
    ])
    .controller('uploadViewCtrl', require('./controllers/uploadViewCtrl.js'))
    .config(require('./router/route'));

},{"./controllers/uploadViewCtrl.js":93,"./router/route":95}],95:[function(require,module,exports){
module.exports = ['$stateProvider',
    '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        $stateProvider
            .state('authenticated.layout.project.upload-view', {
                url: '/upload-view',
                type: 'authenticated',
                stateName: 'Projects',
                template: require('../templates/upload-view.html'),
                // abstract: true,
                controller: 'uploadViewCtrl as vm'
            });

        // $urlRouterProvider.when('/theme', '/step1');
    }
];

},{"../templates/upload-view.html":96}],96:[function(require,module,exports){
module.exports = "<div class=\"upload-widget-container height-100\"><div class=\"upload-functionality height-100\" file-upload></div></div>";

},{}],97:[function(require,module,exports){
'use strict';

module.exports = [{

}];

},{}],98:[function(require,module,exports){
module.exports = angular.module("dropbox-picker", []).provider("DropBoxSettings", function() {
        this.box_linkType = 'shared', this.box_multiselect = 'true', this.box_clientId = null, this.linkType = 'preview', this.multiselect = false, this.extensions = ['.pdf', '.doc', '.docx'], this.$get = function() {
                return {
                    linkType: this.linkType,
                    multiselect: this.multiselect,
                    extensions: this.extensions,
                    box_linkType: this.box_linkType,
                    box_multiselect: this.box_multiselect,
                    box_clientId: this.box_clientId

                }
            },
            this.configure = function(e) {
                for (key in e) this[key] = e[key]
            }

    })
    .directive("dropBoxPicker", ["DropBoxSettings",
        function(DropBoxSettings) {
            return {
                restrict: "A",
                scope: {
                    dbpickerFiles: "=",
                    onCancel: '&',
                    onPicked: '&'
                },
                link: function(scope, element, attrs) {
                    function instanciate() {
                        Dropbox.choose(dropboxOptions);
                    }
                    var dropboxOptions = {
                        success: dropboxsuccess,
                        cancel: dropboxCancel,
                        linkType: DropBoxSettings.linkType,
                        multiselect: DropBoxSettings.multiselect,
                        extensions: DropBoxSettings.extensions,
                    };

                    function dropboxsuccess(files) {
                        (scope.onPicked || angular.noop)({ docs: files });
                        scope.$apply();
                    };

                    function dropboxCancel() {
                        (scope.onCancel || angular.noop)();
                        scope.$apply();
                    };

                    element.bind("click", function() {
                        instanciate()
                    })
                }
            }
        }
    ])
    .directive("boxPicker", ["DropBoxSettings",
        function(DropBoxSettings) {
            return {
                restrict: "A",
                scope: {
                    boxpickerFiles: "=",
                    onCancel: '&',
                    onPicked: '&'
                },
                link: function(scope, element, attrs) {
                    function instanciate() {
                        var success = false;
                        var boxSelect = new BoxSelect(boxoptions);
                        boxSelect.launchPopup();
                        boxSelect.success(function(files) {
                            console.log('scope : ', scope);
                            if (!success) {
                                boxSelect.closePopup();
                                (scope.onPicked || angular.noop)({ docs: files });
                                success = true;
                                scope.$apply();
                            }
                        });
                        boxSelect.cancel(function() {
                            console.log("The user clicked cancel or closed the popup");
                            boxSelect.closePopup();
                            (scope.onCancel || angular.noop)();
                            scope.$apply();
                        });
                    }

                    function successCallbackFunction() {
                        boxSelect.closePopup();
                    }

                    var boxoptions = {
                        clientId: DropBoxSettings.box_clientId,
                        linkType: DropBoxSettings.box_linkType,
                        multiselect: DropBoxSettings.box_multiselect
                    };
                    element.bind("click", function() {
                        instanciate()
                    })
                }
            }
        }
    ])

},{}],99:[function(require,module,exports){
'use strict ';
module.exports = angular.module('util', [
        require('./dropbox-picker').name
    ])
    .constant('ErrorLib', require('./constants/error-lib'));

},{"./constants/error-lib":97,"./dropbox-picker":98}],100:[function(require,module,exports){

  'use strict';

  function getDateString(config) {
    var date = new Date(config.date),
      dateObject, months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];


    dateObject = {
      dd: date.getDate(),
      mm: date.getMonth() + 1,
      yy: date.getFullYear(),
      HH: date.getHours(),
      MN: date.getMinutes(),
      SS: date.getSeconds(),
    };

    if (dateObject.HH > 11) {
      dateObject.hh = 12 + dateObject.HH - 24;
      dateObject.AMPM = 'PM';
    } else {
      dateObject.hh = dateObject.HH;
      dateObject.AMPM = 'AM';
    }

    //find occurance of A exactly 1 times
    if (!/A{2}/i.test(config.format)) {
      config.format = config.format.replace(/A/ig, dateObject.AMPM);
    }

    //find occurance of s at least one and not more than 2
    if (/s+/i.test(config.format) && !(/s{3}/i.test(config.format))) {
      if (/s{2}/i.test(config.format)) {
        //find occurance of s exactly 2 times
        config.format = config.format.replace(/ss/ig, dateObject.SS > 9 ? dateObject.SS : '0' + dateObject.SS);
      } else {
        //find occurance of s exactly 1 times
        config.format = config.format.replace(/s/ig, dateObject.SS);
      }
    }

    //find occurance of h at least one and not more than 2
    if (/h+/.test(config.format) && !(/h{3}/.test(config.format))) {
      if (/h{2}/.test(config.format)) {
        //find occurance of h exactly 2 times
        config.format = config.format.replace(/hh/g, dateObject.hh > 9 ? dateObject.hh : '0' + dateObject.hh);
      } else {
        //find occurance of h exactly 1 times
        config.format = config.format.replace(/h/g, dateObject.hh);
      }
    }

    //find occurance of H at least one and not more than 2
    if (/H+/.test(config.format) && !(/H{3}/.test(config.format))) {
      if (/H{2}/.test(config.format)) {
        //find occurance of H exactly 2 times
        config.format = config.format.replace(/HH/g, dateObject.HH > 9 ? dateObject.HH : '0' + dateObject.HH);
      } else {
        //find occurance of H exactly 1 times
        config.format = config.format.replace(/HH/g, dateObject.HH);
      }
    }

    //find occurance of T at least one and not more than 2
    if (/T+/ig.test(config.format) && !(/T{3}/ig.test(config.format))) {
      if (/T{2}/i.test(config.format)) {
        //find occurance of T exactly 2 times
        config.format = config.format.replace(/tt/ig, dateObject.MN > 9 ? dateObject.MN : '0' + dateObject.MN);
      } else {
        //find occurance of T exactly 1 times
        config.format = config.format.replace(/t/ig, dateObject.MN);
      }
    }

    //find occurance of d at least one and not more than 2
    if (/d+/i.test(config.format) && !(/d{3}/i.test(config.format))) {
      if (/d{2}/i.test(config.format)) {
        //find occurance of d exactly 2 times
        config.format = config.format.replace(/dd/ig, dateObject.dd > 9 ? dateObject.dd : '0' + dateObject.dd);
      } else {
        //find occurance of d exactly 1 times
        config.format = config.format.replace(/d/ig, dateObject.dd);
      }
    }

    //find occurance of y atleast 2 times
    if (/y+/i.test(config.format) && !(/y{5}/i.test(config.format))) {
      //find occurance of y exactly 4 times
      if (/y{4}/i.test(config.format)) {
        config.format = config.format.replace(/yyyy/ig, dateObject.yy);
      } else if (!/y{3,}/i.test(config.format)) {
        //find occurance of y not exactly 3 times i.e 2 times
        config.format = config.format.replace(/yy/ig, dateObject.yy.toString().substring(2));
      }
    }

    //find occurance of m at least one and not more than 3
    if (/m+/i.test(config.format) && !(/m{4}/i.test(config.format))) {
      if (/m{3}/.test(config.format)) {
        //find occurance of m exactly 3 times
        config.format = config.format.replace(/mmm/ig, months[dateObject.mm - 1].toLowerCase());
      } else if (/M{3}/.test(config.format)) {
        //find occurance of M exactly 3 times
        config.format = config.format.replace(/MMM/ig, months[dateObject.mm].toUpperCase());
      } else if (/m{2,}/i.test(config.format)) {
        //find occurance of m exactly 2 times
        config.format = config.format.replace(/m{2,}/ig, dateObject.mm > 9 ? dateObject.mm : '0' + (dateObject.mm));
      } else {
        //find occurance of m exactly 1 times
        config.format = config.format.replace(/m{1,}/g, dateObject.mm);
      }
    }

    return config.format;
  }

 module.exports = angular
    .module('angular-ui-validator', [])
    .directive('uiForm', function() {
      return {
        controller: function($scope) {
          this.reset = function(modelKey) {
            $scope[modelKey] = null;
            $scope.$apply();
          };
        },
        link: function(scope, element, attrs, controller) {

          element.on('reset', function() {
            var children = element[0].children;
            for (var key in children) {
              switch (children[key].type) {
                case 'text':
                case 'url':
                case 'email':
                case 'password':
                case 'number':
                case 'tel':
                  if (children[key].attributes['ng-model']) {
                    controller.reset(children[key].attributes['ng-model'].value);
                    break;
                  }
              }
            }
          });

          element.on('submit', function() {
            if (scope[attrs.name].$invalid) {
              var error = scope[attrs.name].$error;
              for (var i in error) {
                error[i].forEach(function(each) {
                  each.$setDirty();
                });
              }
              element.removeClass('ng-submitted');
              scope[attrs.name].$submitted = false;
              scope.$apply();
            } else {
              var submitFunction = scope[attrs.uiForm];
              if (submitFunction && typeof submitFunction === 'function') {
                submitFunction();
              }
            }
          });

        },
        restrict: 'A'
      };
    })
    .directive('uiRequired', function() {
      return {
        link: uiRequired,
        // scope: true,
        restrict: 'A',
        require: 'ngModel',
        priority: 90
      };
    })
    .directive('uiPattern', function() {
      return {
        link: uiPattern,
        restrict: 'A',
        scope: {
          uiPattern: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiEmail', function() {
      return {
        link: uiEmail,
        restrict: 'A',
        scope: true,
        require: 'ngModel',
        priority: 80
      };
    })
    .directive('uiUrl', function() {
      return {
        link: uiUrl,
        restrict: 'A',
        scope: true,
        require: 'ngModel'

      };
    })
    .directive('uiMinlength', function() {
      return {
        link: uiMinlength,
        restrict: 'A',
        scope: {
          uiMinlength: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiMaxlength', function() {
      return {
        link: uiMaxlength,
        restrict: 'A',
        scope: {
          uiMaxlength: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiLength', function() {
      return {
        link: uiLength,
        restrict: 'A',
        scope: {
          uiLength: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiAlphanum', function() {
      return {
        link: uiAlphanum,
        restrict: 'A',
        scope: true,
        require: 'ngModel'

      };
    })
    .directive('uiMinwords', function() {
      return {
        link: uiMinwords,
        restrict: 'A',
        scope: {
          uiMinwords: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiMaxwords', function() {
      return {
        link: uiMaxwords,
        restrict: 'A',
        scope: {
          uiMaxwords: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiWords', function() {
      return {
        link: uiWords,
        restrict: 'A',
        scope: {
          uiWords: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiEqualto', function() {
      return {
        link: uiEqualto,
        restrict: 'A',
        scope: {
          uiEqualto: '='
        },
        require: 'ngModel',
        priority: 50
      };
    })
    .directive('uiDigits', function() {
      return {
        link: uiDigits,
        restrict: 'A',
        scope: true,
        require: 'ngModel'

      };
    })
    .directive('uiMin', function() {
      return {
        link: uiMin,
        restrict: 'A',
        scope: {
          uiMin: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiMax', function() {
      return {
        link: uiMax,
        restrict: 'A',
        scope: {
          uiMax: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiRange', function() {
      return {
        link: uiRange,
        restrict: 'A',
        scope: {
          uiRange: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiMinDate', function() {
      return {
        link: uiMinDate,
        restrict: 'A',
        scope: {
          uiMinDate: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiMaxDate', function() {
      return {
        link: uiMaxDate,
        restrict: 'A',
        scope: {
          uiMaxDate: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiBetween', function() {
      return {
        link: uiBetween,
        restrict: 'A',
        scope: {
          uiBetween: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiInteger', function() {
      return {
        link: uiInteger,
        restrict: 'A',
        scope: {
          uiInteger: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiFloat', function() {
      return {
        link: uiFloat,
        restrict: 'A',
        scope: {
          uiFloat: '='
        },
        require: 'ngModel'

      };
    })
    .directive('uiNumber', function() {
      return {
        link: function(scope, element, attrs) {
          element.on('keydown', function(ev) {
            switch (ev.keyCode) {
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 8:
              case 9:
              case 13:
                break;
              case 190:
                if (!attrs.uiNumber)
                  ev.preventDefault();
                break;
              default:
                ev.preventDefault();
                break;
            }
          });
        },
        restrict: 'A',
        priority: 99
      };
    })
    .directive('uiAllowedUpto', function() {
      return {
        link: function(scope, element, attrs) {
          attrs.uiAllowedUpto = Number(attrs.uiAllowedUpto);
          if (!isNaN(attrs.uiAllowedUpto)) {

            element.on('keydown', function(ev) {
              switch (ev.keyCode) {
                case 8:
                case 9:
                case 13:
                  break;
                default:
                  if (element.val().length >= attrs.uiAllowedUpto) {
                    ev.preventDefault();
                  }
                  break;
              }
            });
          }
        },
        restrict: 'A',
        priority: 95
      };
    })
    .directive('uiFormattedDate', function() {
      return {
        link: function(scope, element, attrs) {
          element.on('change', function() {
            element.val(getDateString({
              date: element.val(),
              format: attrs.uiFormattedDate
            }));
          });
        },
        restrict: 'A'
      };
    });

  function evaluateRegExp(regExp, value) {
    return new RegExp(regExp || '').test(value);
  }

  function countWords(value) {
    return value.match(/\S/g).length;
  }

  function compare(target, source) {
    if (target === source) {
      return 0;
    }

    if (target > source) {
      return 1;
    }

    return -1;
  }


  function init(element, ngModel) {
    ngModel.$setUntouched();
    ngModel.$setPristine();
  }

  function uiRequired(scope, element, attrs, ngModel) { //here is the model
    init(element, ngModel);


    ngModel.$validators.uiRequired = function(modelValue, viewValue) {
      var value = modelValue || viewValue;
      return value ? true : false;
    };
  }

  function uiPattern(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      var flag = evaluateRegExp(scope.uiPattern, viewValue);

      ngModel.$setValidity('uiPattern', flag);

      if (flag) {
        return viewValue;
      }

    });
  }

  function uiEmail(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp(/^[a-zA-Z0-9\-\_\.\+]+@[a-zA-Z0-9\-\_\.]+\.[a-zA-Z0-9\-\_]+$/, viewValue);

        ngModel.$setValidity('uiEmail', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiUrl(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp(/(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/, viewValue);

        ngModel.$setValidity('uiUrl', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiMinlength(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = true;

        if (viewValue) {
          flag = evaluateRegExp('^.{' + scope.uiMinlength + ',}$', viewValue);
        }

        ngModel.$setValidity('uiMinLength', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiMaxlength(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp('^.{0,' + scope.uiMaxlength + '}$', viewValue);

        ngModel.$setValidity('uiMaxLength', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiLength(scope, element, attrs, ngModel) {

    init(element, ngModel);

    if (typeof scope.uiLength === 'object') {

      if (Array.isArray(scope.uiLength) && scope.uiLength.length === 2) {
        scope.uiLength.min = scope.uiLength[0] < scope.uiLength[1] ? scope.uiLength[0] : scope.uiLength[1];
        scope.uiLength.max = scope.uiLength[0] > scope.uiLength[1] ? scope.uiLength[0] : scope.uiLength[1];
      }

      ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
          var flag = true;

          if (viewValue) {
            flag = evaluateRegExp('^.{' + scope.uiLength.min + ',' + scope.uiLength.max + '}$', viewValue);
          }

          ngModel.$setValidity('uiLength', flag);

          if (flag) {
            return viewValue;
          }
        } else {
          return viewValue;
        }
      });
    }
  }

  function uiEqualto(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {

      var flag = true;

      if (viewValue) {
        flag = compare(viewValue, scope.uiEqualto) === 0 ? true : false;

        ngModel.$setValidity('uiEqualto', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }

    });

  }

  function uiAlphanum(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = true;

        if (viewValue) {
          flag = evaluateRegExp(/^[a-zA-Z0-9]+$/, viewValue);
        }

        ngModel.$setValidity('uiAlphanum', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });

  }

  function uiMinwords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = true;

        if (viewValue) {
          flag = compare(countWords(viewValue), (scope.uiMinwords || 0)) > -1 ? true : false;
        }

        ngModel.$setValidity('uiMinWords', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }

    });

  }

  function uiMaxwords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {

      if (viewValue) {
        var flag = true;

        if (viewValue) {
          flag = compare(countWords(viewValue), scope.uiMaxwords) === 1 ? false : true;
        }

        ngModel.$setValidity('uiMaxWords', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });

  }

  function uiWords(scope, element, attrs, ngModel) {

    init(element, ngModel);

    if (typeof scope.uiWords === 'object') {

      if (Array.isArray(scope.uiWords) && scope.uiWords.length === 2) {
        scope.uiWords.minWords =
          scope.uiWords[0] < scope.uiWords[1] ? scope.uiWords[0] : scope.uiWords[1];
        scope.uiWords.maxWords =
          scope.uiWords[0] > scope.uiWords[1] ? scope.uiWords[0] : scope.uiWords[1];
      }

      ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
          var flag = true,
            totalWords;

          if (viewValue) {
            totalWords = countWords(viewValue);
            flag = compare(totalWords >= scope.uiWords.minWords) &&
              compare(totalWords <= scope.uiWords.minWords);
          }

          ngModel.$setValidity('uiWords', flag);

          if (flag) {
            return viewValue;
          }
        } else {
          return viewValue;
        }
      });
    }
  }

  function uiDigits(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp(/^\d{1,}$/, viewValue);
        ngModel.$setValidity('uiDigits', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiInteger(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp(/^\d+$/, viewValue);
        ngModel.$setValidity('uiInteger', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiFloat(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = evaluateRegExp(/^\d+.\d+$/, viewValue);
        ngModel.$setValidity('uiFloat', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiMin(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {

      if (viewValue) {
        var flag = Number(viewValue) >= scope.uiMin ? true : false;

        ngModel.$setValidity('uiMin', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiMax(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = Number(viewValue) <= scope.uiMax ? true : false;

        ngModel.$setValidity('uiMax', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }
    });
  }

  function uiRange(scope, element, attrs, ngModel) {
    init(element, ngModel);

    if (typeof scope.uiRange === 'object') {

      if (Array.isArray(scope.uiRange) && scope.uiRange.length === 2) {
        scope.uiRange.min = scope.uiRange[0] < scope.uiRange[1] ? scope.uiRange[0] : scope.uiRange[1];
        scope.uiRange.max = scope.uiRange[0] > scope.uiRange[1] ? scope.uiRange[0] : scope.uiRange[1];
      }

      ngModel.$parsers.push(function(viewValue) {
        if (viewValue) {
          var temp = Number(viewValue);

          var flag = (temp >= scope.uiRange.min) && (temp <= scope.uiRange.max) ? true : false;

          ngModel.$setValidity('uiRange', flag);

          if (flag) {
            return viewValue;
          }
        } else {
          return viewValue;
        }

      });
    }
  }

  function uiMinDate(scope, element, attrs, ngModel) {

    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = compare(new Date(viewValue), new Date(scope.uiMinDate)) > -1 ? true : false;

        ngModel.$setValidity('uiMinDate', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }

    });

  }

  function uiMaxDate(scope, element, attrs, ngModel) {
    init(element, ngModel);

    ngModel.$parsers.push(function(viewValue) {
      if (viewValue) {
        var flag = compare(new Date(viewValue), new Date(scope.uiMaxDate)) != 1 ? true : false;

        ngModel.$setValidity('uiMaxDate', flag);

        if (flag) {
          return viewValue;
        }
      } else {
        return viewValue;
      }

    });
  }

  function uiBetween(scope, element, attrs, ngModel) {
    init(element, ngModel);

    if (typeof scope.uiBetween === 'object') {

      if (Array.isArray(scope.uiBetween) && scope.uiBetween.length === 2) {
        scope.uiBetween.minBetween =
          scope.uiBetween[0] < scope.uiBetween[1] ? scope.uiBetween[0] : scope.uiBetween[1];
        scope.uiBetween.maxBetween =
          scope.uiBetween[0] > scope.uiBetween[1] ? scope.uiBetween[0] : scope.uiBetween[1];
      }

      ngModel.$parsers.push(function(viewValue) {

        if (viewValue) {

          var flag = true;

          flag = compare(new Date(viewValue), new Date(scope.uiBetween.minBetween)) > -1 &&
            compare(new Date(viewValue), new Date(scope.uiBetween.maxBetween)) < 1;

          ngModel.$setValidity('uiBetween', flag);

          if (flag) {
            return viewValue;
          }
        } else {
          return viewValue;
        }

      });
    }
  }




},{}]},{},[1])